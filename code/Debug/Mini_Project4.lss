
Mini_Project4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000388e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000012c  00800060  0000388e  00003922  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  0080018c  0080018c  00003a4e  2**0
                  ALLOC
  3 .stab         00002a54  00000000  00000000  00003a50  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000017b9  00000000  00000000  000064a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00007c5d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00007dfd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00007fef  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000a3fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000b780  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000c958  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000cb18  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000ce0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d77c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 1b 19 	jmp	0x3236	; 0x3236 <__vector_4>
      14:	0c 94 4e 19 	jmp	0x329c	; 0x329c <__vector_5>
      18:	0c 94 00 0b 	jmp	0x1600	; 0x1600 <__vector_6>
      1c:	0c 94 81 19 	jmp	0x3302	; 0x3302 <__vector_7>
      20:	0c 94 b4 19 	jmp	0x3368	; 0x3368 <__vector_8>
      24:	0c 94 e1 19 	jmp	0x33c2	; 0x33c2 <__vector_9>
      28:	0c 94 0e 1a 	jmp	0x341c	; 0x341c <__vector_10>
      2c:	0c 94 41 1a 	jmp	0x3482	; 0x3482 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e8       	ldi	r30, 0x8E	; 142
      68:	f8 e3       	ldi	r31, 0x38	; 56
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 38       	cpi	r26, 0x8C	; 140
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac e8       	ldi	r26, 0x8C	; 140
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 39       	cpi	r26, 0x98	; 152
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 59 10 	call	0x20b2	; 0x20b2 <main>
      8a:	0c 94 45 1c 	jmp	0x388a	; 0x388a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 c9 1b 	jmp	0x3792	; 0x3792 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a1 e7       	ldi	r26, 0x71	; 113
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 e5 1b 	jmp	0x37ca	; 0x37ca <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 d5 1b 	jmp	0x37aa	; 0x37aa <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 f1 1b 	jmp	0x37e2	; 0x37e2 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 d5 1b 	jmp	0x37aa	; 0x37aa <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 f1 1b 	jmp	0x37e2	; 0x37e2 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 c9 1b 	jmp	0x3792	; 0x3792 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	81 e7       	ldi	r24, 0x71	; 113
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 e5 1b 	jmp	0x37ca	; 0x37ca <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 d1 1b 	jmp	0x37a2	; 0x37a2 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	61 e7       	ldi	r22, 0x71	; 113
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 ed 1b 	jmp	0x37da	; 0x37da <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 d5 1b 	jmp	0x37aa	; 0x37aa <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 f1 1b 	jmp	0x37e2	; 0x37e2 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 d5 1b 	jmp	0x37aa	; 0x37aa <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 f1 1b 	jmp	0x37e2	; 0x37e2 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 d5 1b 	jmp	0x37aa	; 0x37aa <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 f1 1b 	jmp	0x37e2	; 0x37e2 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 d9 1b 	jmp	0x37b2	; 0x37b2 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 f5 1b 	jmp	0x37ea	; 0x37ea <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 d1 1b 	jmp	0x37a2	; 0x37a2 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 ed 1b 	jmp	0x37da	; 0x37da <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e7 58       	subi	r30, 0x87	; 135
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <GPIO_setupPinDirection>:
/* ===================================================================================================
										Function Definition
   ===================================================================================================*/

void GPIO_setupPinDirection(const GPIO_Port a_port_num, const GPIO_Pin a_pin_num, uint8 a_direction)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	00 d0       	rcall	.+0      	; 0xe34 <GPIO_setupPinDirection+0x6>
     e34:	00 d0       	rcall	.+0      	; 0xe36 <GPIO_setupPinDirection+0x8>
     e36:	0f 92       	push	r0
     e38:	cd b7       	in	r28, 0x3d	; 61
     e3a:	de b7       	in	r29, 0x3e	; 62
     e3c:	89 83       	std	Y+1, r24	; 0x01
     e3e:	6a 83       	std	Y+2, r22	; 0x02
     e40:	4b 83       	std	Y+3, r20	; 0x03
	if(a_port_num >= NUM_OF_PORTS || a_pin_num >= NUM_OF_PINS_PER_PORT)
     e42:	89 81       	ldd	r24, Y+1	; 0x01
     e44:	84 30       	cpi	r24, 0x04	; 4
     e46:	08 f0       	brcs	.+2      	; 0xe4a <GPIO_setupPinDirection+0x1c>
     e48:	e4 c0       	rjmp	.+456    	; 0x1012 <GPIO_setupPinDirection+0x1e4>
     e4a:	8a 81       	ldd	r24, Y+2	; 0x02
     e4c:	88 30       	cpi	r24, 0x08	; 8
     e4e:	08 f0       	brcs	.+2      	; 0xe52 <GPIO_setupPinDirection+0x24>
     e50:	e0 c0       	rjmp	.+448    	; 0x1012 <GPIO_setupPinDirection+0x1e4>
	{
		/* Wrong Input*/
	}
	else
	{
		  switch(a_port_num)
     e52:	89 81       	ldd	r24, Y+1	; 0x01
     e54:	28 2f       	mov	r18, r24
     e56:	30 e0       	ldi	r19, 0x00	; 0
     e58:	3d 83       	std	Y+5, r19	; 0x05
     e5a:	2c 83       	std	Y+4, r18	; 0x04
     e5c:	8c 81       	ldd	r24, Y+4	; 0x04
     e5e:	9d 81       	ldd	r25, Y+5	; 0x05
     e60:	81 30       	cpi	r24, 0x01	; 1
     e62:	91 05       	cpc	r25, r1
     e64:	09 f4       	brne	.+2      	; 0xe68 <GPIO_setupPinDirection+0x3a>
     e66:	47 c0       	rjmp	.+142    	; 0xef6 <GPIO_setupPinDirection+0xc8>
     e68:	2c 81       	ldd	r18, Y+4	; 0x04
     e6a:	3d 81       	ldd	r19, Y+5	; 0x05
     e6c:	22 30       	cpi	r18, 0x02	; 2
     e6e:	31 05       	cpc	r19, r1
     e70:	2c f4       	brge	.+10     	; 0xe7c <GPIO_setupPinDirection+0x4e>
     e72:	8c 81       	ldd	r24, Y+4	; 0x04
     e74:	9d 81       	ldd	r25, Y+5	; 0x05
     e76:	00 97       	sbiw	r24, 0x00	; 0
     e78:	71 f0       	breq	.+28     	; 0xe96 <GPIO_setupPinDirection+0x68>
     e7a:	cb c0       	rjmp	.+406    	; 0x1012 <GPIO_setupPinDirection+0x1e4>
     e7c:	2c 81       	ldd	r18, Y+4	; 0x04
     e7e:	3d 81       	ldd	r19, Y+5	; 0x05
     e80:	22 30       	cpi	r18, 0x02	; 2
     e82:	31 05       	cpc	r19, r1
     e84:	09 f4       	brne	.+2      	; 0xe88 <GPIO_setupPinDirection+0x5a>
     e86:	67 c0       	rjmp	.+206    	; 0xf56 <GPIO_setupPinDirection+0x128>
     e88:	8c 81       	ldd	r24, Y+4	; 0x04
     e8a:	9d 81       	ldd	r25, Y+5	; 0x05
     e8c:	83 30       	cpi	r24, 0x03	; 3
     e8e:	91 05       	cpc	r25, r1
     e90:	09 f4       	brne	.+2      	; 0xe94 <GPIO_setupPinDirection+0x66>
     e92:	91 c0       	rjmp	.+290    	; 0xfb6 <GPIO_setupPinDirection+0x188>
     e94:	be c0       	rjmp	.+380    	; 0x1012 <GPIO_setupPinDirection+0x1e4>
	  {
		case PORTA_ID:
			if(a_direction==PIN_OUTPUT)
     e96:	8b 81       	ldd	r24, Y+3	; 0x03
     e98:	81 30       	cpi	r24, 0x01	; 1
     e9a:	a1 f4       	brne	.+40     	; 0xec4 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,a_pin_num);/* Setting the Required pin on DDR Register to be output*/
     e9c:	aa e3       	ldi	r26, 0x3A	; 58
     e9e:	b0 e0       	ldi	r27, 0x00	; 0
     ea0:	ea e3       	ldi	r30, 0x3A	; 58
     ea2:	f0 e0       	ldi	r31, 0x00	; 0
     ea4:	80 81       	ld	r24, Z
     ea6:	48 2f       	mov	r20, r24
     ea8:	8a 81       	ldd	r24, Y+2	; 0x02
     eaa:	28 2f       	mov	r18, r24
     eac:	30 e0       	ldi	r19, 0x00	; 0
     eae:	81 e0       	ldi	r24, 0x01	; 1
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	02 2e       	mov	r0, r18
     eb4:	02 c0       	rjmp	.+4      	; 0xeba <GPIO_setupPinDirection+0x8c>
     eb6:	88 0f       	add	r24, r24
     eb8:	99 1f       	adc	r25, r25
     eba:	0a 94       	dec	r0
     ebc:	e2 f7       	brpl	.-8      	; 0xeb6 <GPIO_setupPinDirection+0x88>
     ebe:	84 2b       	or	r24, r20
     ec0:	8c 93       	st	X, r24
     ec2:	a7 c0       	rjmp	.+334    	; 0x1012 <GPIO_setupPinDirection+0x1e4>
			}
			else if(a_direction==PIN_INPUT)
     ec4:	8b 81       	ldd	r24, Y+3	; 0x03
     ec6:	88 23       	and	r24, r24
     ec8:	09 f0       	breq	.+2      	; 0xecc <GPIO_setupPinDirection+0x9e>
     eca:	a3 c0       	rjmp	.+326    	; 0x1012 <GPIO_setupPinDirection+0x1e4>
			{
				CLR_BIT(DDRA,a_pin_num);/* Clearing the Required pin on DDR Register to be input*/
     ecc:	aa e3       	ldi	r26, 0x3A	; 58
     ece:	b0 e0       	ldi	r27, 0x00	; 0
     ed0:	ea e3       	ldi	r30, 0x3A	; 58
     ed2:	f0 e0       	ldi	r31, 0x00	; 0
     ed4:	80 81       	ld	r24, Z
     ed6:	48 2f       	mov	r20, r24
     ed8:	8a 81       	ldd	r24, Y+2	; 0x02
     eda:	28 2f       	mov	r18, r24
     edc:	30 e0       	ldi	r19, 0x00	; 0
     ede:	81 e0       	ldi	r24, 0x01	; 1
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	02 2e       	mov	r0, r18
     ee4:	02 c0       	rjmp	.+4      	; 0xeea <GPIO_setupPinDirection+0xbc>
     ee6:	88 0f       	add	r24, r24
     ee8:	99 1f       	adc	r25, r25
     eea:	0a 94       	dec	r0
     eec:	e2 f7       	brpl	.-8      	; 0xee6 <GPIO_setupPinDirection+0xb8>
     eee:	80 95       	com	r24
     ef0:	84 23       	and	r24, r20
     ef2:	8c 93       	st	X, r24
     ef4:	8e c0       	rjmp	.+284    	; 0x1012 <GPIO_setupPinDirection+0x1e4>
			{
				/*Wrong a_direction Error*/
			}
			break;
		case PORTB_ID:
			if(a_direction==PIN_OUTPUT)
     ef6:	8b 81       	ldd	r24, Y+3	; 0x03
     ef8:	81 30       	cpi	r24, 0x01	; 1
     efa:	a1 f4       	brne	.+40     	; 0xf24 <GPIO_setupPinDirection+0xf6>
				{
					SET_BIT(DDRB,a_pin_num);/* Setting the Required pin on DDR Register to be output*/
     efc:	a7 e3       	ldi	r26, 0x37	; 55
     efe:	b0 e0       	ldi	r27, 0x00	; 0
     f00:	e7 e3       	ldi	r30, 0x37	; 55
     f02:	f0 e0       	ldi	r31, 0x00	; 0
     f04:	80 81       	ld	r24, Z
     f06:	48 2f       	mov	r20, r24
     f08:	8a 81       	ldd	r24, Y+2	; 0x02
     f0a:	28 2f       	mov	r18, r24
     f0c:	30 e0       	ldi	r19, 0x00	; 0
     f0e:	81 e0       	ldi	r24, 0x01	; 1
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	02 2e       	mov	r0, r18
     f14:	02 c0       	rjmp	.+4      	; 0xf1a <GPIO_setupPinDirection+0xec>
     f16:	88 0f       	add	r24, r24
     f18:	99 1f       	adc	r25, r25
     f1a:	0a 94       	dec	r0
     f1c:	e2 f7       	brpl	.-8      	; 0xf16 <GPIO_setupPinDirection+0xe8>
     f1e:	84 2b       	or	r24, r20
     f20:	8c 93       	st	X, r24
     f22:	77 c0       	rjmp	.+238    	; 0x1012 <GPIO_setupPinDirection+0x1e4>
				}
				else if(a_direction==PIN_INPUT)
     f24:	8b 81       	ldd	r24, Y+3	; 0x03
     f26:	88 23       	and	r24, r24
     f28:	09 f0       	breq	.+2      	; 0xf2c <GPIO_setupPinDirection+0xfe>
     f2a:	73 c0       	rjmp	.+230    	; 0x1012 <GPIO_setupPinDirection+0x1e4>
				{
					CLR_BIT(DDRB,a_pin_num);/* Clearing the Required pin on DDR Register to be input*/
     f2c:	a7 e3       	ldi	r26, 0x37	; 55
     f2e:	b0 e0       	ldi	r27, 0x00	; 0
     f30:	e7 e3       	ldi	r30, 0x37	; 55
     f32:	f0 e0       	ldi	r31, 0x00	; 0
     f34:	80 81       	ld	r24, Z
     f36:	48 2f       	mov	r20, r24
     f38:	8a 81       	ldd	r24, Y+2	; 0x02
     f3a:	28 2f       	mov	r18, r24
     f3c:	30 e0       	ldi	r19, 0x00	; 0
     f3e:	81 e0       	ldi	r24, 0x01	; 1
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	02 2e       	mov	r0, r18
     f44:	02 c0       	rjmp	.+4      	; 0xf4a <GPIO_setupPinDirection+0x11c>
     f46:	88 0f       	add	r24, r24
     f48:	99 1f       	adc	r25, r25
     f4a:	0a 94       	dec	r0
     f4c:	e2 f7       	brpl	.-8      	; 0xf46 <GPIO_setupPinDirection+0x118>
     f4e:	80 95       	com	r24
     f50:	84 23       	and	r24, r20
     f52:	8c 93       	st	X, r24
     f54:	5e c0       	rjmp	.+188    	; 0x1012 <GPIO_setupPinDirection+0x1e4>
				{
					/*Wrong a_direction Error*/
				}
				break;
		case PORTC_ID:
			if(a_direction==PIN_OUTPUT)
     f56:	8b 81       	ldd	r24, Y+3	; 0x03
     f58:	81 30       	cpi	r24, 0x01	; 1
     f5a:	a1 f4       	brne	.+40     	; 0xf84 <GPIO_setupPinDirection+0x156>
				{
					SET_BIT(DDRC,a_pin_num);/* Setting the Required pin on DDR Register to be output*/
     f5c:	a4 e3       	ldi	r26, 0x34	; 52
     f5e:	b0 e0       	ldi	r27, 0x00	; 0
     f60:	e4 e3       	ldi	r30, 0x34	; 52
     f62:	f0 e0       	ldi	r31, 0x00	; 0
     f64:	80 81       	ld	r24, Z
     f66:	48 2f       	mov	r20, r24
     f68:	8a 81       	ldd	r24, Y+2	; 0x02
     f6a:	28 2f       	mov	r18, r24
     f6c:	30 e0       	ldi	r19, 0x00	; 0
     f6e:	81 e0       	ldi	r24, 0x01	; 1
     f70:	90 e0       	ldi	r25, 0x00	; 0
     f72:	02 2e       	mov	r0, r18
     f74:	02 c0       	rjmp	.+4      	; 0xf7a <GPIO_setupPinDirection+0x14c>
     f76:	88 0f       	add	r24, r24
     f78:	99 1f       	adc	r25, r25
     f7a:	0a 94       	dec	r0
     f7c:	e2 f7       	brpl	.-8      	; 0xf76 <GPIO_setupPinDirection+0x148>
     f7e:	84 2b       	or	r24, r20
     f80:	8c 93       	st	X, r24
     f82:	47 c0       	rjmp	.+142    	; 0x1012 <GPIO_setupPinDirection+0x1e4>
				}
				else if(a_direction==PIN_INPUT)
     f84:	8b 81       	ldd	r24, Y+3	; 0x03
     f86:	88 23       	and	r24, r24
     f88:	09 f0       	breq	.+2      	; 0xf8c <GPIO_setupPinDirection+0x15e>
     f8a:	43 c0       	rjmp	.+134    	; 0x1012 <GPIO_setupPinDirection+0x1e4>
				{
					CLR_BIT(DDRC,a_pin_num);/* Clearing the Required pin on DDR Register to be input*/
     f8c:	a4 e3       	ldi	r26, 0x34	; 52
     f8e:	b0 e0       	ldi	r27, 0x00	; 0
     f90:	e4 e3       	ldi	r30, 0x34	; 52
     f92:	f0 e0       	ldi	r31, 0x00	; 0
     f94:	80 81       	ld	r24, Z
     f96:	48 2f       	mov	r20, r24
     f98:	8a 81       	ldd	r24, Y+2	; 0x02
     f9a:	28 2f       	mov	r18, r24
     f9c:	30 e0       	ldi	r19, 0x00	; 0
     f9e:	81 e0       	ldi	r24, 0x01	; 1
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	02 2e       	mov	r0, r18
     fa4:	02 c0       	rjmp	.+4      	; 0xfaa <GPIO_setupPinDirection+0x17c>
     fa6:	88 0f       	add	r24, r24
     fa8:	99 1f       	adc	r25, r25
     faa:	0a 94       	dec	r0
     fac:	e2 f7       	brpl	.-8      	; 0xfa6 <GPIO_setupPinDirection+0x178>
     fae:	80 95       	com	r24
     fb0:	84 23       	and	r24, r20
     fb2:	8c 93       	st	X, r24
     fb4:	2e c0       	rjmp	.+92     	; 0x1012 <GPIO_setupPinDirection+0x1e4>
				{
					/*Wrong a_direction Error*/
				}
				break;
		case PORTD_ID:
			if(a_direction==PIN_OUTPUT)
     fb6:	8b 81       	ldd	r24, Y+3	; 0x03
     fb8:	81 30       	cpi	r24, 0x01	; 1
     fba:	a1 f4       	brne	.+40     	; 0xfe4 <GPIO_setupPinDirection+0x1b6>
				{
					SET_BIT(DDRD,a_pin_num);/* Setting the Required pin on DDR Register to be output*/
     fbc:	a1 e3       	ldi	r26, 0x31	; 49
     fbe:	b0 e0       	ldi	r27, 0x00	; 0
     fc0:	e1 e3       	ldi	r30, 0x31	; 49
     fc2:	f0 e0       	ldi	r31, 0x00	; 0
     fc4:	80 81       	ld	r24, Z
     fc6:	48 2f       	mov	r20, r24
     fc8:	8a 81       	ldd	r24, Y+2	; 0x02
     fca:	28 2f       	mov	r18, r24
     fcc:	30 e0       	ldi	r19, 0x00	; 0
     fce:	81 e0       	ldi	r24, 0x01	; 1
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	02 2e       	mov	r0, r18
     fd4:	02 c0       	rjmp	.+4      	; 0xfda <GPIO_setupPinDirection+0x1ac>
     fd6:	88 0f       	add	r24, r24
     fd8:	99 1f       	adc	r25, r25
     fda:	0a 94       	dec	r0
     fdc:	e2 f7       	brpl	.-8      	; 0xfd6 <GPIO_setupPinDirection+0x1a8>
     fde:	84 2b       	or	r24, r20
     fe0:	8c 93       	st	X, r24
     fe2:	17 c0       	rjmp	.+46     	; 0x1012 <GPIO_setupPinDirection+0x1e4>
				}
				else if(a_direction==PIN_INPUT)
     fe4:	8b 81       	ldd	r24, Y+3	; 0x03
     fe6:	88 23       	and	r24, r24
     fe8:	a1 f4       	brne	.+40     	; 0x1012 <GPIO_setupPinDirection+0x1e4>
				{
					CLR_BIT(DDRD,a_pin_num);/* Clearing the Required pin on DDR Register to be input*/
     fea:	a1 e3       	ldi	r26, 0x31	; 49
     fec:	b0 e0       	ldi	r27, 0x00	; 0
     fee:	e1 e3       	ldi	r30, 0x31	; 49
     ff0:	f0 e0       	ldi	r31, 0x00	; 0
     ff2:	80 81       	ld	r24, Z
     ff4:	48 2f       	mov	r20, r24
     ff6:	8a 81       	ldd	r24, Y+2	; 0x02
     ff8:	28 2f       	mov	r18, r24
     ffa:	30 e0       	ldi	r19, 0x00	; 0
     ffc:	81 e0       	ldi	r24, 0x01	; 1
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	02 2e       	mov	r0, r18
    1002:	02 c0       	rjmp	.+4      	; 0x1008 <GPIO_setupPinDirection+0x1da>
    1004:	88 0f       	add	r24, r24
    1006:	99 1f       	adc	r25, r25
    1008:	0a 94       	dec	r0
    100a:	e2 f7       	brpl	.-8      	; 0x1004 <GPIO_setupPinDirection+0x1d6>
    100c:	80 95       	com	r24
    100e:	84 23       	and	r24, r20
    1010:	8c 93       	st	X, r24
		default:
			/*Wrong Port Error*/
		break;
	  }
	  }
	}
    1012:	0f 90       	pop	r0
    1014:	0f 90       	pop	r0
    1016:	0f 90       	pop	r0
    1018:	0f 90       	pop	r0
    101a:	0f 90       	pop	r0
    101c:	cf 91       	pop	r28
    101e:	df 91       	pop	r29
    1020:	08 95       	ret

00001022 <GPIO_writePin>:

void GPIO_writePin(const GPIO_Port a_port_num, const GPIO_Pin a_pin_num, uint8 a_level)
{
    1022:	df 93       	push	r29
    1024:	cf 93       	push	r28
    1026:	00 d0       	rcall	.+0      	; 0x1028 <GPIO_writePin+0x6>
    1028:	00 d0       	rcall	.+0      	; 0x102a <GPIO_writePin+0x8>
    102a:	0f 92       	push	r0
    102c:	cd b7       	in	r28, 0x3d	; 61
    102e:	de b7       	in	r29, 0x3e	; 62
    1030:	89 83       	std	Y+1, r24	; 0x01
    1032:	6a 83       	std	Y+2, r22	; 0x02
    1034:	4b 83       	std	Y+3, r20	; 0x03
	if(a_port_num >= NUM_OF_PORTS || a_pin_num >= NUM_OF_PINS_PER_PORT)
    1036:	89 81       	ldd	r24, Y+1	; 0x01
    1038:	84 30       	cpi	r24, 0x04	; 4
    103a:	08 f0       	brcs	.+2      	; 0x103e <GPIO_writePin+0x1c>
    103c:	d5 c0       	rjmp	.+426    	; 0x11e8 <GPIO_writePin+0x1c6>
    103e:	8a 81       	ldd	r24, Y+2	; 0x02
    1040:	88 30       	cpi	r24, 0x08	; 8
    1042:	08 f0       	brcs	.+2      	; 0x1046 <GPIO_writePin+0x24>
    1044:	d1 c0       	rjmp	.+418    	; 0x11e8 <GPIO_writePin+0x1c6>
	{
		/* Wrong Input*/
	}
	else
	{
		  switch(a_port_num)
    1046:	89 81       	ldd	r24, Y+1	; 0x01
    1048:	28 2f       	mov	r18, r24
    104a:	30 e0       	ldi	r19, 0x00	; 0
    104c:	3d 83       	std	Y+5, r19	; 0x05
    104e:	2c 83       	std	Y+4, r18	; 0x04
    1050:	8c 81       	ldd	r24, Y+4	; 0x04
    1052:	9d 81       	ldd	r25, Y+5	; 0x05
    1054:	81 30       	cpi	r24, 0x01	; 1
    1056:	91 05       	cpc	r25, r1
    1058:	09 f4       	brne	.+2      	; 0x105c <GPIO_writePin+0x3a>
    105a:	43 c0       	rjmp	.+134    	; 0x10e2 <GPIO_writePin+0xc0>
    105c:	2c 81       	ldd	r18, Y+4	; 0x04
    105e:	3d 81       	ldd	r19, Y+5	; 0x05
    1060:	22 30       	cpi	r18, 0x02	; 2
    1062:	31 05       	cpc	r19, r1
    1064:	2c f4       	brge	.+10     	; 0x1070 <GPIO_writePin+0x4e>
    1066:	8c 81       	ldd	r24, Y+4	; 0x04
    1068:	9d 81       	ldd	r25, Y+5	; 0x05
    106a:	00 97       	sbiw	r24, 0x00	; 0
    106c:	71 f0       	breq	.+28     	; 0x108a <GPIO_writePin+0x68>
    106e:	bc c0       	rjmp	.+376    	; 0x11e8 <GPIO_writePin+0x1c6>
    1070:	2c 81       	ldd	r18, Y+4	; 0x04
    1072:	3d 81       	ldd	r19, Y+5	; 0x05
    1074:	22 30       	cpi	r18, 0x02	; 2
    1076:	31 05       	cpc	r19, r1
    1078:	09 f4       	brne	.+2      	; 0x107c <GPIO_writePin+0x5a>
    107a:	5f c0       	rjmp	.+190    	; 0x113a <GPIO_writePin+0x118>
    107c:	8c 81       	ldd	r24, Y+4	; 0x04
    107e:	9d 81       	ldd	r25, Y+5	; 0x05
    1080:	83 30       	cpi	r24, 0x03	; 3
    1082:	91 05       	cpc	r25, r1
    1084:	09 f4       	brne	.+2      	; 0x1088 <GPIO_writePin+0x66>
    1086:	85 c0       	rjmp	.+266    	; 0x1192 <GPIO_writePin+0x170>
    1088:	af c0       	rjmp	.+350    	; 0x11e8 <GPIO_writePin+0x1c6>
	  {
		case PORTA_ID:
			if(a_level == LOGIC_HIGH)
    108a:	8b 81       	ldd	r24, Y+3	; 0x03
    108c:	81 30       	cpi	r24, 0x01	; 1
    108e:	a1 f4       	brne	.+40     	; 0x10b8 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,a_pin_num);/* Setting the Required pin on Port Register to Output a High logic 1 */
    1090:	ab e3       	ldi	r26, 0x3B	; 59
    1092:	b0 e0       	ldi	r27, 0x00	; 0
    1094:	eb e3       	ldi	r30, 0x3B	; 59
    1096:	f0 e0       	ldi	r31, 0x00	; 0
    1098:	80 81       	ld	r24, Z
    109a:	48 2f       	mov	r20, r24
    109c:	8a 81       	ldd	r24, Y+2	; 0x02
    109e:	28 2f       	mov	r18, r24
    10a0:	30 e0       	ldi	r19, 0x00	; 0
    10a2:	81 e0       	ldi	r24, 0x01	; 1
    10a4:	90 e0       	ldi	r25, 0x00	; 0
    10a6:	02 2e       	mov	r0, r18
    10a8:	02 c0       	rjmp	.+4      	; 0x10ae <GPIO_writePin+0x8c>
    10aa:	88 0f       	add	r24, r24
    10ac:	99 1f       	adc	r25, r25
    10ae:	0a 94       	dec	r0
    10b0:	e2 f7       	brpl	.-8      	; 0x10aa <GPIO_writePin+0x88>
    10b2:	84 2b       	or	r24, r20
    10b4:	8c 93       	st	X, r24
    10b6:	98 c0       	rjmp	.+304    	; 0x11e8 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLR_BIT(PORTA,a_pin_num);/* clearing the Required pin on Port Register to Output a low logic 0 */
    10b8:	ab e3       	ldi	r26, 0x3B	; 59
    10ba:	b0 e0       	ldi	r27, 0x00	; 0
    10bc:	eb e3       	ldi	r30, 0x3B	; 59
    10be:	f0 e0       	ldi	r31, 0x00	; 0
    10c0:	80 81       	ld	r24, Z
    10c2:	48 2f       	mov	r20, r24
    10c4:	8a 81       	ldd	r24, Y+2	; 0x02
    10c6:	28 2f       	mov	r18, r24
    10c8:	30 e0       	ldi	r19, 0x00	; 0
    10ca:	81 e0       	ldi	r24, 0x01	; 1
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	02 2e       	mov	r0, r18
    10d0:	02 c0       	rjmp	.+4      	; 0x10d6 <GPIO_writePin+0xb4>
    10d2:	88 0f       	add	r24, r24
    10d4:	99 1f       	adc	r25, r25
    10d6:	0a 94       	dec	r0
    10d8:	e2 f7       	brpl	.-8      	; 0x10d2 <GPIO_writePin+0xb0>
    10da:	80 95       	com	r24
    10dc:	84 23       	and	r24, r20
    10de:	8c 93       	st	X, r24
    10e0:	83 c0       	rjmp	.+262    	; 0x11e8 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(a_level == LOGIC_HIGH)
    10e2:	8b 81       	ldd	r24, Y+3	; 0x03
    10e4:	81 30       	cpi	r24, 0x01	; 1
    10e6:	a1 f4       	brne	.+40     	; 0x1110 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,a_pin_num);/* Setting the Required pin on Port Register to Output a High logic 1 */
    10e8:	a8 e3       	ldi	r26, 0x38	; 56
    10ea:	b0 e0       	ldi	r27, 0x00	; 0
    10ec:	e8 e3       	ldi	r30, 0x38	; 56
    10ee:	f0 e0       	ldi	r31, 0x00	; 0
    10f0:	80 81       	ld	r24, Z
    10f2:	48 2f       	mov	r20, r24
    10f4:	8a 81       	ldd	r24, Y+2	; 0x02
    10f6:	28 2f       	mov	r18, r24
    10f8:	30 e0       	ldi	r19, 0x00	; 0
    10fa:	81 e0       	ldi	r24, 0x01	; 1
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	02 2e       	mov	r0, r18
    1100:	02 c0       	rjmp	.+4      	; 0x1106 <GPIO_writePin+0xe4>
    1102:	88 0f       	add	r24, r24
    1104:	99 1f       	adc	r25, r25
    1106:	0a 94       	dec	r0
    1108:	e2 f7       	brpl	.-8      	; 0x1102 <GPIO_writePin+0xe0>
    110a:	84 2b       	or	r24, r20
    110c:	8c 93       	st	X, r24
    110e:	6c c0       	rjmp	.+216    	; 0x11e8 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLR_BIT(PORTB,a_pin_num);/* clearing the Required pin on Port Register to Output a low logic 0 */
    1110:	a8 e3       	ldi	r26, 0x38	; 56
    1112:	b0 e0       	ldi	r27, 0x00	; 0
    1114:	e8 e3       	ldi	r30, 0x38	; 56
    1116:	f0 e0       	ldi	r31, 0x00	; 0
    1118:	80 81       	ld	r24, Z
    111a:	48 2f       	mov	r20, r24
    111c:	8a 81       	ldd	r24, Y+2	; 0x02
    111e:	28 2f       	mov	r18, r24
    1120:	30 e0       	ldi	r19, 0x00	; 0
    1122:	81 e0       	ldi	r24, 0x01	; 1
    1124:	90 e0       	ldi	r25, 0x00	; 0
    1126:	02 2e       	mov	r0, r18
    1128:	02 c0       	rjmp	.+4      	; 0x112e <GPIO_writePin+0x10c>
    112a:	88 0f       	add	r24, r24
    112c:	99 1f       	adc	r25, r25
    112e:	0a 94       	dec	r0
    1130:	e2 f7       	brpl	.-8      	; 0x112a <GPIO_writePin+0x108>
    1132:	80 95       	com	r24
    1134:	84 23       	and	r24, r20
    1136:	8c 93       	st	X, r24
    1138:	57 c0       	rjmp	.+174    	; 0x11e8 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(a_level == LOGIC_HIGH)
    113a:	8b 81       	ldd	r24, Y+3	; 0x03
    113c:	81 30       	cpi	r24, 0x01	; 1
    113e:	a1 f4       	brne	.+40     	; 0x1168 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,a_pin_num);/* Setting the Required pin on Port Register to Output a High logic 1 */
    1140:	a5 e3       	ldi	r26, 0x35	; 53
    1142:	b0 e0       	ldi	r27, 0x00	; 0
    1144:	e5 e3       	ldi	r30, 0x35	; 53
    1146:	f0 e0       	ldi	r31, 0x00	; 0
    1148:	80 81       	ld	r24, Z
    114a:	48 2f       	mov	r20, r24
    114c:	8a 81       	ldd	r24, Y+2	; 0x02
    114e:	28 2f       	mov	r18, r24
    1150:	30 e0       	ldi	r19, 0x00	; 0
    1152:	81 e0       	ldi	r24, 0x01	; 1
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	02 2e       	mov	r0, r18
    1158:	02 c0       	rjmp	.+4      	; 0x115e <GPIO_writePin+0x13c>
    115a:	88 0f       	add	r24, r24
    115c:	99 1f       	adc	r25, r25
    115e:	0a 94       	dec	r0
    1160:	e2 f7       	brpl	.-8      	; 0x115a <GPIO_writePin+0x138>
    1162:	84 2b       	or	r24, r20
    1164:	8c 93       	st	X, r24
    1166:	40 c0       	rjmp	.+128    	; 0x11e8 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLR_BIT(PORTC,a_pin_num);/* clearing the Required pin on Port Register to Output a low logic 0 */
    1168:	a5 e3       	ldi	r26, 0x35	; 53
    116a:	b0 e0       	ldi	r27, 0x00	; 0
    116c:	e5 e3       	ldi	r30, 0x35	; 53
    116e:	f0 e0       	ldi	r31, 0x00	; 0
    1170:	80 81       	ld	r24, Z
    1172:	48 2f       	mov	r20, r24
    1174:	8a 81       	ldd	r24, Y+2	; 0x02
    1176:	28 2f       	mov	r18, r24
    1178:	30 e0       	ldi	r19, 0x00	; 0
    117a:	81 e0       	ldi	r24, 0x01	; 1
    117c:	90 e0       	ldi	r25, 0x00	; 0
    117e:	02 2e       	mov	r0, r18
    1180:	02 c0       	rjmp	.+4      	; 0x1186 <GPIO_writePin+0x164>
    1182:	88 0f       	add	r24, r24
    1184:	99 1f       	adc	r25, r25
    1186:	0a 94       	dec	r0
    1188:	e2 f7       	brpl	.-8      	; 0x1182 <GPIO_writePin+0x160>
    118a:	80 95       	com	r24
    118c:	84 23       	and	r24, r20
    118e:	8c 93       	st	X, r24
    1190:	2b c0       	rjmp	.+86     	; 0x11e8 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(a_level == LOGIC_HIGH)
    1192:	8b 81       	ldd	r24, Y+3	; 0x03
    1194:	81 30       	cpi	r24, 0x01	; 1
    1196:	a1 f4       	brne	.+40     	; 0x11c0 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,a_pin_num);/* Setting the Required pin on Port Register to Output a High logic 1 */
    1198:	a2 e3       	ldi	r26, 0x32	; 50
    119a:	b0 e0       	ldi	r27, 0x00	; 0
    119c:	e2 e3       	ldi	r30, 0x32	; 50
    119e:	f0 e0       	ldi	r31, 0x00	; 0
    11a0:	80 81       	ld	r24, Z
    11a2:	48 2f       	mov	r20, r24
    11a4:	8a 81       	ldd	r24, Y+2	; 0x02
    11a6:	28 2f       	mov	r18, r24
    11a8:	30 e0       	ldi	r19, 0x00	; 0
    11aa:	81 e0       	ldi	r24, 0x01	; 1
    11ac:	90 e0       	ldi	r25, 0x00	; 0
    11ae:	02 2e       	mov	r0, r18
    11b0:	02 c0       	rjmp	.+4      	; 0x11b6 <GPIO_writePin+0x194>
    11b2:	88 0f       	add	r24, r24
    11b4:	99 1f       	adc	r25, r25
    11b6:	0a 94       	dec	r0
    11b8:	e2 f7       	brpl	.-8      	; 0x11b2 <GPIO_writePin+0x190>
    11ba:	84 2b       	or	r24, r20
    11bc:	8c 93       	st	X, r24
    11be:	14 c0       	rjmp	.+40     	; 0x11e8 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLR_BIT(PORTD,a_pin_num);/* clearing the Required pin on Port Register to Output a low logic 0 */
    11c0:	a2 e3       	ldi	r26, 0x32	; 50
    11c2:	b0 e0       	ldi	r27, 0x00	; 0
    11c4:	e2 e3       	ldi	r30, 0x32	; 50
    11c6:	f0 e0       	ldi	r31, 0x00	; 0
    11c8:	80 81       	ld	r24, Z
    11ca:	48 2f       	mov	r20, r24
    11cc:	8a 81       	ldd	r24, Y+2	; 0x02
    11ce:	28 2f       	mov	r18, r24
    11d0:	30 e0       	ldi	r19, 0x00	; 0
    11d2:	81 e0       	ldi	r24, 0x01	; 1
    11d4:	90 e0       	ldi	r25, 0x00	; 0
    11d6:	02 2e       	mov	r0, r18
    11d8:	02 c0       	rjmp	.+4      	; 0x11de <GPIO_writePin+0x1bc>
    11da:	88 0f       	add	r24, r24
    11dc:	99 1f       	adc	r25, r25
    11de:	0a 94       	dec	r0
    11e0:	e2 f7       	brpl	.-8      	; 0x11da <GPIO_writePin+0x1b8>
    11e2:	80 95       	com	r24
    11e4:	84 23       	and	r24, r20
    11e6:	8c 93       	st	X, r24
		default:
			/*Wrong Port Error*/
		    break;
	  }
}
}
    11e8:	0f 90       	pop	r0
    11ea:	0f 90       	pop	r0
    11ec:	0f 90       	pop	r0
    11ee:	0f 90       	pop	r0
    11f0:	0f 90       	pop	r0
    11f2:	cf 91       	pop	r28
    11f4:	df 91       	pop	r29
    11f6:	08 95       	ret

000011f8 <GPIO_readPin>:

uint8 GPIO_readPin(const GPIO_Port a_port_num, const GPIO_Pin a_pin_num)
{
    11f8:	df 93       	push	r29
    11fa:	cf 93       	push	r28
    11fc:	00 d0       	rcall	.+0      	; 0x11fe <GPIO_readPin+0x6>
    11fe:	00 d0       	rcall	.+0      	; 0x1200 <GPIO_readPin+0x8>
    1200:	0f 92       	push	r0
    1202:	cd b7       	in	r28, 0x3d	; 61
    1204:	de b7       	in	r29, 0x3e	; 62
    1206:	89 83       	std	Y+1, r24	; 0x01
    1208:	6a 83       	std	Y+2, r22	; 0x02

	if(a_port_num >= NUM_OF_PORTS || a_pin_num >= NUM_OF_PINS_PER_PORT)
    120a:	89 81       	ldd	r24, Y+1	; 0x01
    120c:	84 30       	cpi	r24, 0x04	; 4
    120e:	08 f0       	brcs	.+2      	; 0x1212 <GPIO_readPin+0x1a>
    1210:	70 c0       	rjmp	.+224    	; 0x12f2 <GPIO_readPin+0xfa>
    1212:	8a 81       	ldd	r24, Y+2	; 0x02
    1214:	88 30       	cpi	r24, 0x08	; 8
    1216:	08 f0       	brcs	.+2      	; 0x121a <GPIO_readPin+0x22>
    1218:	6c c0       	rjmp	.+216    	; 0x12f2 <GPIO_readPin+0xfa>
	{
		/* Wrong Input*/
	}
	else
	{
		  switch(a_port_num)
    121a:	89 81       	ldd	r24, Y+1	; 0x01
    121c:	28 2f       	mov	r18, r24
    121e:	30 e0       	ldi	r19, 0x00	; 0
    1220:	3d 83       	std	Y+5, r19	; 0x05
    1222:	2c 83       	std	Y+4, r18	; 0x04
    1224:	4c 81       	ldd	r20, Y+4	; 0x04
    1226:	5d 81       	ldd	r21, Y+5	; 0x05
    1228:	41 30       	cpi	r20, 0x01	; 1
    122a:	51 05       	cpc	r21, r1
    122c:	49 f1       	breq	.+82     	; 0x1280 <GPIO_readPin+0x88>
    122e:	8c 81       	ldd	r24, Y+4	; 0x04
    1230:	9d 81       	ldd	r25, Y+5	; 0x05
    1232:	82 30       	cpi	r24, 0x02	; 2
    1234:	91 05       	cpc	r25, r1
    1236:	34 f4       	brge	.+12     	; 0x1244 <GPIO_readPin+0x4c>
    1238:	2c 81       	ldd	r18, Y+4	; 0x04
    123a:	3d 81       	ldd	r19, Y+5	; 0x05
    123c:	21 15       	cp	r18, r1
    123e:	31 05       	cpc	r19, r1
    1240:	61 f0       	breq	.+24     	; 0x125a <GPIO_readPin+0x62>
    1242:	57 c0       	rjmp	.+174    	; 0x12f2 <GPIO_readPin+0xfa>
    1244:	4c 81       	ldd	r20, Y+4	; 0x04
    1246:	5d 81       	ldd	r21, Y+5	; 0x05
    1248:	42 30       	cpi	r20, 0x02	; 2
    124a:	51 05       	cpc	r21, r1
    124c:	61 f1       	breq	.+88     	; 0x12a6 <GPIO_readPin+0xae>
    124e:	8c 81       	ldd	r24, Y+4	; 0x04
    1250:	9d 81       	ldd	r25, Y+5	; 0x05
    1252:	83 30       	cpi	r24, 0x03	; 3
    1254:	91 05       	cpc	r25, r1
    1256:	d1 f1       	breq	.+116    	; 0x12cc <GPIO_readPin+0xd4>
    1258:	4c c0       	rjmp	.+152    	; 0x12f2 <GPIO_readPin+0xfa>
	  {
		case PORTA_ID:
			return GET_BIT(PINA,a_pin_num);
    125a:	e9 e3       	ldi	r30, 0x39	; 57
    125c:	f0 e0       	ldi	r31, 0x00	; 0
    125e:	80 81       	ld	r24, Z
    1260:	28 2f       	mov	r18, r24
    1262:	30 e0       	ldi	r19, 0x00	; 0
    1264:	8a 81       	ldd	r24, Y+2	; 0x02
    1266:	88 2f       	mov	r24, r24
    1268:	90 e0       	ldi	r25, 0x00	; 0
    126a:	a9 01       	movw	r20, r18
    126c:	02 c0       	rjmp	.+4      	; 0x1272 <GPIO_readPin+0x7a>
    126e:	55 95       	asr	r21
    1270:	47 95       	ror	r20
    1272:	8a 95       	dec	r24
    1274:	e2 f7       	brpl	.-8      	; 0x126e <GPIO_readPin+0x76>
    1276:	ca 01       	movw	r24, r20
    1278:	58 2f       	mov	r21, r24
    127a:	51 70       	andi	r21, 0x01	; 1
    127c:	5b 83       	std	Y+3, r21	; 0x03
    127e:	3a c0       	rjmp	.+116    	; 0x12f4 <GPIO_readPin+0xfc>
		case PORTB_ID:
			return GET_BIT(PINB,a_pin_num);
    1280:	e6 e3       	ldi	r30, 0x36	; 54
    1282:	f0 e0       	ldi	r31, 0x00	; 0
    1284:	80 81       	ld	r24, Z
    1286:	28 2f       	mov	r18, r24
    1288:	30 e0       	ldi	r19, 0x00	; 0
    128a:	8a 81       	ldd	r24, Y+2	; 0x02
    128c:	88 2f       	mov	r24, r24
    128e:	90 e0       	ldi	r25, 0x00	; 0
    1290:	a9 01       	movw	r20, r18
    1292:	02 c0       	rjmp	.+4      	; 0x1298 <GPIO_readPin+0xa0>
    1294:	55 95       	asr	r21
    1296:	47 95       	ror	r20
    1298:	8a 95       	dec	r24
    129a:	e2 f7       	brpl	.-8      	; 0x1294 <GPIO_readPin+0x9c>
    129c:	ca 01       	movw	r24, r20
    129e:	58 2f       	mov	r21, r24
    12a0:	51 70       	andi	r21, 0x01	; 1
    12a2:	5b 83       	std	Y+3, r21	; 0x03
    12a4:	27 c0       	rjmp	.+78     	; 0x12f4 <GPIO_readPin+0xfc>
		case PORTC_ID:
			return GET_BIT(PINC,a_pin_num);
    12a6:	e3 e3       	ldi	r30, 0x33	; 51
    12a8:	f0 e0       	ldi	r31, 0x00	; 0
    12aa:	80 81       	ld	r24, Z
    12ac:	28 2f       	mov	r18, r24
    12ae:	30 e0       	ldi	r19, 0x00	; 0
    12b0:	8a 81       	ldd	r24, Y+2	; 0x02
    12b2:	88 2f       	mov	r24, r24
    12b4:	90 e0       	ldi	r25, 0x00	; 0
    12b6:	a9 01       	movw	r20, r18
    12b8:	02 c0       	rjmp	.+4      	; 0x12be <GPIO_readPin+0xc6>
    12ba:	55 95       	asr	r21
    12bc:	47 95       	ror	r20
    12be:	8a 95       	dec	r24
    12c0:	e2 f7       	brpl	.-8      	; 0x12ba <GPIO_readPin+0xc2>
    12c2:	ca 01       	movw	r24, r20
    12c4:	58 2f       	mov	r21, r24
    12c6:	51 70       	andi	r21, 0x01	; 1
    12c8:	5b 83       	std	Y+3, r21	; 0x03
    12ca:	14 c0       	rjmp	.+40     	; 0x12f4 <GPIO_readPin+0xfc>
		case PORTD_ID:
			return GET_BIT(PIND,a_pin_num);
    12cc:	e0 e3       	ldi	r30, 0x30	; 48
    12ce:	f0 e0       	ldi	r31, 0x00	; 0
    12d0:	80 81       	ld	r24, Z
    12d2:	28 2f       	mov	r18, r24
    12d4:	30 e0       	ldi	r19, 0x00	; 0
    12d6:	8a 81       	ldd	r24, Y+2	; 0x02
    12d8:	88 2f       	mov	r24, r24
    12da:	90 e0       	ldi	r25, 0x00	; 0
    12dc:	a9 01       	movw	r20, r18
    12de:	02 c0       	rjmp	.+4      	; 0x12e4 <GPIO_readPin+0xec>
    12e0:	55 95       	asr	r21
    12e2:	47 95       	ror	r20
    12e4:	8a 95       	dec	r24
    12e6:	e2 f7       	brpl	.-8      	; 0x12e0 <GPIO_readPin+0xe8>
    12e8:	ca 01       	movw	r24, r20
    12ea:	58 2f       	mov	r21, r24
    12ec:	51 70       	andi	r21, 0x01	; 1
    12ee:	5b 83       	std	Y+3, r21	; 0x03
    12f0:	01 c0       	rjmp	.+2      	; 0x12f4 <GPIO_readPin+0xfc>
		default:
			/*Wrong Port Error*/
		break;
	  }
	}
	return 0;
    12f2:	1b 82       	std	Y+3, r1	; 0x03
    12f4:	8b 81       	ldd	r24, Y+3	; 0x03
}
    12f6:	0f 90       	pop	r0
    12f8:	0f 90       	pop	r0
    12fa:	0f 90       	pop	r0
    12fc:	0f 90       	pop	r0
    12fe:	0f 90       	pop	r0
    1300:	cf 91       	pop	r28
    1302:	df 91       	pop	r29
    1304:	08 95       	ret

00001306 <GPIO_setupPortDirection>:

void GPIO_setupPortDirection(GPIO_Port a_port_num, uint8 a_direction)
{
    1306:	df 93       	push	r29
    1308:	cf 93       	push	r28
    130a:	00 d0       	rcall	.+0      	; 0x130c <GPIO_setupPortDirection+0x6>
    130c:	00 d0       	rcall	.+0      	; 0x130e <GPIO_setupPortDirection+0x8>
    130e:	cd b7       	in	r28, 0x3d	; 61
    1310:	de b7       	in	r29, 0x3e	; 62
    1312:	89 83       	std	Y+1, r24	; 0x01
    1314:	6a 83       	std	Y+2, r22	; 0x02
	if(a_port_num >= NUM_OF_PORTS)
    1316:	89 81       	ldd	r24, Y+1	; 0x01
    1318:	84 30       	cpi	r24, 0x04	; 4
    131a:	90 f5       	brcc	.+100    	; 0x1380 <GPIO_setupPortDirection+0x7a>
		{
			/* Wrong Input*/
		}
		else
		{
			  switch(a_port_num)
    131c:	89 81       	ldd	r24, Y+1	; 0x01
    131e:	28 2f       	mov	r18, r24
    1320:	30 e0       	ldi	r19, 0x00	; 0
    1322:	3c 83       	std	Y+4, r19	; 0x04
    1324:	2b 83       	std	Y+3, r18	; 0x03
    1326:	8b 81       	ldd	r24, Y+3	; 0x03
    1328:	9c 81       	ldd	r25, Y+4	; 0x04
    132a:	81 30       	cpi	r24, 0x01	; 1
    132c:	91 05       	cpc	r25, r1
    132e:	d1 f0       	breq	.+52     	; 0x1364 <GPIO_setupPortDirection+0x5e>
    1330:	2b 81       	ldd	r18, Y+3	; 0x03
    1332:	3c 81       	ldd	r19, Y+4	; 0x04
    1334:	22 30       	cpi	r18, 0x02	; 2
    1336:	31 05       	cpc	r19, r1
    1338:	2c f4       	brge	.+10     	; 0x1344 <GPIO_setupPortDirection+0x3e>
    133a:	8b 81       	ldd	r24, Y+3	; 0x03
    133c:	9c 81       	ldd	r25, Y+4	; 0x04
    133e:	00 97       	sbiw	r24, 0x00	; 0
    1340:	61 f0       	breq	.+24     	; 0x135a <GPIO_setupPortDirection+0x54>
    1342:	1e c0       	rjmp	.+60     	; 0x1380 <GPIO_setupPortDirection+0x7a>
    1344:	2b 81       	ldd	r18, Y+3	; 0x03
    1346:	3c 81       	ldd	r19, Y+4	; 0x04
    1348:	22 30       	cpi	r18, 0x02	; 2
    134a:	31 05       	cpc	r19, r1
    134c:	81 f0       	breq	.+32     	; 0x136e <GPIO_setupPortDirection+0x68>
    134e:	8b 81       	ldd	r24, Y+3	; 0x03
    1350:	9c 81       	ldd	r25, Y+4	; 0x04
    1352:	83 30       	cpi	r24, 0x03	; 3
    1354:	91 05       	cpc	r25, r1
    1356:	81 f0       	breq	.+32     	; 0x1378 <GPIO_setupPortDirection+0x72>
    1358:	13 c0       	rjmp	.+38     	; 0x1380 <GPIO_setupPortDirection+0x7a>
		  {
			case PORTA_ID:
				DDRA = a_direction;
    135a:	ea e3       	ldi	r30, 0x3A	; 58
    135c:	f0 e0       	ldi	r31, 0x00	; 0
    135e:	8a 81       	ldd	r24, Y+2	; 0x02
    1360:	80 83       	st	Z, r24
    1362:	0e c0       	rjmp	.+28     	; 0x1380 <GPIO_setupPortDirection+0x7a>
					break;
			case PORTB_ID:
				DDRB = a_direction;
    1364:	e7 e3       	ldi	r30, 0x37	; 55
    1366:	f0 e0       	ldi	r31, 0x00	; 0
    1368:	8a 81       	ldd	r24, Y+2	; 0x02
    136a:	80 83       	st	Z, r24
    136c:	09 c0       	rjmp	.+18     	; 0x1380 <GPIO_setupPortDirection+0x7a>
					break;
			case PORTC_ID:
				DDRC = a_direction;
    136e:	e4 e3       	ldi	r30, 0x34	; 52
    1370:	f0 e0       	ldi	r31, 0x00	; 0
    1372:	8a 81       	ldd	r24, Y+2	; 0x02
    1374:	80 83       	st	Z, r24
    1376:	04 c0       	rjmp	.+8      	; 0x1380 <GPIO_setupPortDirection+0x7a>
					break;
			case PORTD_ID:
				DDRD = a_direction;
    1378:	e1 e3       	ldi	r30, 0x31	; 49
    137a:	f0 e0       	ldi	r31, 0x00	; 0
    137c:	8a 81       	ldd	r24, Y+2	; 0x02
    137e:	80 83       	st	Z, r24
			default:
				/*Wrong Port Error*/
				break;
		  }
		  }
}
    1380:	0f 90       	pop	r0
    1382:	0f 90       	pop	r0
    1384:	0f 90       	pop	r0
    1386:	0f 90       	pop	r0
    1388:	cf 91       	pop	r28
    138a:	df 91       	pop	r29
    138c:	08 95       	ret

0000138e <GPIO_writePort>:

void GPIO_writePort(const GPIO_Port a_port_num,uint8 a_level)
{
    138e:	df 93       	push	r29
    1390:	cf 93       	push	r28
    1392:	00 d0       	rcall	.+0      	; 0x1394 <GPIO_writePort+0x6>
    1394:	00 d0       	rcall	.+0      	; 0x1396 <GPIO_writePort+0x8>
    1396:	cd b7       	in	r28, 0x3d	; 61
    1398:	de b7       	in	r29, 0x3e	; 62
    139a:	89 83       	std	Y+1, r24	; 0x01
    139c:	6a 83       	std	Y+2, r22	; 0x02
	if(a_port_num >= NUM_OF_PORTS)
    139e:	89 81       	ldd	r24, Y+1	; 0x01
    13a0:	84 30       	cpi	r24, 0x04	; 4
    13a2:	90 f5       	brcc	.+100    	; 0x1408 <GPIO_writePort+0x7a>
			{
				/* Wrong Input*/
			}
			else
			{
				  switch(a_port_num)
    13a4:	89 81       	ldd	r24, Y+1	; 0x01
    13a6:	28 2f       	mov	r18, r24
    13a8:	30 e0       	ldi	r19, 0x00	; 0
    13aa:	3c 83       	std	Y+4, r19	; 0x04
    13ac:	2b 83       	std	Y+3, r18	; 0x03
    13ae:	8b 81       	ldd	r24, Y+3	; 0x03
    13b0:	9c 81       	ldd	r25, Y+4	; 0x04
    13b2:	81 30       	cpi	r24, 0x01	; 1
    13b4:	91 05       	cpc	r25, r1
    13b6:	d1 f0       	breq	.+52     	; 0x13ec <GPIO_writePort+0x5e>
    13b8:	2b 81       	ldd	r18, Y+3	; 0x03
    13ba:	3c 81       	ldd	r19, Y+4	; 0x04
    13bc:	22 30       	cpi	r18, 0x02	; 2
    13be:	31 05       	cpc	r19, r1
    13c0:	2c f4       	brge	.+10     	; 0x13cc <GPIO_writePort+0x3e>
    13c2:	8b 81       	ldd	r24, Y+3	; 0x03
    13c4:	9c 81       	ldd	r25, Y+4	; 0x04
    13c6:	00 97       	sbiw	r24, 0x00	; 0
    13c8:	61 f0       	breq	.+24     	; 0x13e2 <GPIO_writePort+0x54>
    13ca:	1e c0       	rjmp	.+60     	; 0x1408 <GPIO_writePort+0x7a>
    13cc:	2b 81       	ldd	r18, Y+3	; 0x03
    13ce:	3c 81       	ldd	r19, Y+4	; 0x04
    13d0:	22 30       	cpi	r18, 0x02	; 2
    13d2:	31 05       	cpc	r19, r1
    13d4:	81 f0       	breq	.+32     	; 0x13f6 <GPIO_writePort+0x68>
    13d6:	8b 81       	ldd	r24, Y+3	; 0x03
    13d8:	9c 81       	ldd	r25, Y+4	; 0x04
    13da:	83 30       	cpi	r24, 0x03	; 3
    13dc:	91 05       	cpc	r25, r1
    13de:	81 f0       	breq	.+32     	; 0x1400 <GPIO_writePort+0x72>
    13e0:	13 c0       	rjmp	.+38     	; 0x1408 <GPIO_writePort+0x7a>
			  {
				case PORTA_ID:
					PORTA = a_level;
    13e2:	eb e3       	ldi	r30, 0x3B	; 59
    13e4:	f0 e0       	ldi	r31, 0x00	; 0
    13e6:	8a 81       	ldd	r24, Y+2	; 0x02
    13e8:	80 83       	st	Z, r24
    13ea:	0e c0       	rjmp	.+28     	; 0x1408 <GPIO_writePort+0x7a>
						break;
				case PORTB_ID:
					PORTB = a_level;
    13ec:	e8 e3       	ldi	r30, 0x38	; 56
    13ee:	f0 e0       	ldi	r31, 0x00	; 0
    13f0:	8a 81       	ldd	r24, Y+2	; 0x02
    13f2:	80 83       	st	Z, r24
    13f4:	09 c0       	rjmp	.+18     	; 0x1408 <GPIO_writePort+0x7a>
						break;
				case PORTC_ID:
					PORTC = a_level;
    13f6:	e5 e3       	ldi	r30, 0x35	; 53
    13f8:	f0 e0       	ldi	r31, 0x00	; 0
    13fa:	8a 81       	ldd	r24, Y+2	; 0x02
    13fc:	80 83       	st	Z, r24
    13fe:	04 c0       	rjmp	.+8      	; 0x1408 <GPIO_writePort+0x7a>
						break;
				case PORTD_ID:
					PORTD = a_level;
    1400:	e2 e3       	ldi	r30, 0x32	; 50
    1402:	f0 e0       	ldi	r31, 0x00	; 0
    1404:	8a 81       	ldd	r24, Y+2	; 0x02
    1406:	80 83       	st	Z, r24
					break;
			  }


			  }
}
    1408:	0f 90       	pop	r0
    140a:	0f 90       	pop	r0
    140c:	0f 90       	pop	r0
    140e:	0f 90       	pop	r0
    1410:	cf 91       	pop	r28
    1412:	df 91       	pop	r29
    1414:	08 95       	ret

00001416 <GPIO_readPort>:

uint8 GPIO_readPort(GPIO_Port a_port_num)
{
    1416:	df 93       	push	r29
    1418:	cf 93       	push	r28
    141a:	00 d0       	rcall	.+0      	; 0x141c <GPIO_readPort+0x6>
    141c:	00 d0       	rcall	.+0      	; 0x141e <GPIO_readPort+0x8>
    141e:	cd b7       	in	r28, 0x3d	; 61
    1420:	de b7       	in	r29, 0x3e	; 62
    1422:	89 83       	std	Y+1, r24	; 0x01
	if(a_port_num >= NUM_OF_PORTS)
    1424:	89 81       	ldd	r24, Y+1	; 0x01
    1426:	84 30       	cpi	r24, 0x04	; 4
    1428:	98 f5       	brcc	.+102    	; 0x1490 <GPIO_readPort+0x7a>
		{
			/* Wrong Input*/
		}
		else
		{
			  switch(a_port_num)
    142a:	89 81       	ldd	r24, Y+1	; 0x01
    142c:	28 2f       	mov	r18, r24
    142e:	30 e0       	ldi	r19, 0x00	; 0
    1430:	3c 83       	std	Y+4, r19	; 0x04
    1432:	2b 83       	std	Y+3, r18	; 0x03
    1434:	8b 81       	ldd	r24, Y+3	; 0x03
    1436:	9c 81       	ldd	r25, Y+4	; 0x04
    1438:	81 30       	cpi	r24, 0x01	; 1
    143a:	91 05       	cpc	r25, r1
    143c:	d1 f0       	breq	.+52     	; 0x1472 <GPIO_readPort+0x5c>
    143e:	2b 81       	ldd	r18, Y+3	; 0x03
    1440:	3c 81       	ldd	r19, Y+4	; 0x04
    1442:	22 30       	cpi	r18, 0x02	; 2
    1444:	31 05       	cpc	r19, r1
    1446:	2c f4       	brge	.+10     	; 0x1452 <GPIO_readPort+0x3c>
    1448:	8b 81       	ldd	r24, Y+3	; 0x03
    144a:	9c 81       	ldd	r25, Y+4	; 0x04
    144c:	00 97       	sbiw	r24, 0x00	; 0
    144e:	61 f0       	breq	.+24     	; 0x1468 <GPIO_readPort+0x52>
    1450:	1f c0       	rjmp	.+62     	; 0x1490 <GPIO_readPort+0x7a>
    1452:	2b 81       	ldd	r18, Y+3	; 0x03
    1454:	3c 81       	ldd	r19, Y+4	; 0x04
    1456:	22 30       	cpi	r18, 0x02	; 2
    1458:	31 05       	cpc	r19, r1
    145a:	81 f0       	breq	.+32     	; 0x147c <GPIO_readPort+0x66>
    145c:	8b 81       	ldd	r24, Y+3	; 0x03
    145e:	9c 81       	ldd	r25, Y+4	; 0x04
    1460:	83 30       	cpi	r24, 0x03	; 3
    1462:	91 05       	cpc	r25, r1
    1464:	81 f0       	breq	.+32     	; 0x1486 <GPIO_readPort+0x70>
    1466:	14 c0       	rjmp	.+40     	; 0x1490 <GPIO_readPort+0x7a>
			  {
			case PORTA_ID:
				return PINA;
    1468:	e9 e3       	ldi	r30, 0x39	; 57
    146a:	f0 e0       	ldi	r31, 0x00	; 0
    146c:	90 81       	ld	r25, Z
    146e:	9a 83       	std	Y+2, r25	; 0x02
    1470:	10 c0       	rjmp	.+32     	; 0x1492 <GPIO_readPort+0x7c>
			case PORTB_ID:
				return PINB;
    1472:	e6 e3       	ldi	r30, 0x36	; 54
    1474:	f0 e0       	ldi	r31, 0x00	; 0
    1476:	20 81       	ld	r18, Z
    1478:	2a 83       	std	Y+2, r18	; 0x02
    147a:	0b c0       	rjmp	.+22     	; 0x1492 <GPIO_readPort+0x7c>
			case PORTC_ID:
				return PINC;
    147c:	e3 e3       	ldi	r30, 0x33	; 51
    147e:	f0 e0       	ldi	r31, 0x00	; 0
    1480:	30 81       	ld	r19, Z
    1482:	3a 83       	std	Y+2, r19	; 0x02
    1484:	06 c0       	rjmp	.+12     	; 0x1492 <GPIO_readPort+0x7c>
			case PORTD_ID:
				return PIND;
    1486:	e0 e3       	ldi	r30, 0x30	; 48
    1488:	f0 e0       	ldi	r31, 0x00	; 0
    148a:	80 81       	ld	r24, Z
    148c:	8a 83       	std	Y+2, r24	; 0x02
    148e:	01 c0       	rjmp	.+2      	; 0x1492 <GPIO_readPort+0x7c>
			default:
				/*Wrong Port Error*/
				break;
			  }
		}
		return 0;
    1490:	1a 82       	std	Y+2, r1	; 0x02
    1492:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1494:	0f 90       	pop	r0
    1496:	0f 90       	pop	r0
    1498:	0f 90       	pop	r0
    149a:	0f 90       	pop	r0
    149c:	cf 91       	pop	r28
    149e:	df 91       	pop	r29
    14a0:	08 95       	ret

000014a2 <ICU_init>:
 * @param[in]  Config_Ptr Type ICU_ConfigType
 * @param[out] none
 * @return none
 */
void ICU_init(const ICU_ConfigType* Config_Ptr)
{
    14a2:	df 93       	push	r29
    14a4:	cf 93       	push	r28
    14a6:	00 d0       	rcall	.+0      	; 0x14a8 <ICU_init+0x6>
    14a8:	cd b7       	in	r28, 0x3d	; 61
    14aa:	de b7       	in	r29, 0x3e	; 62
    14ac:	9a 83       	std	Y+2, r25	; 0x02
    14ae:	89 83       	std	Y+1, r24	; 0x01
	/* Configure ICP1 as input */
	GPIO_setupPinDirection(PORTD_ID, PIN6_ID, PIN_INPUT);
    14b0:	83 e0       	ldi	r24, 0x03	; 3
    14b2:	66 e0       	ldi	r22, 0x06	; 6
    14b4:	40 e0       	ldi	r20, 0x00	; 0
    14b6:	0e 94 17 07 	call	0xe2e	; 0xe2e <GPIO_setupPinDirection>

	/* Timer 1 always operates in Normal Mode  */
	TCCR1A=0x0C;
    14ba:	ef e4       	ldi	r30, 0x4F	; 79
    14bc:	f0 e0       	ldi	r31, 0x00	; 0
    14be:	8c e0       	ldi	r24, 0x0C	; 12
    14c0:	80 83       	st	Z, r24

	/* Choose the required clock value in the first three bits (CS10, CS11 and CS12) */
	TCCR1B=(TCCR1B & 0xF8) | ((Config_Ptr->ICU_Clock) & 0x07);
    14c2:	ae e4       	ldi	r26, 0x4E	; 78
    14c4:	b0 e0       	ldi	r27, 0x00	; 0
    14c6:	ee e4       	ldi	r30, 0x4E	; 78
    14c8:	f0 e0       	ldi	r31, 0x00	; 0
    14ca:	80 81       	ld	r24, Z
    14cc:	98 2f       	mov	r25, r24
    14ce:	98 7f       	andi	r25, 0xF8	; 248
    14d0:	e9 81       	ldd	r30, Y+1	; 0x01
    14d2:	fa 81       	ldd	r31, Y+2	; 0x02
    14d4:	81 81       	ldd	r24, Z+1	; 0x01
    14d6:	87 70       	andi	r24, 0x07	; 7
    14d8:	89 2b       	or	r24, r25
    14da:	8c 93       	st	X, r24

	/* Choose the required Edge */
	TCCR1B = (TCCR1B & 0xBF) | ((Config_Ptr->ICU_Edge) << ICES1);
    14dc:	ae e4       	ldi	r26, 0x4E	; 78
    14de:	b0 e0       	ldi	r27, 0x00	; 0
    14e0:	ee e4       	ldi	r30, 0x4E	; 78
    14e2:	f0 e0       	ldi	r31, 0x00	; 0
    14e4:	80 81       	ld	r24, Z
    14e6:	28 2f       	mov	r18, r24
    14e8:	2f 7b       	andi	r18, 0xBF	; 191
    14ea:	e9 81       	ldd	r30, Y+1	; 0x01
    14ec:	fa 81       	ldd	r31, Y+2	; 0x02
    14ee:	80 81       	ld	r24, Z
    14f0:	88 2f       	mov	r24, r24
    14f2:	90 e0       	ldi	r25, 0x00	; 0
    14f4:	00 24       	eor	r0, r0
    14f6:	96 95       	lsr	r25
    14f8:	87 95       	ror	r24
    14fa:	07 94       	ror	r0
    14fc:	96 95       	lsr	r25
    14fe:	87 95       	ror	r24
    1500:	07 94       	ror	r0
    1502:	98 2f       	mov	r25, r24
    1504:	80 2d       	mov	r24, r0
    1506:	82 2b       	or	r24, r18
    1508:	8c 93       	st	X, r24

	/* Initial Value for Timer1 */
	TCNT1=0;
    150a:	ec e4       	ldi	r30, 0x4C	; 76
    150c:	f0 e0       	ldi	r31, 0x00	; 0
    150e:	11 82       	std	Z+1, r1	; 0x01
    1510:	10 82       	st	Z, r1

	/* Initial Value for Timer1 */
	ICR1=0;
    1512:	e6 e4       	ldi	r30, 0x46	; 70
    1514:	f0 e0       	ldi	r31, 0x00	; 0
    1516:	11 82       	std	Z+1, r1	; 0x01
    1518:	10 82       	st	Z, r1

	TIMSK |= (1<<TOCIE1);
    151a:	a9 e5       	ldi	r26, 0x59	; 89
    151c:	b0 e0       	ldi	r27, 0x00	; 0
    151e:	e9 e5       	ldi	r30, 0x59	; 89
    1520:	f0 e0       	ldi	r31, 0x00	; 0
    1522:	80 81       	ld	r24, Z
    1524:	80 62       	ori	r24, 0x20	; 32
    1526:	8c 93       	st	X, r24
}
    1528:	0f 90       	pop	r0
    152a:	0f 90       	pop	r0
    152c:	cf 91       	pop	r28
    152e:	df 91       	pop	r29
    1530:	08 95       	ret

00001532 <ICU_setCallBack>:

void ICU_setCallBack(void(*a_ptr)(void))
{
    1532:	df 93       	push	r29
    1534:	cf 93       	push	r28
    1536:	00 d0       	rcall	.+0      	; 0x1538 <ICU_setCallBack+0x6>
    1538:	cd b7       	in	r28, 0x3d	; 61
    153a:	de b7       	in	r29, 0x3e	; 62
    153c:	9a 83       	std	Y+2, r25	; 0x02
    153e:	89 83       	std	Y+1, r24	; 0x01
	ICU_PtrCallBack=a_ptr;
    1540:	89 81       	ldd	r24, Y+1	; 0x01
    1542:	9a 81       	ldd	r25, Y+2	; 0x02
    1544:	90 93 8d 01 	sts	0x018D, r25
    1548:	80 93 8c 01 	sts	0x018C, r24
}
    154c:	0f 90       	pop	r0
    154e:	0f 90       	pop	r0
    1550:	cf 91       	pop	r28
    1552:	df 91       	pop	r29
    1554:	08 95       	ret

00001556 <ICU_setEdgeDetectionType>:
 * @param[in]  edgeType Type ICU_EdgeType
 * @param[out] none
 * @return none
 */
void ICU_setEdgeDetectionType(const ICU_EdgeType edgeType)
{
    1556:	df 93       	push	r29
    1558:	cf 93       	push	r28
    155a:	0f 92       	push	r0
    155c:	cd b7       	in	r28, 0x3d	; 61
    155e:	de b7       	in	r29, 0x3e	; 62
    1560:	89 83       	std	Y+1, r24	; 0x01
	TCCR1B = (TCCR1B & 0xBF) | (edgeType << ICES1);
    1562:	ae e4       	ldi	r26, 0x4E	; 78
    1564:	b0 e0       	ldi	r27, 0x00	; 0
    1566:	ee e4       	ldi	r30, 0x4E	; 78
    1568:	f0 e0       	ldi	r31, 0x00	; 0
    156a:	80 81       	ld	r24, Z
    156c:	28 2f       	mov	r18, r24
    156e:	2f 7b       	andi	r18, 0xBF	; 191
    1570:	89 81       	ldd	r24, Y+1	; 0x01
    1572:	88 2f       	mov	r24, r24
    1574:	90 e0       	ldi	r25, 0x00	; 0
    1576:	00 24       	eor	r0, r0
    1578:	96 95       	lsr	r25
    157a:	87 95       	ror	r24
    157c:	07 94       	ror	r0
    157e:	96 95       	lsr	r25
    1580:	87 95       	ror	r24
    1582:	07 94       	ror	r0
    1584:	98 2f       	mov	r25, r24
    1586:	80 2d       	mov	r24, r0
    1588:	82 2b       	or	r24, r18
    158a:	8c 93       	st	X, r24
}
    158c:	0f 90       	pop	r0
    158e:	cf 91       	pop	r28
    1590:	df 91       	pop	r29
    1592:	08 95       	ret

00001594 <ICU_getInputCaptureValue>:
 * @param[in]  none
 * @param[out] none
 * @return none
 */
uint16 ICU_getInputCaptureValue(void)
{
    1594:	df 93       	push	r29
    1596:	cf 93       	push	r28
    1598:	cd b7       	in	r28, 0x3d	; 61
    159a:	de b7       	in	r29, 0x3e	; 62
return ICR1;
    159c:	e6 e4       	ldi	r30, 0x46	; 70
    159e:	f0 e0       	ldi	r31, 0x00	; 0
    15a0:	80 81       	ld	r24, Z
    15a2:	91 81       	ldd	r25, Z+1	; 0x01
}
    15a4:	cf 91       	pop	r28
    15a6:	df 91       	pop	r29
    15a8:	08 95       	ret

000015aa <ICU_clearTimerValue>:
 * @param[in]  none
 * @param[out] none
 * @return none
 */
void ICU_clearTimerValue(void)
{
    15aa:	df 93       	push	r29
    15ac:	cf 93       	push	r28
    15ae:	cd b7       	in	r28, 0x3d	; 61
    15b0:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0;
    15b2:	ec e4       	ldi	r30, 0x4C	; 76
    15b4:	f0 e0       	ldi	r31, 0x00	; 0
    15b6:	11 82       	std	Z+1, r1	; 0x01
    15b8:	10 82       	st	Z, r1
}
    15ba:	cf 91       	pop	r28
    15bc:	df 91       	pop	r29
    15be:	08 95       	ret

000015c0 <ICU_deInit>:
 * @param[in]  none
 * @param[out] none
 * @return none
 */
void ICU_deInit(void)
{
    15c0:	df 93       	push	r29
    15c2:	cf 93       	push	r28
    15c4:	cd b7       	in	r28, 0x3d	; 61
    15c6:	de b7       	in	r29, 0x3e	; 62
	/* Clear All Timer1 Registers */
	TCCR1A = 0;
    15c8:	ef e4       	ldi	r30, 0x4F	; 79
    15ca:	f0 e0       	ldi	r31, 0x00	; 0
    15cc:	10 82       	st	Z, r1
	TCCR1B = 0;
    15ce:	ee e4       	ldi	r30, 0x4E	; 78
    15d0:	f0 e0       	ldi	r31, 0x00	; 0
    15d2:	10 82       	st	Z, r1
	TCNT1  = 0;
    15d4:	ec e4       	ldi	r30, 0x4C	; 76
    15d6:	f0 e0       	ldi	r31, 0x00	; 0
    15d8:	11 82       	std	Z+1, r1	; 0x01
    15da:	10 82       	st	Z, r1
	ICR1   = 0;
    15dc:	e6 e4       	ldi	r30, 0x46	; 70
    15de:	f0 e0       	ldi	r31, 0x00	; 0
    15e0:	11 82       	std	Z+1, r1	; 0x01
    15e2:	10 82       	st	Z, r1

	/* Disable the Input Capture interrupt */
	TIMSK &= ~(1<<TOCIE1);
    15e4:	a9 e5       	ldi	r26, 0x59	; 89
    15e6:	b0 e0       	ldi	r27, 0x00	; 0
    15e8:	e9 e5       	ldi	r30, 0x59	; 89
    15ea:	f0 e0       	ldi	r31, 0x00	; 0
    15ec:	80 81       	ld	r24, Z
    15ee:	8f 7d       	andi	r24, 0xDF	; 223
    15f0:	8c 93       	st	X, r24

	/* Reset the Call Back Function */
	ICU_PtrCallBack = NULL_PTR;
    15f2:	10 92 8d 01 	sts	0x018D, r1
    15f6:	10 92 8c 01 	sts	0x018C, r1
}
    15fa:	cf 91       	pop	r28
    15fc:	df 91       	pop	r29
    15fe:	08 95       	ret

00001600 <__vector_6>:

void __vector_6(void) /* ICU ISR*/
{
    1600:	1f 92       	push	r1
    1602:	0f 92       	push	r0
    1604:	0f b6       	in	r0, 0x3f	; 63
    1606:	0f 92       	push	r0
    1608:	11 24       	eor	r1, r1
    160a:	2f 93       	push	r18
    160c:	3f 93       	push	r19
    160e:	4f 93       	push	r20
    1610:	5f 93       	push	r21
    1612:	6f 93       	push	r22
    1614:	7f 93       	push	r23
    1616:	8f 93       	push	r24
    1618:	9f 93       	push	r25
    161a:	af 93       	push	r26
    161c:	bf 93       	push	r27
    161e:	ef 93       	push	r30
    1620:	ff 93       	push	r31
    1622:	df 93       	push	r29
    1624:	cf 93       	push	r28
    1626:	cd b7       	in	r28, 0x3d	; 61
    1628:	de b7       	in	r29, 0x3e	; 62
	ICU_PtrCallBack();
    162a:	e0 91 8c 01 	lds	r30, 0x018C
    162e:	f0 91 8d 01 	lds	r31, 0x018D
    1632:	09 95       	icall
}
    1634:	cf 91       	pop	r28
    1636:	df 91       	pop	r29
    1638:	ff 91       	pop	r31
    163a:	ef 91       	pop	r30
    163c:	bf 91       	pop	r27
    163e:	af 91       	pop	r26
    1640:	9f 91       	pop	r25
    1642:	8f 91       	pop	r24
    1644:	7f 91       	pop	r23
    1646:	6f 91       	pop	r22
    1648:	5f 91       	pop	r21
    164a:	4f 91       	pop	r20
    164c:	3f 91       	pop	r19
    164e:	2f 91       	pop	r18
    1650:	0f 90       	pop	r0
    1652:	0f be       	out	0x3f, r0	; 63
    1654:	0f 90       	pop	r0
    1656:	1f 90       	pop	r1
    1658:	18 95       	reti

0000165a <LCD_init>:
 * @param[out] none
 * @return none
 */

void LCD_init(void)
{
    165a:	df 93       	push	r29
    165c:	cf 93       	push	r28
    165e:	cd b7       	in	r28, 0x3d	; 61
    1660:	de b7       	in	r29, 0x3e	; 62
    1662:	2e 97       	sbiw	r28, 0x0e	; 14
    1664:	0f b6       	in	r0, 0x3f	; 63
    1666:	f8 94       	cli
    1668:	de bf       	out	0x3e, r29	; 62
    166a:	0f be       	out	0x3f, r0	; 63
    166c:	cd bf       	out	0x3d, r28	; 61
/* Set The RS Pin As Output */
GPIO_setupPinDirection(LCD_RS_PORT_ID, LCD_RS_PIN_ID, PIN_OUTPUT);
    166e:	81 e0       	ldi	r24, 0x01	; 1
    1670:	60 e0       	ldi	r22, 0x00	; 0
    1672:	41 e0       	ldi	r20, 0x01	; 1
    1674:	0e 94 17 07 	call	0xe2e	; 0xe2e <GPIO_setupPinDirection>

/* Set The E Pin As Output */
GPIO_setupPinDirection(LCD_E_PORT_ID, LCD_E_PIN_ID, PIN_OUTPUT);
    1678:	81 e0       	ldi	r24, 0x01	; 1
    167a:	61 e0       	ldi	r22, 0x01	; 1
    167c:	41 e0       	ldi	r20, 0x01	; 1
    167e:	0e 94 17 07 	call	0xe2e	; 0xe2e <GPIO_setupPinDirection>
    1682:	80 e0       	ldi	r24, 0x00	; 0
    1684:	90 e0       	ldi	r25, 0x00	; 0
    1686:	a0 ea       	ldi	r26, 0xA0	; 160
    1688:	b1 e4       	ldi	r27, 0x41	; 65
    168a:	8b 87       	std	Y+11, r24	; 0x0b
    168c:	9c 87       	std	Y+12, r25	; 0x0c
    168e:	ad 87       	std	Y+13, r26	; 0x0d
    1690:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1692:	6b 85       	ldd	r22, Y+11	; 0x0b
    1694:	7c 85       	ldd	r23, Y+12	; 0x0c
    1696:	8d 85       	ldd	r24, Y+13	; 0x0d
    1698:	9e 85       	ldd	r25, Y+14	; 0x0e
    169a:	20 e0       	ldi	r18, 0x00	; 0
    169c:	30 e0       	ldi	r19, 0x00	; 0
    169e:	4a ef       	ldi	r20, 0xFA	; 250
    16a0:	54 e4       	ldi	r21, 0x44	; 68
    16a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16a6:	dc 01       	movw	r26, r24
    16a8:	cb 01       	movw	r24, r22
    16aa:	8f 83       	std	Y+7, r24	; 0x07
    16ac:	98 87       	std	Y+8, r25	; 0x08
    16ae:	a9 87       	std	Y+9, r26	; 0x09
    16b0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16b2:	6f 81       	ldd	r22, Y+7	; 0x07
    16b4:	78 85       	ldd	r23, Y+8	; 0x08
    16b6:	89 85       	ldd	r24, Y+9	; 0x09
    16b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    16ba:	20 e0       	ldi	r18, 0x00	; 0
    16bc:	30 e0       	ldi	r19, 0x00	; 0
    16be:	40 e8       	ldi	r20, 0x80	; 128
    16c0:	5f e3       	ldi	r21, 0x3F	; 63
    16c2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    16c6:	88 23       	and	r24, r24
    16c8:	2c f4       	brge	.+10     	; 0x16d4 <LCD_init+0x7a>
		__ticks = 1;
    16ca:	81 e0       	ldi	r24, 0x01	; 1
    16cc:	90 e0       	ldi	r25, 0x00	; 0
    16ce:	9e 83       	std	Y+6, r25	; 0x06
    16d0:	8d 83       	std	Y+5, r24	; 0x05
    16d2:	3f c0       	rjmp	.+126    	; 0x1752 <LCD_init+0xf8>
	else if (__tmp > 65535)
    16d4:	6f 81       	ldd	r22, Y+7	; 0x07
    16d6:	78 85       	ldd	r23, Y+8	; 0x08
    16d8:	89 85       	ldd	r24, Y+9	; 0x09
    16da:	9a 85       	ldd	r25, Y+10	; 0x0a
    16dc:	20 e0       	ldi	r18, 0x00	; 0
    16de:	3f ef       	ldi	r19, 0xFF	; 255
    16e0:	4f e7       	ldi	r20, 0x7F	; 127
    16e2:	57 e4       	ldi	r21, 0x47	; 71
    16e4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    16e8:	18 16       	cp	r1, r24
    16ea:	4c f5       	brge	.+82     	; 0x173e <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    16ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    16f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    16f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    16f4:	20 e0       	ldi	r18, 0x00	; 0
    16f6:	30 e0       	ldi	r19, 0x00	; 0
    16f8:	40 e2       	ldi	r20, 0x20	; 32
    16fa:	51 e4       	ldi	r21, 0x41	; 65
    16fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1700:	dc 01       	movw	r26, r24
    1702:	cb 01       	movw	r24, r22
    1704:	bc 01       	movw	r22, r24
    1706:	cd 01       	movw	r24, r26
    1708:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    170c:	dc 01       	movw	r26, r24
    170e:	cb 01       	movw	r24, r22
    1710:	9e 83       	std	Y+6, r25	; 0x06
    1712:	8d 83       	std	Y+5, r24	; 0x05
    1714:	0f c0       	rjmp	.+30     	; 0x1734 <LCD_init+0xda>
    1716:	88 ec       	ldi	r24, 0xC8	; 200
    1718:	90 e0       	ldi	r25, 0x00	; 0
    171a:	9c 83       	std	Y+4, r25	; 0x04
    171c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    171e:	8b 81       	ldd	r24, Y+3	; 0x03
    1720:	9c 81       	ldd	r25, Y+4	; 0x04
    1722:	01 97       	sbiw	r24, 0x01	; 1
    1724:	f1 f7       	brne	.-4      	; 0x1722 <LCD_init+0xc8>
    1726:	9c 83       	std	Y+4, r25	; 0x04
    1728:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    172a:	8d 81       	ldd	r24, Y+5	; 0x05
    172c:	9e 81       	ldd	r25, Y+6	; 0x06
    172e:	01 97       	sbiw	r24, 0x01	; 1
    1730:	9e 83       	std	Y+6, r25	; 0x06
    1732:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1734:	8d 81       	ldd	r24, Y+5	; 0x05
    1736:	9e 81       	ldd	r25, Y+6	; 0x06
    1738:	00 97       	sbiw	r24, 0x00	; 0
    173a:	69 f7       	brne	.-38     	; 0x1716 <LCD_init+0xbc>
    173c:	14 c0       	rjmp	.+40     	; 0x1766 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    173e:	6f 81       	ldd	r22, Y+7	; 0x07
    1740:	78 85       	ldd	r23, Y+8	; 0x08
    1742:	89 85       	ldd	r24, Y+9	; 0x09
    1744:	9a 85       	ldd	r25, Y+10	; 0x0a
    1746:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    174a:	dc 01       	movw	r26, r24
    174c:	cb 01       	movw	r24, r22
    174e:	9e 83       	std	Y+6, r25	; 0x06
    1750:	8d 83       	std	Y+5, r24	; 0x05
    1752:	8d 81       	ldd	r24, Y+5	; 0x05
    1754:	9e 81       	ldd	r25, Y+6	; 0x06
    1756:	9a 83       	std	Y+2, r25	; 0x02
    1758:	89 83       	std	Y+1, r24	; 0x01
    175a:	89 81       	ldd	r24, Y+1	; 0x01
    175c:	9a 81       	ldd	r25, Y+2	; 0x02
    175e:	01 97       	sbiw	r24, 0x01	; 1
    1760:	f1 f7       	brne	.-4      	; 0x175e <LCD_init+0x104>
    1762:	9a 83       	std	Y+2, r25	; 0x02
    1764:	89 83       	std	Y+1, r24	; 0x01
_delay_ms(20);    /* Delay 20 ms as LCD Need 15 ms to Startup */

#if (LCD_DATA_MODE==LCD_EIGHT_BIT_DATA_MODE)

/* Set The Data Port As Output */
GPIO_setupPortDirection(LCD_DATA_PORT_ID, PORT_OUTPUT);
    1766:	80 e0       	ldi	r24, 0x00	; 0
    1768:	6f ef       	ldi	r22, 0xFF	; 255
    176a:	0e 94 83 09 	call	0x1306	; 0x1306 <GPIO_setupPortDirection>

/* initialize the lCD by 8 bit data mode */
LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    176e:	88 e3       	ldi	r24, 0x38	; 56
    1770:	0e 94 c9 0b 	call	0x1792	; 0x1792 <LCD_sendCommand>
/* Use 2-lines LCD and 4 Bit Mode */
LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
#endif

/* Set cursor and clear the screen */
LCD_sendCommand(LCD_CURSOR_OFF);
    1774:	8c e0       	ldi	r24, 0x0C	; 12
    1776:	0e 94 c9 0b 	call	0x1792	; 0x1792 <LCD_sendCommand>
LCD_sendCommand(LCD_CLEAR_SCREEN);
    177a:	81 e0       	ldi	r24, 0x01	; 1
    177c:	0e 94 c9 0b 	call	0x1792	; 0x1792 <LCD_sendCommand>

}
    1780:	2e 96       	adiw	r28, 0x0e	; 14
    1782:	0f b6       	in	r0, 0x3f	; 63
    1784:	f8 94       	cli
    1786:	de bf       	out	0x3e, r29	; 62
    1788:	0f be       	out	0x3f, r0	; 63
    178a:	cd bf       	out	0x3d, r28	; 61
    178c:	cf 91       	pop	r28
    178e:	df 91       	pop	r29
    1790:	08 95       	ret

00001792 <LCD_sendCommand>:
 *
 * @param[in]  a_command     Type uint8     Range 0x00:0xFF
 * @return none
 */
void LCD_sendCommand(uint8 a_command)
{
    1792:	df 93       	push	r29
    1794:	cf 93       	push	r28
    1796:	cd b7       	in	r28, 0x3d	; 61
    1798:	de b7       	in	r29, 0x3e	; 62
    179a:	e9 97       	sbiw	r28, 0x39	; 57
    179c:	0f b6       	in	r0, 0x3f	; 63
    179e:	f8 94       	cli
    17a0:	de bf       	out	0x3e, r29	; 62
    17a2:	0f be       	out	0x3f, r0	; 63
    17a4:	cd bf       	out	0x3d, r28	; 61
    17a6:	89 af       	std	Y+57, r24	; 0x39
GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_LOW);
    17a8:	81 e0       	ldi	r24, 0x01	; 1
    17aa:	60 e0       	ldi	r22, 0x00	; 0
    17ac:	40 e0       	ldi	r20, 0x00	; 0
    17ae:	0e 94 11 08 	call	0x1022	; 0x1022 <GPIO_writePin>
    17b2:	80 e0       	ldi	r24, 0x00	; 0
    17b4:	90 e0       	ldi	r25, 0x00	; 0
    17b6:	a0 e8       	ldi	r26, 0x80	; 128
    17b8:	bf e3       	ldi	r27, 0x3F	; 63
    17ba:	8d ab       	std	Y+53, r24	; 0x35
    17bc:	9e ab       	std	Y+54, r25	; 0x36
    17be:	af ab       	std	Y+55, r26	; 0x37
    17c0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17c2:	6d a9       	ldd	r22, Y+53	; 0x35
    17c4:	7e a9       	ldd	r23, Y+54	; 0x36
    17c6:	8f a9       	ldd	r24, Y+55	; 0x37
    17c8:	98 ad       	ldd	r25, Y+56	; 0x38
    17ca:	20 e0       	ldi	r18, 0x00	; 0
    17cc:	30 e0       	ldi	r19, 0x00	; 0
    17ce:	4a ef       	ldi	r20, 0xFA	; 250
    17d0:	54 e4       	ldi	r21, 0x44	; 68
    17d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17d6:	dc 01       	movw	r26, r24
    17d8:	cb 01       	movw	r24, r22
    17da:	89 ab       	std	Y+49, r24	; 0x31
    17dc:	9a ab       	std	Y+50, r25	; 0x32
    17de:	ab ab       	std	Y+51, r26	; 0x33
    17e0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    17e2:	69 a9       	ldd	r22, Y+49	; 0x31
    17e4:	7a a9       	ldd	r23, Y+50	; 0x32
    17e6:	8b a9       	ldd	r24, Y+51	; 0x33
    17e8:	9c a9       	ldd	r25, Y+52	; 0x34
    17ea:	20 e0       	ldi	r18, 0x00	; 0
    17ec:	30 e0       	ldi	r19, 0x00	; 0
    17ee:	40 e8       	ldi	r20, 0x80	; 128
    17f0:	5f e3       	ldi	r21, 0x3F	; 63
    17f2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    17f6:	88 23       	and	r24, r24
    17f8:	2c f4       	brge	.+10     	; 0x1804 <LCD_sendCommand+0x72>
		__ticks = 1;
    17fa:	81 e0       	ldi	r24, 0x01	; 1
    17fc:	90 e0       	ldi	r25, 0x00	; 0
    17fe:	98 ab       	std	Y+48, r25	; 0x30
    1800:	8f a7       	std	Y+47, r24	; 0x2f
    1802:	3f c0       	rjmp	.+126    	; 0x1882 <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    1804:	69 a9       	ldd	r22, Y+49	; 0x31
    1806:	7a a9       	ldd	r23, Y+50	; 0x32
    1808:	8b a9       	ldd	r24, Y+51	; 0x33
    180a:	9c a9       	ldd	r25, Y+52	; 0x34
    180c:	20 e0       	ldi	r18, 0x00	; 0
    180e:	3f ef       	ldi	r19, 0xFF	; 255
    1810:	4f e7       	ldi	r20, 0x7F	; 127
    1812:	57 e4       	ldi	r21, 0x47	; 71
    1814:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1818:	18 16       	cp	r1, r24
    181a:	4c f5       	brge	.+82     	; 0x186e <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    181c:	6d a9       	ldd	r22, Y+53	; 0x35
    181e:	7e a9       	ldd	r23, Y+54	; 0x36
    1820:	8f a9       	ldd	r24, Y+55	; 0x37
    1822:	98 ad       	ldd	r25, Y+56	; 0x38
    1824:	20 e0       	ldi	r18, 0x00	; 0
    1826:	30 e0       	ldi	r19, 0x00	; 0
    1828:	40 e2       	ldi	r20, 0x20	; 32
    182a:	51 e4       	ldi	r21, 0x41	; 65
    182c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1830:	dc 01       	movw	r26, r24
    1832:	cb 01       	movw	r24, r22
    1834:	bc 01       	movw	r22, r24
    1836:	cd 01       	movw	r24, r26
    1838:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    183c:	dc 01       	movw	r26, r24
    183e:	cb 01       	movw	r24, r22
    1840:	98 ab       	std	Y+48, r25	; 0x30
    1842:	8f a7       	std	Y+47, r24	; 0x2f
    1844:	0f c0       	rjmp	.+30     	; 0x1864 <LCD_sendCommand+0xd2>
    1846:	88 ec       	ldi	r24, 0xC8	; 200
    1848:	90 e0       	ldi	r25, 0x00	; 0
    184a:	9e a7       	std	Y+46, r25	; 0x2e
    184c:	8d a7       	std	Y+45, r24	; 0x2d
    184e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1850:	9e a5       	ldd	r25, Y+46	; 0x2e
    1852:	01 97       	sbiw	r24, 0x01	; 1
    1854:	f1 f7       	brne	.-4      	; 0x1852 <LCD_sendCommand+0xc0>
    1856:	9e a7       	std	Y+46, r25	; 0x2e
    1858:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    185a:	8f a5       	ldd	r24, Y+47	; 0x2f
    185c:	98 a9       	ldd	r25, Y+48	; 0x30
    185e:	01 97       	sbiw	r24, 0x01	; 1
    1860:	98 ab       	std	Y+48, r25	; 0x30
    1862:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1864:	8f a5       	ldd	r24, Y+47	; 0x2f
    1866:	98 a9       	ldd	r25, Y+48	; 0x30
    1868:	00 97       	sbiw	r24, 0x00	; 0
    186a:	69 f7       	brne	.-38     	; 0x1846 <LCD_sendCommand+0xb4>
    186c:	14 c0       	rjmp	.+40     	; 0x1896 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    186e:	69 a9       	ldd	r22, Y+49	; 0x31
    1870:	7a a9       	ldd	r23, Y+50	; 0x32
    1872:	8b a9       	ldd	r24, Y+51	; 0x33
    1874:	9c a9       	ldd	r25, Y+52	; 0x34
    1876:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    187a:	dc 01       	movw	r26, r24
    187c:	cb 01       	movw	r24, r22
    187e:	98 ab       	std	Y+48, r25	; 0x30
    1880:	8f a7       	std	Y+47, r24	; 0x2f
    1882:	8f a5       	ldd	r24, Y+47	; 0x2f
    1884:	98 a9       	ldd	r25, Y+48	; 0x30
    1886:	9c a7       	std	Y+44, r25	; 0x2c
    1888:	8b a7       	std	Y+43, r24	; 0x2b
    188a:	8b a5       	ldd	r24, Y+43	; 0x2b
    188c:	9c a5       	ldd	r25, Y+44	; 0x2c
    188e:	01 97       	sbiw	r24, 0x01	; 1
    1890:	f1 f7       	brne	.-4      	; 0x188e <LCD_sendCommand+0xfc>
    1892:	9c a7       	std	Y+44, r25	; 0x2c
    1894:	8b a7       	std	Y+43, r24	; 0x2b
_delay_ms(1);  /* delay for processing Tas = 50ns */
GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);
    1896:	81 e0       	ldi	r24, 0x01	; 1
    1898:	61 e0       	ldi	r22, 0x01	; 1
    189a:	41 e0       	ldi	r20, 0x01	; 1
    189c:	0e 94 11 08 	call	0x1022	; 0x1022 <GPIO_writePin>
    18a0:	80 e0       	ldi	r24, 0x00	; 0
    18a2:	90 e0       	ldi	r25, 0x00	; 0
    18a4:	a0 e8       	ldi	r26, 0x80	; 128
    18a6:	bf e3       	ldi	r27, 0x3F	; 63
    18a8:	8f a3       	std	Y+39, r24	; 0x27
    18aa:	98 a7       	std	Y+40, r25	; 0x28
    18ac:	a9 a7       	std	Y+41, r26	; 0x29
    18ae:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18b0:	6f a1       	ldd	r22, Y+39	; 0x27
    18b2:	78 a5       	ldd	r23, Y+40	; 0x28
    18b4:	89 a5       	ldd	r24, Y+41	; 0x29
    18b6:	9a a5       	ldd	r25, Y+42	; 0x2a
    18b8:	20 e0       	ldi	r18, 0x00	; 0
    18ba:	30 e0       	ldi	r19, 0x00	; 0
    18bc:	4a ef       	ldi	r20, 0xFA	; 250
    18be:	54 e4       	ldi	r21, 0x44	; 68
    18c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18c4:	dc 01       	movw	r26, r24
    18c6:	cb 01       	movw	r24, r22
    18c8:	8b a3       	std	Y+35, r24	; 0x23
    18ca:	9c a3       	std	Y+36, r25	; 0x24
    18cc:	ad a3       	std	Y+37, r26	; 0x25
    18ce:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    18d0:	6b a1       	ldd	r22, Y+35	; 0x23
    18d2:	7c a1       	ldd	r23, Y+36	; 0x24
    18d4:	8d a1       	ldd	r24, Y+37	; 0x25
    18d6:	9e a1       	ldd	r25, Y+38	; 0x26
    18d8:	20 e0       	ldi	r18, 0x00	; 0
    18da:	30 e0       	ldi	r19, 0x00	; 0
    18dc:	40 e8       	ldi	r20, 0x80	; 128
    18de:	5f e3       	ldi	r21, 0x3F	; 63
    18e0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    18e4:	88 23       	and	r24, r24
    18e6:	2c f4       	brge	.+10     	; 0x18f2 <LCD_sendCommand+0x160>
		__ticks = 1;
    18e8:	81 e0       	ldi	r24, 0x01	; 1
    18ea:	90 e0       	ldi	r25, 0x00	; 0
    18ec:	9a a3       	std	Y+34, r25	; 0x22
    18ee:	89 a3       	std	Y+33, r24	; 0x21
    18f0:	3f c0       	rjmp	.+126    	; 0x1970 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    18f2:	6b a1       	ldd	r22, Y+35	; 0x23
    18f4:	7c a1       	ldd	r23, Y+36	; 0x24
    18f6:	8d a1       	ldd	r24, Y+37	; 0x25
    18f8:	9e a1       	ldd	r25, Y+38	; 0x26
    18fa:	20 e0       	ldi	r18, 0x00	; 0
    18fc:	3f ef       	ldi	r19, 0xFF	; 255
    18fe:	4f e7       	ldi	r20, 0x7F	; 127
    1900:	57 e4       	ldi	r21, 0x47	; 71
    1902:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1906:	18 16       	cp	r1, r24
    1908:	4c f5       	brge	.+82     	; 0x195c <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    190a:	6f a1       	ldd	r22, Y+39	; 0x27
    190c:	78 a5       	ldd	r23, Y+40	; 0x28
    190e:	89 a5       	ldd	r24, Y+41	; 0x29
    1910:	9a a5       	ldd	r25, Y+42	; 0x2a
    1912:	20 e0       	ldi	r18, 0x00	; 0
    1914:	30 e0       	ldi	r19, 0x00	; 0
    1916:	40 e2       	ldi	r20, 0x20	; 32
    1918:	51 e4       	ldi	r21, 0x41	; 65
    191a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    191e:	dc 01       	movw	r26, r24
    1920:	cb 01       	movw	r24, r22
    1922:	bc 01       	movw	r22, r24
    1924:	cd 01       	movw	r24, r26
    1926:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    192a:	dc 01       	movw	r26, r24
    192c:	cb 01       	movw	r24, r22
    192e:	9a a3       	std	Y+34, r25	; 0x22
    1930:	89 a3       	std	Y+33, r24	; 0x21
    1932:	0f c0       	rjmp	.+30     	; 0x1952 <LCD_sendCommand+0x1c0>
    1934:	88 ec       	ldi	r24, 0xC8	; 200
    1936:	90 e0       	ldi	r25, 0x00	; 0
    1938:	98 a3       	std	Y+32, r25	; 0x20
    193a:	8f 8f       	std	Y+31, r24	; 0x1f
    193c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    193e:	98 a1       	ldd	r25, Y+32	; 0x20
    1940:	01 97       	sbiw	r24, 0x01	; 1
    1942:	f1 f7       	brne	.-4      	; 0x1940 <LCD_sendCommand+0x1ae>
    1944:	98 a3       	std	Y+32, r25	; 0x20
    1946:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1948:	89 a1       	ldd	r24, Y+33	; 0x21
    194a:	9a a1       	ldd	r25, Y+34	; 0x22
    194c:	01 97       	sbiw	r24, 0x01	; 1
    194e:	9a a3       	std	Y+34, r25	; 0x22
    1950:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1952:	89 a1       	ldd	r24, Y+33	; 0x21
    1954:	9a a1       	ldd	r25, Y+34	; 0x22
    1956:	00 97       	sbiw	r24, 0x00	; 0
    1958:	69 f7       	brne	.-38     	; 0x1934 <LCD_sendCommand+0x1a2>
    195a:	14 c0       	rjmp	.+40     	; 0x1984 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    195c:	6b a1       	ldd	r22, Y+35	; 0x23
    195e:	7c a1       	ldd	r23, Y+36	; 0x24
    1960:	8d a1       	ldd	r24, Y+37	; 0x25
    1962:	9e a1       	ldd	r25, Y+38	; 0x26
    1964:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1968:	dc 01       	movw	r26, r24
    196a:	cb 01       	movw	r24, r22
    196c:	9a a3       	std	Y+34, r25	; 0x22
    196e:	89 a3       	std	Y+33, r24	; 0x21
    1970:	89 a1       	ldd	r24, Y+33	; 0x21
    1972:	9a a1       	ldd	r25, Y+34	; 0x22
    1974:	9e 8f       	std	Y+30, r25	; 0x1e
    1976:	8d 8f       	std	Y+29, r24	; 0x1d
    1978:	8d 8d       	ldd	r24, Y+29	; 0x1d
    197a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    197c:	01 97       	sbiw	r24, 0x01	; 1
    197e:	f1 f7       	brne	.-4      	; 0x197c <LCD_sendCommand+0x1ea>
    1980:	9e 8f       	std	Y+30, r25	; 0x1e
    1982:	8d 8f       	std	Y+29, r24	; 0x1d
_delay_ms(1);  /* delay for processing Tpw - Tdws = 190ns */
#if (LCD_DATA_MODE==LCD_EIGHT_BIT_DATA_MODE)
GPIO_writePort(LCD_DATA_PORT_ID, a_command);
    1984:	80 e0       	ldi	r24, 0x00	; 0
    1986:	69 ad       	ldd	r22, Y+57	; 0x39
    1988:	0e 94 c7 09 	call	0x138e	; 0x138e <GPIO_writePort>
    198c:	80 e0       	ldi	r24, 0x00	; 0
    198e:	90 e0       	ldi	r25, 0x00	; 0
    1990:	a0 e8       	ldi	r26, 0x80	; 128
    1992:	bf e3       	ldi	r27, 0x3F	; 63
    1994:	89 8f       	std	Y+25, r24	; 0x19
    1996:	9a 8f       	std	Y+26, r25	; 0x1a
    1998:	ab 8f       	std	Y+27, r26	; 0x1b
    199a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    199c:	69 8d       	ldd	r22, Y+25	; 0x19
    199e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19a0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19a2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19a4:	20 e0       	ldi	r18, 0x00	; 0
    19a6:	30 e0       	ldi	r19, 0x00	; 0
    19a8:	4a ef       	ldi	r20, 0xFA	; 250
    19aa:	54 e4       	ldi	r21, 0x44	; 68
    19ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19b0:	dc 01       	movw	r26, r24
    19b2:	cb 01       	movw	r24, r22
    19b4:	8d 8b       	std	Y+21, r24	; 0x15
    19b6:	9e 8b       	std	Y+22, r25	; 0x16
    19b8:	af 8b       	std	Y+23, r26	; 0x17
    19ba:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    19bc:	6d 89       	ldd	r22, Y+21	; 0x15
    19be:	7e 89       	ldd	r23, Y+22	; 0x16
    19c0:	8f 89       	ldd	r24, Y+23	; 0x17
    19c2:	98 8d       	ldd	r25, Y+24	; 0x18
    19c4:	20 e0       	ldi	r18, 0x00	; 0
    19c6:	30 e0       	ldi	r19, 0x00	; 0
    19c8:	40 e8       	ldi	r20, 0x80	; 128
    19ca:	5f e3       	ldi	r21, 0x3F	; 63
    19cc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    19d0:	88 23       	and	r24, r24
    19d2:	2c f4       	brge	.+10     	; 0x19de <LCD_sendCommand+0x24c>
		__ticks = 1;
    19d4:	81 e0       	ldi	r24, 0x01	; 1
    19d6:	90 e0       	ldi	r25, 0x00	; 0
    19d8:	9c 8b       	std	Y+20, r25	; 0x14
    19da:	8b 8b       	std	Y+19, r24	; 0x13
    19dc:	3f c0       	rjmp	.+126    	; 0x1a5c <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    19de:	6d 89       	ldd	r22, Y+21	; 0x15
    19e0:	7e 89       	ldd	r23, Y+22	; 0x16
    19e2:	8f 89       	ldd	r24, Y+23	; 0x17
    19e4:	98 8d       	ldd	r25, Y+24	; 0x18
    19e6:	20 e0       	ldi	r18, 0x00	; 0
    19e8:	3f ef       	ldi	r19, 0xFF	; 255
    19ea:	4f e7       	ldi	r20, 0x7F	; 127
    19ec:	57 e4       	ldi	r21, 0x47	; 71
    19ee:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    19f2:	18 16       	cp	r1, r24
    19f4:	4c f5       	brge	.+82     	; 0x1a48 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19f6:	69 8d       	ldd	r22, Y+25	; 0x19
    19f8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19fa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19fc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19fe:	20 e0       	ldi	r18, 0x00	; 0
    1a00:	30 e0       	ldi	r19, 0x00	; 0
    1a02:	40 e2       	ldi	r20, 0x20	; 32
    1a04:	51 e4       	ldi	r21, 0x41	; 65
    1a06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a0a:	dc 01       	movw	r26, r24
    1a0c:	cb 01       	movw	r24, r22
    1a0e:	bc 01       	movw	r22, r24
    1a10:	cd 01       	movw	r24, r26
    1a12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a16:	dc 01       	movw	r26, r24
    1a18:	cb 01       	movw	r24, r22
    1a1a:	9c 8b       	std	Y+20, r25	; 0x14
    1a1c:	8b 8b       	std	Y+19, r24	; 0x13
    1a1e:	0f c0       	rjmp	.+30     	; 0x1a3e <LCD_sendCommand+0x2ac>
    1a20:	88 ec       	ldi	r24, 0xC8	; 200
    1a22:	90 e0       	ldi	r25, 0x00	; 0
    1a24:	9a 8b       	std	Y+18, r25	; 0x12
    1a26:	89 8b       	std	Y+17, r24	; 0x11
    1a28:	89 89       	ldd	r24, Y+17	; 0x11
    1a2a:	9a 89       	ldd	r25, Y+18	; 0x12
    1a2c:	01 97       	sbiw	r24, 0x01	; 1
    1a2e:	f1 f7       	brne	.-4      	; 0x1a2c <LCD_sendCommand+0x29a>
    1a30:	9a 8b       	std	Y+18, r25	; 0x12
    1a32:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a34:	8b 89       	ldd	r24, Y+19	; 0x13
    1a36:	9c 89       	ldd	r25, Y+20	; 0x14
    1a38:	01 97       	sbiw	r24, 0x01	; 1
    1a3a:	9c 8b       	std	Y+20, r25	; 0x14
    1a3c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a3e:	8b 89       	ldd	r24, Y+19	; 0x13
    1a40:	9c 89       	ldd	r25, Y+20	; 0x14
    1a42:	00 97       	sbiw	r24, 0x00	; 0
    1a44:	69 f7       	brne	.-38     	; 0x1a20 <LCD_sendCommand+0x28e>
    1a46:	14 c0       	rjmp	.+40     	; 0x1a70 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a48:	6d 89       	ldd	r22, Y+21	; 0x15
    1a4a:	7e 89       	ldd	r23, Y+22	; 0x16
    1a4c:	8f 89       	ldd	r24, Y+23	; 0x17
    1a4e:	98 8d       	ldd	r25, Y+24	; 0x18
    1a50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a54:	dc 01       	movw	r26, r24
    1a56:	cb 01       	movw	r24, r22
    1a58:	9c 8b       	std	Y+20, r25	; 0x14
    1a5a:	8b 8b       	std	Y+19, r24	; 0x13
    1a5c:	8b 89       	ldd	r24, Y+19	; 0x13
    1a5e:	9c 89       	ldd	r25, Y+20	; 0x14
    1a60:	98 8b       	std	Y+16, r25	; 0x10
    1a62:	8f 87       	std	Y+15, r24	; 0x0f
    1a64:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a66:	98 89       	ldd	r25, Y+16	; 0x10
    1a68:	01 97       	sbiw	r24, 0x01	; 1
    1a6a:	f1 f7       	brne	.-4      	; 0x1a68 <LCD_sendCommand+0x2d6>
    1a6c:	98 8b       	std	Y+16, r25	; 0x10
    1a6e:	8f 87       	std	Y+15, r24	; 0x0f
_delay_ms(1); /* delay for processing Tdsw = 100ns */
GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
    1a70:	81 e0       	ldi	r24, 0x01	; 1
    1a72:	61 e0       	ldi	r22, 0x01	; 1
    1a74:	40 e0       	ldi	r20, 0x00	; 0
    1a76:	0e 94 11 08 	call	0x1022	; 0x1022 <GPIO_writePin>
    1a7a:	80 e0       	ldi	r24, 0x00	; 0
    1a7c:	90 e0       	ldi	r25, 0x00	; 0
    1a7e:	a0 e8       	ldi	r26, 0x80	; 128
    1a80:	bf e3       	ldi	r27, 0x3F	; 63
    1a82:	8b 87       	std	Y+11, r24	; 0x0b
    1a84:	9c 87       	std	Y+12, r25	; 0x0c
    1a86:	ad 87       	std	Y+13, r26	; 0x0d
    1a88:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a8a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a8c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a8e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a90:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a92:	20 e0       	ldi	r18, 0x00	; 0
    1a94:	30 e0       	ldi	r19, 0x00	; 0
    1a96:	4a ef       	ldi	r20, 0xFA	; 250
    1a98:	54 e4       	ldi	r21, 0x44	; 68
    1a9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a9e:	dc 01       	movw	r26, r24
    1aa0:	cb 01       	movw	r24, r22
    1aa2:	8f 83       	std	Y+7, r24	; 0x07
    1aa4:	98 87       	std	Y+8, r25	; 0x08
    1aa6:	a9 87       	std	Y+9, r26	; 0x09
    1aa8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1aaa:	6f 81       	ldd	r22, Y+7	; 0x07
    1aac:	78 85       	ldd	r23, Y+8	; 0x08
    1aae:	89 85       	ldd	r24, Y+9	; 0x09
    1ab0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ab2:	20 e0       	ldi	r18, 0x00	; 0
    1ab4:	30 e0       	ldi	r19, 0x00	; 0
    1ab6:	40 e8       	ldi	r20, 0x80	; 128
    1ab8:	5f e3       	ldi	r21, 0x3F	; 63
    1aba:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1abe:	88 23       	and	r24, r24
    1ac0:	2c f4       	brge	.+10     	; 0x1acc <LCD_sendCommand+0x33a>
		__ticks = 1;
    1ac2:	81 e0       	ldi	r24, 0x01	; 1
    1ac4:	90 e0       	ldi	r25, 0x00	; 0
    1ac6:	9e 83       	std	Y+6, r25	; 0x06
    1ac8:	8d 83       	std	Y+5, r24	; 0x05
    1aca:	3f c0       	rjmp	.+126    	; 0x1b4a <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    1acc:	6f 81       	ldd	r22, Y+7	; 0x07
    1ace:	78 85       	ldd	r23, Y+8	; 0x08
    1ad0:	89 85       	ldd	r24, Y+9	; 0x09
    1ad2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ad4:	20 e0       	ldi	r18, 0x00	; 0
    1ad6:	3f ef       	ldi	r19, 0xFF	; 255
    1ad8:	4f e7       	ldi	r20, 0x7F	; 127
    1ada:	57 e4       	ldi	r21, 0x47	; 71
    1adc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ae0:	18 16       	cp	r1, r24
    1ae2:	4c f5       	brge	.+82     	; 0x1b36 <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ae4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ae6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ae8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1aea:	9e 85       	ldd	r25, Y+14	; 0x0e
    1aec:	20 e0       	ldi	r18, 0x00	; 0
    1aee:	30 e0       	ldi	r19, 0x00	; 0
    1af0:	40 e2       	ldi	r20, 0x20	; 32
    1af2:	51 e4       	ldi	r21, 0x41	; 65
    1af4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1af8:	dc 01       	movw	r26, r24
    1afa:	cb 01       	movw	r24, r22
    1afc:	bc 01       	movw	r22, r24
    1afe:	cd 01       	movw	r24, r26
    1b00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b04:	dc 01       	movw	r26, r24
    1b06:	cb 01       	movw	r24, r22
    1b08:	9e 83       	std	Y+6, r25	; 0x06
    1b0a:	8d 83       	std	Y+5, r24	; 0x05
    1b0c:	0f c0       	rjmp	.+30     	; 0x1b2c <LCD_sendCommand+0x39a>
    1b0e:	88 ec       	ldi	r24, 0xC8	; 200
    1b10:	90 e0       	ldi	r25, 0x00	; 0
    1b12:	9c 83       	std	Y+4, r25	; 0x04
    1b14:	8b 83       	std	Y+3, r24	; 0x03
    1b16:	8b 81       	ldd	r24, Y+3	; 0x03
    1b18:	9c 81       	ldd	r25, Y+4	; 0x04
    1b1a:	01 97       	sbiw	r24, 0x01	; 1
    1b1c:	f1 f7       	brne	.-4      	; 0x1b1a <LCD_sendCommand+0x388>
    1b1e:	9c 83       	std	Y+4, r25	; 0x04
    1b20:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b22:	8d 81       	ldd	r24, Y+5	; 0x05
    1b24:	9e 81       	ldd	r25, Y+6	; 0x06
    1b26:	01 97       	sbiw	r24, 0x01	; 1
    1b28:	9e 83       	std	Y+6, r25	; 0x06
    1b2a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b2c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b2e:	9e 81       	ldd	r25, Y+6	; 0x06
    1b30:	00 97       	sbiw	r24, 0x00	; 0
    1b32:	69 f7       	brne	.-38     	; 0x1b0e <LCD_sendCommand+0x37c>
    1b34:	14 c0       	rjmp	.+40     	; 0x1b5e <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b36:	6f 81       	ldd	r22, Y+7	; 0x07
    1b38:	78 85       	ldd	r23, Y+8	; 0x08
    1b3a:	89 85       	ldd	r24, Y+9	; 0x09
    1b3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b42:	dc 01       	movw	r26, r24
    1b44:	cb 01       	movw	r24, r22
    1b46:	9e 83       	std	Y+6, r25	; 0x06
    1b48:	8d 83       	std	Y+5, r24	; 0x05
    1b4a:	8d 81       	ldd	r24, Y+5	; 0x05
    1b4c:	9e 81       	ldd	r25, Y+6	; 0x06
    1b4e:	9a 83       	std	Y+2, r25	; 0x02
    1b50:	89 83       	std	Y+1, r24	; 0x01
    1b52:	89 81       	ldd	r24, Y+1	; 0x01
    1b54:	9a 81       	ldd	r25, Y+2	; 0x02
    1b56:	01 97       	sbiw	r24, 0x01	; 1
    1b58:	f1 f7       	brne	.-4      	; 0x1b56 <LCD_sendCommand+0x3c4>
    1b5a:	9a 83       	std	Y+2, r25	; 0x02
    1b5c:	89 83       	std	Y+1, r24	; 0x01

_delay_ms(1); /* delay for processing Tdsw = 100ns */
GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1b5e:	e9 96       	adiw	r28, 0x39	; 57
    1b60:	0f b6       	in	r0, 0x3f	; 63
    1b62:	f8 94       	cli
    1b64:	de bf       	out	0x3e, r29	; 62
    1b66:	0f be       	out	0x3f, r0	; 63
    1b68:	cd bf       	out	0x3d, r28	; 61
    1b6a:	cf 91       	pop	r28
    1b6c:	df 91       	pop	r29
    1b6e:	08 95       	ret

00001b70 <LCD_displayCharacter>:
 * @param[in]  a_data     Type uint8     Range 0x00:0xFF
 * @return none
 */

void LCD_displayCharacter(uint8 a_data)
{
    1b70:	df 93       	push	r29
    1b72:	cf 93       	push	r28
    1b74:	cd b7       	in	r28, 0x3d	; 61
    1b76:	de b7       	in	r29, 0x3e	; 62
    1b78:	e9 97       	sbiw	r28, 0x39	; 57
    1b7a:	0f b6       	in	r0, 0x3f	; 63
    1b7c:	f8 94       	cli
    1b7e:	de bf       	out	0x3e, r29	; 62
    1b80:	0f be       	out	0x3f, r0	; 63
    1b82:	cd bf       	out	0x3d, r28	; 61
    1b84:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_HIGH);
    1b86:	81 e0       	ldi	r24, 0x01	; 1
    1b88:	60 e0       	ldi	r22, 0x00	; 0
    1b8a:	41 e0       	ldi	r20, 0x01	; 1
    1b8c:	0e 94 11 08 	call	0x1022	; 0x1022 <GPIO_writePin>
    1b90:	80 e0       	ldi	r24, 0x00	; 0
    1b92:	90 e0       	ldi	r25, 0x00	; 0
    1b94:	a0 e8       	ldi	r26, 0x80	; 128
    1b96:	bf e3       	ldi	r27, 0x3F	; 63
    1b98:	8d ab       	std	Y+53, r24	; 0x35
    1b9a:	9e ab       	std	Y+54, r25	; 0x36
    1b9c:	af ab       	std	Y+55, r26	; 0x37
    1b9e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ba0:	6d a9       	ldd	r22, Y+53	; 0x35
    1ba2:	7e a9       	ldd	r23, Y+54	; 0x36
    1ba4:	8f a9       	ldd	r24, Y+55	; 0x37
    1ba6:	98 ad       	ldd	r25, Y+56	; 0x38
    1ba8:	20 e0       	ldi	r18, 0x00	; 0
    1baa:	30 e0       	ldi	r19, 0x00	; 0
    1bac:	4a ef       	ldi	r20, 0xFA	; 250
    1bae:	54 e4       	ldi	r21, 0x44	; 68
    1bb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bb4:	dc 01       	movw	r26, r24
    1bb6:	cb 01       	movw	r24, r22
    1bb8:	89 ab       	std	Y+49, r24	; 0x31
    1bba:	9a ab       	std	Y+50, r25	; 0x32
    1bbc:	ab ab       	std	Y+51, r26	; 0x33
    1bbe:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1bc0:	69 a9       	ldd	r22, Y+49	; 0x31
    1bc2:	7a a9       	ldd	r23, Y+50	; 0x32
    1bc4:	8b a9       	ldd	r24, Y+51	; 0x33
    1bc6:	9c a9       	ldd	r25, Y+52	; 0x34
    1bc8:	20 e0       	ldi	r18, 0x00	; 0
    1bca:	30 e0       	ldi	r19, 0x00	; 0
    1bcc:	40 e8       	ldi	r20, 0x80	; 128
    1bce:	5f e3       	ldi	r21, 0x3F	; 63
    1bd0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1bd4:	88 23       	and	r24, r24
    1bd6:	2c f4       	brge	.+10     	; 0x1be2 <LCD_displayCharacter+0x72>
		__ticks = 1;
    1bd8:	81 e0       	ldi	r24, 0x01	; 1
    1bda:	90 e0       	ldi	r25, 0x00	; 0
    1bdc:	98 ab       	std	Y+48, r25	; 0x30
    1bde:	8f a7       	std	Y+47, r24	; 0x2f
    1be0:	3f c0       	rjmp	.+126    	; 0x1c60 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    1be2:	69 a9       	ldd	r22, Y+49	; 0x31
    1be4:	7a a9       	ldd	r23, Y+50	; 0x32
    1be6:	8b a9       	ldd	r24, Y+51	; 0x33
    1be8:	9c a9       	ldd	r25, Y+52	; 0x34
    1bea:	20 e0       	ldi	r18, 0x00	; 0
    1bec:	3f ef       	ldi	r19, 0xFF	; 255
    1bee:	4f e7       	ldi	r20, 0x7F	; 127
    1bf0:	57 e4       	ldi	r21, 0x47	; 71
    1bf2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1bf6:	18 16       	cp	r1, r24
    1bf8:	4c f5       	brge	.+82     	; 0x1c4c <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bfa:	6d a9       	ldd	r22, Y+53	; 0x35
    1bfc:	7e a9       	ldd	r23, Y+54	; 0x36
    1bfe:	8f a9       	ldd	r24, Y+55	; 0x37
    1c00:	98 ad       	ldd	r25, Y+56	; 0x38
    1c02:	20 e0       	ldi	r18, 0x00	; 0
    1c04:	30 e0       	ldi	r19, 0x00	; 0
    1c06:	40 e2       	ldi	r20, 0x20	; 32
    1c08:	51 e4       	ldi	r21, 0x41	; 65
    1c0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c0e:	dc 01       	movw	r26, r24
    1c10:	cb 01       	movw	r24, r22
    1c12:	bc 01       	movw	r22, r24
    1c14:	cd 01       	movw	r24, r26
    1c16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c1a:	dc 01       	movw	r26, r24
    1c1c:	cb 01       	movw	r24, r22
    1c1e:	98 ab       	std	Y+48, r25	; 0x30
    1c20:	8f a7       	std	Y+47, r24	; 0x2f
    1c22:	0f c0       	rjmp	.+30     	; 0x1c42 <LCD_displayCharacter+0xd2>
    1c24:	88 ec       	ldi	r24, 0xC8	; 200
    1c26:	90 e0       	ldi	r25, 0x00	; 0
    1c28:	9e a7       	std	Y+46, r25	; 0x2e
    1c2a:	8d a7       	std	Y+45, r24	; 0x2d
    1c2c:	8d a5       	ldd	r24, Y+45	; 0x2d
    1c2e:	9e a5       	ldd	r25, Y+46	; 0x2e
    1c30:	01 97       	sbiw	r24, 0x01	; 1
    1c32:	f1 f7       	brne	.-4      	; 0x1c30 <LCD_displayCharacter+0xc0>
    1c34:	9e a7       	std	Y+46, r25	; 0x2e
    1c36:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c38:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c3a:	98 a9       	ldd	r25, Y+48	; 0x30
    1c3c:	01 97       	sbiw	r24, 0x01	; 1
    1c3e:	98 ab       	std	Y+48, r25	; 0x30
    1c40:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c42:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c44:	98 a9       	ldd	r25, Y+48	; 0x30
    1c46:	00 97       	sbiw	r24, 0x00	; 0
    1c48:	69 f7       	brne	.-38     	; 0x1c24 <LCD_displayCharacter+0xb4>
    1c4a:	14 c0       	rjmp	.+40     	; 0x1c74 <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c4c:	69 a9       	ldd	r22, Y+49	; 0x31
    1c4e:	7a a9       	ldd	r23, Y+50	; 0x32
    1c50:	8b a9       	ldd	r24, Y+51	; 0x33
    1c52:	9c a9       	ldd	r25, Y+52	; 0x34
    1c54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c58:	dc 01       	movw	r26, r24
    1c5a:	cb 01       	movw	r24, r22
    1c5c:	98 ab       	std	Y+48, r25	; 0x30
    1c5e:	8f a7       	std	Y+47, r24	; 0x2f
    1c60:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c62:	98 a9       	ldd	r25, Y+48	; 0x30
    1c64:	9c a7       	std	Y+44, r25	; 0x2c
    1c66:	8b a7       	std	Y+43, r24	; 0x2b
    1c68:	8b a5       	ldd	r24, Y+43	; 0x2b
    1c6a:	9c a5       	ldd	r25, Y+44	; 0x2c
    1c6c:	01 97       	sbiw	r24, 0x01	; 1
    1c6e:	f1 f7       	brne	.-4      	; 0x1c6c <LCD_displayCharacter+0xfc>
    1c70:	9c a7       	std	Y+44, r25	; 0x2c
    1c72:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);
    1c74:	81 e0       	ldi	r24, 0x01	; 1
    1c76:	61 e0       	ldi	r22, 0x01	; 1
    1c78:	41 e0       	ldi	r20, 0x01	; 1
    1c7a:	0e 94 11 08 	call	0x1022	; 0x1022 <GPIO_writePin>
    1c7e:	80 e0       	ldi	r24, 0x00	; 0
    1c80:	90 e0       	ldi	r25, 0x00	; 0
    1c82:	a0 e8       	ldi	r26, 0x80	; 128
    1c84:	bf e3       	ldi	r27, 0x3F	; 63
    1c86:	8f a3       	std	Y+39, r24	; 0x27
    1c88:	98 a7       	std	Y+40, r25	; 0x28
    1c8a:	a9 a7       	std	Y+41, r26	; 0x29
    1c8c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c8e:	6f a1       	ldd	r22, Y+39	; 0x27
    1c90:	78 a5       	ldd	r23, Y+40	; 0x28
    1c92:	89 a5       	ldd	r24, Y+41	; 0x29
    1c94:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c96:	20 e0       	ldi	r18, 0x00	; 0
    1c98:	30 e0       	ldi	r19, 0x00	; 0
    1c9a:	4a ef       	ldi	r20, 0xFA	; 250
    1c9c:	54 e4       	ldi	r21, 0x44	; 68
    1c9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ca2:	dc 01       	movw	r26, r24
    1ca4:	cb 01       	movw	r24, r22
    1ca6:	8b a3       	std	Y+35, r24	; 0x23
    1ca8:	9c a3       	std	Y+36, r25	; 0x24
    1caa:	ad a3       	std	Y+37, r26	; 0x25
    1cac:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1cae:	6b a1       	ldd	r22, Y+35	; 0x23
    1cb0:	7c a1       	ldd	r23, Y+36	; 0x24
    1cb2:	8d a1       	ldd	r24, Y+37	; 0x25
    1cb4:	9e a1       	ldd	r25, Y+38	; 0x26
    1cb6:	20 e0       	ldi	r18, 0x00	; 0
    1cb8:	30 e0       	ldi	r19, 0x00	; 0
    1cba:	40 e8       	ldi	r20, 0x80	; 128
    1cbc:	5f e3       	ldi	r21, 0x3F	; 63
    1cbe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1cc2:	88 23       	and	r24, r24
    1cc4:	2c f4       	brge	.+10     	; 0x1cd0 <LCD_displayCharacter+0x160>
		__ticks = 1;
    1cc6:	81 e0       	ldi	r24, 0x01	; 1
    1cc8:	90 e0       	ldi	r25, 0x00	; 0
    1cca:	9a a3       	std	Y+34, r25	; 0x22
    1ccc:	89 a3       	std	Y+33, r24	; 0x21
    1cce:	3f c0       	rjmp	.+126    	; 0x1d4e <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    1cd0:	6b a1       	ldd	r22, Y+35	; 0x23
    1cd2:	7c a1       	ldd	r23, Y+36	; 0x24
    1cd4:	8d a1       	ldd	r24, Y+37	; 0x25
    1cd6:	9e a1       	ldd	r25, Y+38	; 0x26
    1cd8:	20 e0       	ldi	r18, 0x00	; 0
    1cda:	3f ef       	ldi	r19, 0xFF	; 255
    1cdc:	4f e7       	ldi	r20, 0x7F	; 127
    1cde:	57 e4       	ldi	r21, 0x47	; 71
    1ce0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ce4:	18 16       	cp	r1, r24
    1ce6:	4c f5       	brge	.+82     	; 0x1d3a <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ce8:	6f a1       	ldd	r22, Y+39	; 0x27
    1cea:	78 a5       	ldd	r23, Y+40	; 0x28
    1cec:	89 a5       	ldd	r24, Y+41	; 0x29
    1cee:	9a a5       	ldd	r25, Y+42	; 0x2a
    1cf0:	20 e0       	ldi	r18, 0x00	; 0
    1cf2:	30 e0       	ldi	r19, 0x00	; 0
    1cf4:	40 e2       	ldi	r20, 0x20	; 32
    1cf6:	51 e4       	ldi	r21, 0x41	; 65
    1cf8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cfc:	dc 01       	movw	r26, r24
    1cfe:	cb 01       	movw	r24, r22
    1d00:	bc 01       	movw	r22, r24
    1d02:	cd 01       	movw	r24, r26
    1d04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d08:	dc 01       	movw	r26, r24
    1d0a:	cb 01       	movw	r24, r22
    1d0c:	9a a3       	std	Y+34, r25	; 0x22
    1d0e:	89 a3       	std	Y+33, r24	; 0x21
    1d10:	0f c0       	rjmp	.+30     	; 0x1d30 <LCD_displayCharacter+0x1c0>
    1d12:	88 ec       	ldi	r24, 0xC8	; 200
    1d14:	90 e0       	ldi	r25, 0x00	; 0
    1d16:	98 a3       	std	Y+32, r25	; 0x20
    1d18:	8f 8f       	std	Y+31, r24	; 0x1f
    1d1a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1d1c:	98 a1       	ldd	r25, Y+32	; 0x20
    1d1e:	01 97       	sbiw	r24, 0x01	; 1
    1d20:	f1 f7       	brne	.-4      	; 0x1d1e <LCD_displayCharacter+0x1ae>
    1d22:	98 a3       	std	Y+32, r25	; 0x20
    1d24:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d26:	89 a1       	ldd	r24, Y+33	; 0x21
    1d28:	9a a1       	ldd	r25, Y+34	; 0x22
    1d2a:	01 97       	sbiw	r24, 0x01	; 1
    1d2c:	9a a3       	std	Y+34, r25	; 0x22
    1d2e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d30:	89 a1       	ldd	r24, Y+33	; 0x21
    1d32:	9a a1       	ldd	r25, Y+34	; 0x22
    1d34:	00 97       	sbiw	r24, 0x00	; 0
    1d36:	69 f7       	brne	.-38     	; 0x1d12 <LCD_displayCharacter+0x1a2>
    1d38:	14 c0       	rjmp	.+40     	; 0x1d62 <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d3a:	6b a1       	ldd	r22, Y+35	; 0x23
    1d3c:	7c a1       	ldd	r23, Y+36	; 0x24
    1d3e:	8d a1       	ldd	r24, Y+37	; 0x25
    1d40:	9e a1       	ldd	r25, Y+38	; 0x26
    1d42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d46:	dc 01       	movw	r26, r24
    1d48:	cb 01       	movw	r24, r22
    1d4a:	9a a3       	std	Y+34, r25	; 0x22
    1d4c:	89 a3       	std	Y+33, r24	; 0x21
    1d4e:	89 a1       	ldd	r24, Y+33	; 0x21
    1d50:	9a a1       	ldd	r25, Y+34	; 0x22
    1d52:	9e 8f       	std	Y+30, r25	; 0x1e
    1d54:	8d 8f       	std	Y+29, r24	; 0x1d
    1d56:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d58:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1d5a:	01 97       	sbiw	r24, 0x01	; 1
    1d5c:	f1 f7       	brne	.-4      	; 0x1d5a <LCD_displayCharacter+0x1ea>
    1d5e:	9e 8f       	std	Y+30, r25	; 0x1e
    1d60:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Th = 13ns */
#if (LCD_DATA_MODE==LCD_EIGHT_BIT_DATA_MODE)
	GPIO_writePort(LCD_DATA_PORT_ID, a_data);
    1d62:	80 e0       	ldi	r24, 0x00	; 0
    1d64:	69 ad       	ldd	r22, Y+57	; 0x39
    1d66:	0e 94 c7 09 	call	0x138e	; 0x138e <GPIO_writePort>
    1d6a:	80 e0       	ldi	r24, 0x00	; 0
    1d6c:	90 e0       	ldi	r25, 0x00	; 0
    1d6e:	a0 e8       	ldi	r26, 0x80	; 128
    1d70:	bf e3       	ldi	r27, 0x3F	; 63
    1d72:	89 8f       	std	Y+25, r24	; 0x19
    1d74:	9a 8f       	std	Y+26, r25	; 0x1a
    1d76:	ab 8f       	std	Y+27, r26	; 0x1b
    1d78:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d7a:	69 8d       	ldd	r22, Y+25	; 0x19
    1d7c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d7e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d80:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d82:	20 e0       	ldi	r18, 0x00	; 0
    1d84:	30 e0       	ldi	r19, 0x00	; 0
    1d86:	4a ef       	ldi	r20, 0xFA	; 250
    1d88:	54 e4       	ldi	r21, 0x44	; 68
    1d8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d8e:	dc 01       	movw	r26, r24
    1d90:	cb 01       	movw	r24, r22
    1d92:	8d 8b       	std	Y+21, r24	; 0x15
    1d94:	9e 8b       	std	Y+22, r25	; 0x16
    1d96:	af 8b       	std	Y+23, r26	; 0x17
    1d98:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1d9a:	6d 89       	ldd	r22, Y+21	; 0x15
    1d9c:	7e 89       	ldd	r23, Y+22	; 0x16
    1d9e:	8f 89       	ldd	r24, Y+23	; 0x17
    1da0:	98 8d       	ldd	r25, Y+24	; 0x18
    1da2:	20 e0       	ldi	r18, 0x00	; 0
    1da4:	30 e0       	ldi	r19, 0x00	; 0
    1da6:	40 e8       	ldi	r20, 0x80	; 128
    1da8:	5f e3       	ldi	r21, 0x3F	; 63
    1daa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1dae:	88 23       	and	r24, r24
    1db0:	2c f4       	brge	.+10     	; 0x1dbc <LCD_displayCharacter+0x24c>
		__ticks = 1;
    1db2:	81 e0       	ldi	r24, 0x01	; 1
    1db4:	90 e0       	ldi	r25, 0x00	; 0
    1db6:	9c 8b       	std	Y+20, r25	; 0x14
    1db8:	8b 8b       	std	Y+19, r24	; 0x13
    1dba:	3f c0       	rjmp	.+126    	; 0x1e3a <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    1dbc:	6d 89       	ldd	r22, Y+21	; 0x15
    1dbe:	7e 89       	ldd	r23, Y+22	; 0x16
    1dc0:	8f 89       	ldd	r24, Y+23	; 0x17
    1dc2:	98 8d       	ldd	r25, Y+24	; 0x18
    1dc4:	20 e0       	ldi	r18, 0x00	; 0
    1dc6:	3f ef       	ldi	r19, 0xFF	; 255
    1dc8:	4f e7       	ldi	r20, 0x7F	; 127
    1dca:	57 e4       	ldi	r21, 0x47	; 71
    1dcc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1dd0:	18 16       	cp	r1, r24
    1dd2:	4c f5       	brge	.+82     	; 0x1e26 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dd4:	69 8d       	ldd	r22, Y+25	; 0x19
    1dd6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1dd8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1dda:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ddc:	20 e0       	ldi	r18, 0x00	; 0
    1dde:	30 e0       	ldi	r19, 0x00	; 0
    1de0:	40 e2       	ldi	r20, 0x20	; 32
    1de2:	51 e4       	ldi	r21, 0x41	; 65
    1de4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1de8:	dc 01       	movw	r26, r24
    1dea:	cb 01       	movw	r24, r22
    1dec:	bc 01       	movw	r22, r24
    1dee:	cd 01       	movw	r24, r26
    1df0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1df4:	dc 01       	movw	r26, r24
    1df6:	cb 01       	movw	r24, r22
    1df8:	9c 8b       	std	Y+20, r25	; 0x14
    1dfa:	8b 8b       	std	Y+19, r24	; 0x13
    1dfc:	0f c0       	rjmp	.+30     	; 0x1e1c <LCD_displayCharacter+0x2ac>
    1dfe:	88 ec       	ldi	r24, 0xC8	; 200
    1e00:	90 e0       	ldi	r25, 0x00	; 0
    1e02:	9a 8b       	std	Y+18, r25	; 0x12
    1e04:	89 8b       	std	Y+17, r24	; 0x11
    1e06:	89 89       	ldd	r24, Y+17	; 0x11
    1e08:	9a 89       	ldd	r25, Y+18	; 0x12
    1e0a:	01 97       	sbiw	r24, 0x01	; 1
    1e0c:	f1 f7       	brne	.-4      	; 0x1e0a <LCD_displayCharacter+0x29a>
    1e0e:	9a 8b       	std	Y+18, r25	; 0x12
    1e10:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e12:	8b 89       	ldd	r24, Y+19	; 0x13
    1e14:	9c 89       	ldd	r25, Y+20	; 0x14
    1e16:	01 97       	sbiw	r24, 0x01	; 1
    1e18:	9c 8b       	std	Y+20, r25	; 0x14
    1e1a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e1c:	8b 89       	ldd	r24, Y+19	; 0x13
    1e1e:	9c 89       	ldd	r25, Y+20	; 0x14
    1e20:	00 97       	sbiw	r24, 0x00	; 0
    1e22:	69 f7       	brne	.-38     	; 0x1dfe <LCD_displayCharacter+0x28e>
    1e24:	14 c0       	rjmp	.+40     	; 0x1e4e <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e26:	6d 89       	ldd	r22, Y+21	; 0x15
    1e28:	7e 89       	ldd	r23, Y+22	; 0x16
    1e2a:	8f 89       	ldd	r24, Y+23	; 0x17
    1e2c:	98 8d       	ldd	r25, Y+24	; 0x18
    1e2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e32:	dc 01       	movw	r26, r24
    1e34:	cb 01       	movw	r24, r22
    1e36:	9c 8b       	std	Y+20, r25	; 0x14
    1e38:	8b 8b       	std	Y+19, r24	; 0x13
    1e3a:	8b 89       	ldd	r24, Y+19	; 0x13
    1e3c:	9c 89       	ldd	r25, Y+20	; 0x14
    1e3e:	98 8b       	std	Y+16, r25	; 0x10
    1e40:	8f 87       	std	Y+15, r24	; 0x0f
    1e42:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e44:	98 89       	ldd	r25, Y+16	; 0x10
    1e46:	01 97       	sbiw	r24, 0x01	; 1
    1e48:	f1 f7       	brne	.-4      	; 0x1e46 <LCD_displayCharacter+0x2d6>
    1e4a:	98 8b       	std	Y+16, r25	; 0x10
    1e4c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
    1e4e:	81 e0       	ldi	r24, 0x01	; 1
    1e50:	61 e0       	ldi	r22, 0x01	; 1
    1e52:	40 e0       	ldi	r20, 0x00	; 0
    1e54:	0e 94 11 08 	call	0x1022	; 0x1022 <GPIO_writePin>
    1e58:	80 e0       	ldi	r24, 0x00	; 0
    1e5a:	90 e0       	ldi	r25, 0x00	; 0
    1e5c:	a0 e8       	ldi	r26, 0x80	; 128
    1e5e:	bf e3       	ldi	r27, 0x3F	; 63
    1e60:	8b 87       	std	Y+11, r24	; 0x0b
    1e62:	9c 87       	std	Y+12, r25	; 0x0c
    1e64:	ad 87       	std	Y+13, r26	; 0x0d
    1e66:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e68:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e6a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e6c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e6e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e70:	20 e0       	ldi	r18, 0x00	; 0
    1e72:	30 e0       	ldi	r19, 0x00	; 0
    1e74:	4a ef       	ldi	r20, 0xFA	; 250
    1e76:	54 e4       	ldi	r21, 0x44	; 68
    1e78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e7c:	dc 01       	movw	r26, r24
    1e7e:	cb 01       	movw	r24, r22
    1e80:	8f 83       	std	Y+7, r24	; 0x07
    1e82:	98 87       	std	Y+8, r25	; 0x08
    1e84:	a9 87       	std	Y+9, r26	; 0x09
    1e86:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e88:	6f 81       	ldd	r22, Y+7	; 0x07
    1e8a:	78 85       	ldd	r23, Y+8	; 0x08
    1e8c:	89 85       	ldd	r24, Y+9	; 0x09
    1e8e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e90:	20 e0       	ldi	r18, 0x00	; 0
    1e92:	30 e0       	ldi	r19, 0x00	; 0
    1e94:	40 e8       	ldi	r20, 0x80	; 128
    1e96:	5f e3       	ldi	r21, 0x3F	; 63
    1e98:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e9c:	88 23       	and	r24, r24
    1e9e:	2c f4       	brge	.+10     	; 0x1eaa <LCD_displayCharacter+0x33a>
		__ticks = 1;
    1ea0:	81 e0       	ldi	r24, 0x01	; 1
    1ea2:	90 e0       	ldi	r25, 0x00	; 0
    1ea4:	9e 83       	std	Y+6, r25	; 0x06
    1ea6:	8d 83       	std	Y+5, r24	; 0x05
    1ea8:	3f c0       	rjmp	.+126    	; 0x1f28 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    1eaa:	6f 81       	ldd	r22, Y+7	; 0x07
    1eac:	78 85       	ldd	r23, Y+8	; 0x08
    1eae:	89 85       	ldd	r24, Y+9	; 0x09
    1eb0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eb2:	20 e0       	ldi	r18, 0x00	; 0
    1eb4:	3f ef       	ldi	r19, 0xFF	; 255
    1eb6:	4f e7       	ldi	r20, 0x7F	; 127
    1eb8:	57 e4       	ldi	r21, 0x47	; 71
    1eba:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ebe:	18 16       	cp	r1, r24
    1ec0:	4c f5       	brge	.+82     	; 0x1f14 <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ec2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ec4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ec6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ec8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1eca:	20 e0       	ldi	r18, 0x00	; 0
    1ecc:	30 e0       	ldi	r19, 0x00	; 0
    1ece:	40 e2       	ldi	r20, 0x20	; 32
    1ed0:	51 e4       	ldi	r21, 0x41	; 65
    1ed2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ed6:	dc 01       	movw	r26, r24
    1ed8:	cb 01       	movw	r24, r22
    1eda:	bc 01       	movw	r22, r24
    1edc:	cd 01       	movw	r24, r26
    1ede:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ee2:	dc 01       	movw	r26, r24
    1ee4:	cb 01       	movw	r24, r22
    1ee6:	9e 83       	std	Y+6, r25	; 0x06
    1ee8:	8d 83       	std	Y+5, r24	; 0x05
    1eea:	0f c0       	rjmp	.+30     	; 0x1f0a <LCD_displayCharacter+0x39a>
    1eec:	88 ec       	ldi	r24, 0xC8	; 200
    1eee:	90 e0       	ldi	r25, 0x00	; 0
    1ef0:	9c 83       	std	Y+4, r25	; 0x04
    1ef2:	8b 83       	std	Y+3, r24	; 0x03
    1ef4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ef6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ef8:	01 97       	sbiw	r24, 0x01	; 1
    1efa:	f1 f7       	brne	.-4      	; 0x1ef8 <LCD_displayCharacter+0x388>
    1efc:	9c 83       	std	Y+4, r25	; 0x04
    1efe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f00:	8d 81       	ldd	r24, Y+5	; 0x05
    1f02:	9e 81       	ldd	r25, Y+6	; 0x06
    1f04:	01 97       	sbiw	r24, 0x01	; 1
    1f06:	9e 83       	std	Y+6, r25	; 0x06
    1f08:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f0a:	8d 81       	ldd	r24, Y+5	; 0x05
    1f0c:	9e 81       	ldd	r25, Y+6	; 0x06
    1f0e:	00 97       	sbiw	r24, 0x00	; 0
    1f10:	69 f7       	brne	.-38     	; 0x1eec <LCD_displayCharacter+0x37c>
    1f12:	14 c0       	rjmp	.+40     	; 0x1f3c <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f14:	6f 81       	ldd	r22, Y+7	; 0x07
    1f16:	78 85       	ldd	r23, Y+8	; 0x08
    1f18:	89 85       	ldd	r24, Y+9	; 0x09
    1f1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f20:	dc 01       	movw	r26, r24
    1f22:	cb 01       	movw	r24, r22
    1f24:	9e 83       	std	Y+6, r25	; 0x06
    1f26:	8d 83       	std	Y+5, r24	; 0x05
    1f28:	8d 81       	ldd	r24, Y+5	; 0x05
    1f2a:	9e 81       	ldd	r25, Y+6	; 0x06
    1f2c:	9a 83       	std	Y+2, r25	; 0x02
    1f2e:	89 83       	std	Y+1, r24	; 0x01
    1f30:	89 81       	ldd	r24, Y+1	; 0x01
    1f32:	9a 81       	ldd	r25, Y+2	; 0x02
    1f34:	01 97       	sbiw	r24, 0x01	; 1
    1f36:	f1 f7       	brne	.-4      	; 0x1f34 <LCD_displayCharacter+0x3c4>
    1f38:	9a 83       	std	Y+2, r25	; 0x02
    1f3a:	89 83       	std	Y+1, r24	; 0x01
_delay_ms(1); /* delay for processing Tdsw = 100ns */
GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
_delay_ms(1); /* delay for processing Th = 13ns */
#endif

}
    1f3c:	e9 96       	adiw	r28, 0x39	; 57
    1f3e:	0f b6       	in	r0, 0x3f	; 63
    1f40:	f8 94       	cli
    1f42:	de bf       	out	0x3e, r29	; 62
    1f44:	0f be       	out	0x3f, r0	; 63
    1f46:	cd bf       	out	0x3d, r28	; 61
    1f48:	cf 91       	pop	r28
    1f4a:	df 91       	pop	r29
    1f4c:	08 95       	ret

00001f4e <LCD_displayString>:
 * @param[in]  string     Type uint8 *
 * @return none
 */

void LCD_displayString(const char * string)
{
    1f4e:	df 93       	push	r29
    1f50:	cf 93       	push	r28
    1f52:	00 d0       	rcall	.+0      	; 0x1f54 <LCD_displayString+0x6>
    1f54:	0f 92       	push	r0
    1f56:	cd b7       	in	r28, 0x3d	; 61
    1f58:	de b7       	in	r29, 0x3e	; 62
    1f5a:	9b 83       	std	Y+3, r25	; 0x03
    1f5c:	8a 83       	std	Y+2, r24	; 0x02
uint8 i=0;
    1f5e:	19 82       	std	Y+1, r1	; 0x01
    1f60:	0e c0       	rjmp	.+28     	; 0x1f7e <LCD_displayString+0x30>
while(string[i]!='\0')
{
	LCD_displayCharacter(string[i]);
    1f62:	89 81       	ldd	r24, Y+1	; 0x01
    1f64:	28 2f       	mov	r18, r24
    1f66:	30 e0       	ldi	r19, 0x00	; 0
    1f68:	8a 81       	ldd	r24, Y+2	; 0x02
    1f6a:	9b 81       	ldd	r25, Y+3	; 0x03
    1f6c:	fc 01       	movw	r30, r24
    1f6e:	e2 0f       	add	r30, r18
    1f70:	f3 1f       	adc	r31, r19
    1f72:	80 81       	ld	r24, Z
    1f74:	0e 94 b8 0d 	call	0x1b70	; 0x1b70 <LCD_displayCharacter>
	i++;
    1f78:	89 81       	ldd	r24, Y+1	; 0x01
    1f7a:	8f 5f       	subi	r24, 0xFF	; 255
    1f7c:	89 83       	std	Y+1, r24	; 0x01
 */

void LCD_displayString(const char * string)
{
uint8 i=0;
while(string[i]!='\0')
    1f7e:	89 81       	ldd	r24, Y+1	; 0x01
    1f80:	28 2f       	mov	r18, r24
    1f82:	30 e0       	ldi	r19, 0x00	; 0
    1f84:	8a 81       	ldd	r24, Y+2	; 0x02
    1f86:	9b 81       	ldd	r25, Y+3	; 0x03
    1f88:	fc 01       	movw	r30, r24
    1f8a:	e2 0f       	add	r30, r18
    1f8c:	f3 1f       	adc	r31, r19
    1f8e:	80 81       	ld	r24, Z
    1f90:	88 23       	and	r24, r24
    1f92:	39 f7       	brne	.-50     	; 0x1f62 <LCD_displayString+0x14>
{
	LCD_displayCharacter(string[i]);
	i++;
}
}
    1f94:	0f 90       	pop	r0
    1f96:	0f 90       	pop	r0
    1f98:	0f 90       	pop	r0
    1f9a:	cf 91       	pop	r28
    1f9c:	df 91       	pop	r29
    1f9e:	08 95       	ret

00001fa0 <LCD_moveCursor>:
 * @param[in]  row     Type uint8     Range 0x00:0x0F
 * @param[in]  column  Type uint8     Range 0x00:0x01
 * @return none
 */
void LCD_moveCursor(uint8 row ,uint8 column)
{
    1fa0:	df 93       	push	r29
    1fa2:	cf 93       	push	r28
    1fa4:	00 d0       	rcall	.+0      	; 0x1fa6 <LCD_moveCursor+0x6>
    1fa6:	00 d0       	rcall	.+0      	; 0x1fa8 <LCD_moveCursor+0x8>
    1fa8:	0f 92       	push	r0
    1faa:	cd b7       	in	r28, 0x3d	; 61
    1fac:	de b7       	in	r29, 0x3e	; 62
    1fae:	8a 83       	std	Y+2, r24	; 0x02
    1fb0:	6b 83       	std	Y+3, r22	; 0x03

uint8 Cursor_address=0;
    1fb2:	19 82       	std	Y+1, r1	; 0x01
switch(row)
    1fb4:	8a 81       	ldd	r24, Y+2	; 0x02
    1fb6:	28 2f       	mov	r18, r24
    1fb8:	30 e0       	ldi	r19, 0x00	; 0
    1fba:	3d 83       	std	Y+5, r19	; 0x05
    1fbc:	2c 83       	std	Y+4, r18	; 0x04
    1fbe:	8c 81       	ldd	r24, Y+4	; 0x04
    1fc0:	9d 81       	ldd	r25, Y+5	; 0x05
    1fc2:	81 30       	cpi	r24, 0x01	; 1
    1fc4:	91 05       	cpc	r25, r1
    1fc6:	c1 f0       	breq	.+48     	; 0x1ff8 <LCD_moveCursor+0x58>
    1fc8:	2c 81       	ldd	r18, Y+4	; 0x04
    1fca:	3d 81       	ldd	r19, Y+5	; 0x05
    1fcc:	22 30       	cpi	r18, 0x02	; 2
    1fce:	31 05       	cpc	r19, r1
    1fd0:	2c f4       	brge	.+10     	; 0x1fdc <LCD_moveCursor+0x3c>
    1fd2:	8c 81       	ldd	r24, Y+4	; 0x04
    1fd4:	9d 81       	ldd	r25, Y+5	; 0x05
    1fd6:	00 97       	sbiw	r24, 0x00	; 0
    1fd8:	61 f0       	breq	.+24     	; 0x1ff2 <LCD_moveCursor+0x52>
    1fda:	19 c0       	rjmp	.+50     	; 0x200e <LCD_moveCursor+0x6e>
    1fdc:	2c 81       	ldd	r18, Y+4	; 0x04
    1fde:	3d 81       	ldd	r19, Y+5	; 0x05
    1fe0:	22 30       	cpi	r18, 0x02	; 2
    1fe2:	31 05       	cpc	r19, r1
    1fe4:	69 f0       	breq	.+26     	; 0x2000 <LCD_moveCursor+0x60>
    1fe6:	8c 81       	ldd	r24, Y+4	; 0x04
    1fe8:	9d 81       	ldd	r25, Y+5	; 0x05
    1fea:	83 30       	cpi	r24, 0x03	; 3
    1fec:	91 05       	cpc	r25, r1
    1fee:	61 f0       	breq	.+24     	; 0x2008 <LCD_moveCursor+0x68>
    1ff0:	0e c0       	rjmp	.+28     	; 0x200e <LCD_moveCursor+0x6e>
{
case 0:
	Cursor_address=column;  		/* Case being in the row 0 address start with 0x00 */
    1ff2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff4:	89 83       	std	Y+1, r24	; 0x01
    1ff6:	0b c0       	rjmp	.+22     	; 0x200e <LCD_moveCursor+0x6e>
	break;
case 1:
	Cursor_address=column+0x40;		/* Case being in the row 1 address start with 0x40 */
    1ff8:	8b 81       	ldd	r24, Y+3	; 0x03
    1ffa:	80 5c       	subi	r24, 0xC0	; 192
    1ffc:	89 83       	std	Y+1, r24	; 0x01
    1ffe:	07 c0       	rjmp	.+14     	; 0x200e <LCD_moveCursor+0x6e>
	break;
case 2:
	Cursor_address=column+0x10;		/* Case being in the row 2 address start with 0x10 */
    2000:	8b 81       	ldd	r24, Y+3	; 0x03
    2002:	80 5f       	subi	r24, 0xF0	; 240
    2004:	89 83       	std	Y+1, r24	; 0x01
    2006:	03 c0       	rjmp	.+6      	; 0x200e <LCD_moveCursor+0x6e>
	break;
case 3:
	Cursor_address=column+0x50;		/* Case being in the row 3 address start with 0x50 */
    2008:	8b 81       	ldd	r24, Y+3	; 0x03
    200a:	80 5b       	subi	r24, 0xB0	; 176
    200c:	89 83       	std	Y+1, r24	; 0x01
default:
	/* Wrong Input*/
	break;
}
/* Move the Cursor to a Specific place */
LCD_sendCommand(Cursor_address | LCD_SET_CURSOR_LOCATION);
    200e:	89 81       	ldd	r24, Y+1	; 0x01
    2010:	80 68       	ori	r24, 0x80	; 128
    2012:	0e 94 c9 0b 	call	0x1792	; 0x1792 <LCD_sendCommand>
}
    2016:	0f 90       	pop	r0
    2018:	0f 90       	pop	r0
    201a:	0f 90       	pop	r0
    201c:	0f 90       	pop	r0
    201e:	0f 90       	pop	r0
    2020:	cf 91       	pop	r28
    2022:	df 91       	pop	r29
    2024:	08 95       	ret

00002026 <LCD_displayStringRowColumn>:
 * @param[in]  string     Type uint8 *
 * @return none
 */

void LCD_displayStringRowColumn(uint8 row, uint8 column, const char *str)
{
    2026:	df 93       	push	r29
    2028:	cf 93       	push	r28
    202a:	00 d0       	rcall	.+0      	; 0x202c <LCD_displayStringRowColumn+0x6>
    202c:	00 d0       	rcall	.+0      	; 0x202e <LCD_displayStringRowColumn+0x8>
    202e:	cd b7       	in	r28, 0x3d	; 61
    2030:	de b7       	in	r29, 0x3e	; 62
    2032:	89 83       	std	Y+1, r24	; 0x01
    2034:	6a 83       	std	Y+2, r22	; 0x02
    2036:	5c 83       	std	Y+4, r21	; 0x04
    2038:	4b 83       	std	Y+3, r20	; 0x03
	/* Move the Cursor to a Specific place */
	LCD_moveCursor(row,column);
    203a:	89 81       	ldd	r24, Y+1	; 0x01
    203c:	6a 81       	ldd	r22, Y+2	; 0x02
    203e:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <LCD_moveCursor>
	/* Display the send String */
	LCD_displayString(str);
    2042:	8b 81       	ldd	r24, Y+3	; 0x03
    2044:	9c 81       	ldd	r25, Y+4	; 0x04
    2046:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <LCD_displayString>
}
    204a:	0f 90       	pop	r0
    204c:	0f 90       	pop	r0
    204e:	0f 90       	pop	r0
    2050:	0f 90       	pop	r0
    2052:	cf 91       	pop	r28
    2054:	df 91       	pop	r29
    2056:	08 95       	ret

00002058 <LCD_clearScreen>:
 * @param[in]  none
 * @return none
 */

void LCD_clearScreen(void)
{
    2058:	df 93       	push	r29
    205a:	cf 93       	push	r28
    205c:	cd b7       	in	r28, 0x3d	; 61
    205e:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_SCREEN);
    2060:	81 e0       	ldi	r24, 0x01	; 1
    2062:	0e 94 c9 0b 	call	0x1792	; 0x1792 <LCD_sendCommand>
}
    2066:	cf 91       	pop	r28
    2068:	df 91       	pop	r29
    206a:	08 95       	ret

0000206c <LCD_intgerToString>:
 *
 * @param[in]  none
 * @return none
 */
void LCD_intgerToString(int data)
{
    206c:	df 93       	push	r29
    206e:	cf 93       	push	r28
    2070:	cd b7       	in	r28, 0x3d	; 61
    2072:	de b7       	in	r29, 0x3e	; 62
    2074:	62 97       	sbiw	r28, 0x12	; 18
    2076:	0f b6       	in	r0, 0x3f	; 63
    2078:	f8 94       	cli
    207a:	de bf       	out	0x3e, r29	; 62
    207c:	0f be       	out	0x3f, r0	; 63
    207e:	cd bf       	out	0x3d, r28	; 61
    2080:	9a 8b       	std	Y+18, r25	; 0x12
    2082:	89 8b       	std	Y+17, r24	; 0x11
char buff[16];
/* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
itoa(data,buff,10);
    2084:	89 89       	ldd	r24, Y+17	; 0x11
    2086:	9a 89       	ldd	r25, Y+18	; 0x12
    2088:	9e 01       	movw	r18, r28
    208a:	2f 5f       	subi	r18, 0xFF	; 255
    208c:	3f 4f       	sbci	r19, 0xFF	; 255
    208e:	b9 01       	movw	r22, r18
    2090:	4a e0       	ldi	r20, 0x0A	; 10
    2092:	50 e0       	ldi	r21, 0x00	; 0
    2094:	0e 94 00 1c 	call	0x3800	; 0x3800 <itoa>
/* Display the String */
LCD_displayString(buff);
    2098:	ce 01       	movw	r24, r28
    209a:	01 96       	adiw	r24, 0x01	; 1
    209c:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <LCD_displayString>
}
    20a0:	62 96       	adiw	r28, 0x12	; 18
    20a2:	0f b6       	in	r0, 0x3f	; 63
    20a4:	f8 94       	cli
    20a6:	de bf       	out	0x3e, r29	; 62
    20a8:	0f be       	out	0x3f, r0	; 63
    20aa:	cd bf       	out	0x3d, r28	; 61
    20ac:	cf 91       	pop	r28
    20ae:	df 91       	pop	r29
    20b0:	08 95       	ret

000020b2 <main>:
/* ===================================================================================================
									             Main Project
   ===================================================================================================*/

int main(void)
{
    20b2:	df 93       	push	r29
    20b4:	cf 93       	push	r28
    20b6:	00 d0       	rcall	.+0      	; 0x20b8 <main+0x6>
    20b8:	cd b7       	in	r28, 0x3d	; 61
    20ba:	de b7       	in	r29, 0x3e	; 62
ENABLE_INTERRUPTS();
    20bc:	78 94       	sei
uint16 Value=0;
    20be:	1a 82       	std	Y+2, r1	; 0x02
    20c0:	19 82       	std	Y+1, r1	; 0x01
Ultrasonic_init();
    20c2:	0e 94 74 1a 	call	0x34e8	; 0x34e8 <Ultrasonic_init>
LCD_init();
    20c6:	0e 94 2d 0b 	call	0x165a	; 0x165a <LCD_init>
LCD_displayString("Distance= ");
    20ca:	80 e6       	ldi	r24, 0x60	; 96
    20cc:	90 e0       	ldi	r25, 0x00	; 0
    20ce:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <LCD_displayString>
	for(;;)
	{
LCD_moveCursor(0, 10);
    20d2:	80 e0       	ldi	r24, 0x00	; 0
    20d4:	6a e0       	ldi	r22, 0x0A	; 10
    20d6:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <LCD_moveCursor>
Value=Ultrasonic_readDistance();
    20da:	0e 94 63 1b 	call	0x36c6	; 0x36c6 <Ultrasonic_readDistance>
    20de:	9a 83       	std	Y+2, r25	; 0x02
    20e0:	89 83       	std	Y+1, r24	; 0x01
LCD_intgerToString(Value);
    20e2:	89 81       	ldd	r24, Y+1	; 0x01
    20e4:	9a 81       	ldd	r25, Y+2	; 0x02
    20e6:	0e 94 36 10 	call	0x206c	; 0x206c <LCD_intgerToString>
LCD_displayString(" Cm  ");
    20ea:	8b e6       	ldi	r24, 0x6B	; 107
    20ec:	90 e0       	ldi	r25, 0x00	; 0
    20ee:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <LCD_displayString>
    20f2:	ef cf       	rjmp	.-34     	; 0x20d2 <main+0x20>

000020f4 <TIMER_init>:
 * @param[in]  Config_Ptr Type TIMER_ConfigType
 * @param[out] none
 * @return none
 */
void TIMER_init(const TIMER_ConfigType *Config_Ptr)
{
    20f4:	df 93       	push	r29
    20f6:	cf 93       	push	r28
    20f8:	cd b7       	in	r28, 0x3d	; 61
    20fa:	de b7       	in	r29, 0x3e	; 62
    20fc:	2c 97       	sbiw	r28, 0x0c	; 12
    20fe:	0f b6       	in	r0, 0x3f	; 63
    2100:	f8 94       	cli
    2102:	de bf       	out	0x3e, r29	; 62
    2104:	0f be       	out	0x3f, r0	; 63
    2106:	cd bf       	out	0x3d, r28	; 61
    2108:	9c 83       	std	Y+4, r25	; 0x04
    210a:	8b 83       	std	Y+3, r24	; 0x03
	int i;
	for(i=0;i<NUMBER_OF_USED_TIMERS;i++)
    210c:	1a 82       	std	Y+2, r1	; 0x02
    210e:	19 82       	std	Y+1, r1	; 0x01
    2110:	90 c5       	rjmp	.+2848   	; 0x2c32 <TIMER_init+0xb3e>
	{
	switch(Config_Ptr->Units[i].TimerNum)
    2112:	eb 81       	ldd	r30, Y+3	; 0x03
    2114:	fc 81       	ldd	r31, Y+4	; 0x04
    2116:	40 81       	ld	r20, Z
    2118:	51 81       	ldd	r21, Z+1	; 0x01
    211a:	29 81       	ldd	r18, Y+1	; 0x01
    211c:	3a 81       	ldd	r19, Y+2	; 0x02
    211e:	c9 01       	movw	r24, r18
    2120:	88 0f       	add	r24, r24
    2122:	99 1f       	adc	r25, r25
    2124:	88 0f       	add	r24, r24
    2126:	99 1f       	adc	r25, r25
    2128:	82 0f       	add	r24, r18
    212a:	93 1f       	adc	r25, r19
    212c:	fa 01       	movw	r30, r20
    212e:	e8 0f       	add	r30, r24
    2130:	f9 1f       	adc	r31, r25
    2132:	80 81       	ld	r24, Z
    2134:	28 2f       	mov	r18, r24
    2136:	30 e0       	ldi	r19, 0x00	; 0
    2138:	3c 87       	std	Y+12, r19	; 0x0c
    213a:	2b 87       	std	Y+11, r18	; 0x0b
    213c:	8b 85       	ldd	r24, Y+11	; 0x0b
    213e:	9c 85       	ldd	r25, Y+12	; 0x0c
    2140:	81 30       	cpi	r24, 0x01	; 1
    2142:	91 05       	cpc	r25, r1
    2144:	09 f4       	brne	.+2      	; 0x2148 <TIMER_init+0x54>
    2146:	0a c1       	rjmp	.+532    	; 0x235c <TIMER_init+0x268>
    2148:	2b 85       	ldd	r18, Y+11	; 0x0b
    214a:	3c 85       	ldd	r19, Y+12	; 0x0c
    214c:	22 30       	cpi	r18, 0x02	; 2
    214e:	31 05       	cpc	r19, r1
    2150:	09 f4       	brne	.+2      	; 0x2154 <TIMER_init+0x60>
    2152:	8f c4       	rjmp	.+2334   	; 0x2a72 <TIMER_init+0x97e>
    2154:	8b 85       	ldd	r24, Y+11	; 0x0b
    2156:	9c 85       	ldd	r25, Y+12	; 0x0c
    2158:	00 97       	sbiw	r24, 0x00	; 0
    215a:	09 f0       	breq	.+2      	; 0x215e <TIMER_init+0x6a>
    215c:	65 c5       	rjmp	.+2762   	; 0x2c28 <TIMER_init+0xb34>
	{
	case TIMER0:
	TCCR0 |= Config_Ptr->Units[i].Prescaler;
    215e:	a3 e5       	ldi	r26, 0x53	; 83
    2160:	b0 e0       	ldi	r27, 0x00	; 0
    2162:	e3 e5       	ldi	r30, 0x53	; 83
    2164:	f0 e0       	ldi	r31, 0x00	; 0
    2166:	60 81       	ld	r22, Z
    2168:	eb 81       	ldd	r30, Y+3	; 0x03
    216a:	fc 81       	ldd	r31, Y+4	; 0x04
    216c:	40 81       	ld	r20, Z
    216e:	51 81       	ldd	r21, Z+1	; 0x01
    2170:	29 81       	ldd	r18, Y+1	; 0x01
    2172:	3a 81       	ldd	r19, Y+2	; 0x02
    2174:	c9 01       	movw	r24, r18
    2176:	88 0f       	add	r24, r24
    2178:	99 1f       	adc	r25, r25
    217a:	88 0f       	add	r24, r24
    217c:	99 1f       	adc	r25, r25
    217e:	82 0f       	add	r24, r18
    2180:	93 1f       	adc	r25, r19
    2182:	fa 01       	movw	r30, r20
    2184:	e8 0f       	add	r30, r24
    2186:	f9 1f       	adc	r31, r25
    2188:	81 81       	ldd	r24, Z+1	; 0x01
    218a:	86 2b       	or	r24, r22
    218c:	8c 93       	st	X, r24
	switch(Config_Ptr->Units[i].Mode)
    218e:	eb 81       	ldd	r30, Y+3	; 0x03
    2190:	fc 81       	ldd	r31, Y+4	; 0x04
    2192:	40 81       	ld	r20, Z
    2194:	51 81       	ldd	r21, Z+1	; 0x01
    2196:	29 81       	ldd	r18, Y+1	; 0x01
    2198:	3a 81       	ldd	r19, Y+2	; 0x02
    219a:	c9 01       	movw	r24, r18
    219c:	88 0f       	add	r24, r24
    219e:	99 1f       	adc	r25, r25
    21a0:	88 0f       	add	r24, r24
    21a2:	99 1f       	adc	r25, r25
    21a4:	82 0f       	add	r24, r18
    21a6:	93 1f       	adc	r25, r19
    21a8:	fa 01       	movw	r30, r20
    21aa:	e8 0f       	add	r30, r24
    21ac:	f9 1f       	adc	r31, r25
    21ae:	82 81       	ldd	r24, Z+2	; 0x02
    21b0:	28 2f       	mov	r18, r24
    21b2:	30 e0       	ldi	r19, 0x00	; 0
    21b4:	3a 87       	std	Y+10, r19	; 0x0a
    21b6:	29 87       	std	Y+9, r18	; 0x09
    21b8:	89 85       	ldd	r24, Y+9	; 0x09
    21ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    21bc:	81 30       	cpi	r24, 0x01	; 1
    21be:	91 05       	cpc	r25, r1
    21c0:	09 f4       	brne	.+2      	; 0x21c4 <TIMER_init+0xd0>
    21c2:	b8 c0       	rjmp	.+368    	; 0x2334 <TIMER_init+0x240>
    21c4:	29 85       	ldd	r18, Y+9	; 0x09
    21c6:	3a 85       	ldd	r19, Y+10	; 0x0a
    21c8:	22 30       	cpi	r18, 0x02	; 2
    21ca:	31 05       	cpc	r19, r1
    21cc:	2c f4       	brge	.+10     	; 0x21d8 <TIMER_init+0xe4>
    21ce:	89 85       	ldd	r24, Y+9	; 0x09
    21d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    21d2:	00 97       	sbiw	r24, 0x00	; 0
    21d4:	69 f0       	breq	.+26     	; 0x21f0 <TIMER_init+0xfc>
    21d6:	28 c5       	rjmp	.+2640   	; 0x2c28 <TIMER_init+0xb34>
    21d8:	29 85       	ldd	r18, Y+9	; 0x09
    21da:	3a 85       	ldd	r19, Y+10	; 0x0a
    21dc:	22 30       	cpi	r18, 0x02	; 2
    21de:	31 05       	cpc	r19, r1
    21e0:	29 f1       	breq	.+74     	; 0x222c <TIMER_init+0x138>
    21e2:	89 85       	ldd	r24, Y+9	; 0x09
    21e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    21e6:	83 30       	cpi	r24, 0x03	; 3
    21e8:	91 05       	cpc	r25, r1
    21ea:	09 f4       	brne	.+2      	; 0x21ee <TIMER_init+0xfa>
    21ec:	5f c0       	rjmp	.+190    	; 0x22ac <TIMER_init+0x1b8>
    21ee:	1c c5       	rjmp	.+2616   	; 0x2c28 <TIMER_init+0xb34>
	{
	case TIMER0_OVF:
	/* Choose the Normal Mode  */
	CLR_BIT(TCCR0, WGM00);
    21f0:	a3 e5       	ldi	r26, 0x53	; 83
    21f2:	b0 e0       	ldi	r27, 0x00	; 0
    21f4:	e3 e5       	ldi	r30, 0x53	; 83
    21f6:	f0 e0       	ldi	r31, 0x00	; 0
    21f8:	80 81       	ld	r24, Z
    21fa:	8f 7b       	andi	r24, 0xBF	; 191
    21fc:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, WGM01);
    21fe:	a3 e5       	ldi	r26, 0x53	; 83
    2200:	b0 e0       	ldi	r27, 0x00	; 0
    2202:	e3 e5       	ldi	r30, 0x53	; 83
    2204:	f0 e0       	ldi	r31, 0x00	; 0
    2206:	80 81       	ld	r24, Z
    2208:	87 7f       	andi	r24, 0xF7	; 247
    220a:	8c 93       	st	X, r24

	/* Enabling the Overflow Interrupt Enable */
	TIMSK = (TIMSK & 0xFC) | (1 << TOIE0);
    220c:	a9 e5       	ldi	r26, 0x59	; 89
    220e:	b0 e0       	ldi	r27, 0x00	; 0
    2210:	e9 e5       	ldi	r30, 0x59	; 89
    2212:	f0 e0       	ldi	r31, 0x00	; 0
    2214:	80 81       	ld	r24, Z
    2216:	8c 7f       	andi	r24, 0xFC	; 252
    2218:	81 60       	ori	r24, 0x01	; 1
    221a:	8c 93       	st	X, r24
	/* Enabling the FOCO As i Choose Non Pwm Mode */
	SET_BIT(TCCR0, FOC0);
    221c:	a3 e5       	ldi	r26, 0x53	; 83
    221e:	b0 e0       	ldi	r27, 0x00	; 0
    2220:	e3 e5       	ldi	r30, 0x53	; 83
    2222:	f0 e0       	ldi	r31, 0x00	; 0
    2224:	80 81       	ld	r24, Z
    2226:	80 68       	ori	r24, 0x80	; 128
    2228:	8c 93       	st	X, r24
    222a:	fe c4       	rjmp	.+2556   	; 0x2c28 <TIMER_init+0xb34>
	break;

	case  TIMER0_CTC:
	/* Choose the Compare Match Mode */
	CLR_BIT(TCCR0, WGM00);
    222c:	a3 e5       	ldi	r26, 0x53	; 83
    222e:	b0 e0       	ldi	r27, 0x00	; 0
    2230:	e3 e5       	ldi	r30, 0x53	; 83
    2232:	f0 e0       	ldi	r31, 0x00	; 0
    2234:	80 81       	ld	r24, Z
    2236:	8f 7b       	andi	r24, 0xBF	; 191
    2238:	8c 93       	st	X, r24
	SET_BIT(TCCR0, WGM01);
    223a:	a3 e5       	ldi	r26, 0x53	; 83
    223c:	b0 e0       	ldi	r27, 0x00	; 0
    223e:	e3 e5       	ldi	r30, 0x53	; 83
    2240:	f0 e0       	ldi	r31, 0x00	; 0
    2242:	80 81       	ld	r24, Z
    2244:	88 60       	ori	r24, 0x08	; 8
    2246:	8c 93       	st	X, r24

	/* Choose the OCO State in CTC */
	TCCR0 = (TCCR0 & 0xCF) | ((Config_Ptr->Units[i].CtcMode)<<COM00) ;
    2248:	a3 e5       	ldi	r26, 0x53	; 83
    224a:	b0 e0       	ldi	r27, 0x00	; 0
    224c:	e3 e5       	ldi	r30, 0x53	; 83
    224e:	f0 e0       	ldi	r31, 0x00	; 0
    2250:	80 81       	ld	r24, Z
    2252:	68 2f       	mov	r22, r24
    2254:	6f 7c       	andi	r22, 0xCF	; 207
    2256:	eb 81       	ldd	r30, Y+3	; 0x03
    2258:	fc 81       	ldd	r31, Y+4	; 0x04
    225a:	40 81       	ld	r20, Z
    225c:	51 81       	ldd	r21, Z+1	; 0x01
    225e:	29 81       	ldd	r18, Y+1	; 0x01
    2260:	3a 81       	ldd	r19, Y+2	; 0x02
    2262:	c9 01       	movw	r24, r18
    2264:	88 0f       	add	r24, r24
    2266:	99 1f       	adc	r25, r25
    2268:	88 0f       	add	r24, r24
    226a:	99 1f       	adc	r25, r25
    226c:	82 0f       	add	r24, r18
    226e:	93 1f       	adc	r25, r19
    2270:	fa 01       	movw	r30, r20
    2272:	e8 0f       	add	r30, r24
    2274:	f9 1f       	adc	r31, r25
    2276:	84 81       	ldd	r24, Z+4	; 0x04
    2278:	88 2f       	mov	r24, r24
    227a:	90 e0       	ldi	r25, 0x00	; 0
    227c:	82 95       	swap	r24
    227e:	92 95       	swap	r25
    2280:	90 7f       	andi	r25, 0xF0	; 240
    2282:	98 27       	eor	r25, r24
    2284:	80 7f       	andi	r24, 0xF0	; 240
    2286:	98 27       	eor	r25, r24
    2288:	86 2b       	or	r24, r22
    228a:	8c 93       	st	X, r24

	/* Enabling the CTC Interrupt Enable */
	TIMSK = (TIMSK & 0xFC) | (1 << OCIE0);
    228c:	a9 e5       	ldi	r26, 0x59	; 89
    228e:	b0 e0       	ldi	r27, 0x00	; 0
    2290:	e9 e5       	ldi	r30, 0x59	; 89
    2292:	f0 e0       	ldi	r31, 0x00	; 0
    2294:	80 81       	ld	r24, Z
    2296:	8c 7f       	andi	r24, 0xFC	; 252
    2298:	82 60       	ori	r24, 0x02	; 2
    229a:	8c 93       	st	X, r24
	/* Enabling the FOCO As To Choose Non Pwm Mode */
	SET_BIT(TCCR0, FOC0);
    229c:	a3 e5       	ldi	r26, 0x53	; 83
    229e:	b0 e0       	ldi	r27, 0x00	; 0
    22a0:	e3 e5       	ldi	r30, 0x53	; 83
    22a2:	f0 e0       	ldi	r31, 0x00	; 0
    22a4:	80 81       	ld	r24, Z
    22a6:	80 68       	ori	r24, 0x80	; 128
    22a8:	8c 93       	st	X, r24
    22aa:	be c4       	rjmp	.+2428   	; 0x2c28 <TIMER_init+0xb34>
	break;

	case  TIMER0_FAST_PWM:
	/* Choose the FAST PWM */
	SET_BIT(TCCR0, WGM00);
    22ac:	a3 e5       	ldi	r26, 0x53	; 83
    22ae:	b0 e0       	ldi	r27, 0x00	; 0
    22b0:	e3 e5       	ldi	r30, 0x53	; 83
    22b2:	f0 e0       	ldi	r31, 0x00	; 0
    22b4:	80 81       	ld	r24, Z
    22b6:	80 64       	ori	r24, 0x40	; 64
    22b8:	8c 93       	st	X, r24
	SET_BIT(TCCR0, WGM01);
    22ba:	a3 e5       	ldi	r26, 0x53	; 83
    22bc:	b0 e0       	ldi	r27, 0x00	; 0
    22be:	e3 e5       	ldi	r30, 0x53	; 83
    22c0:	f0 e0       	ldi	r31, 0x00	; 0
    22c2:	80 81       	ld	r24, Z
    22c4:	88 60       	ori	r24, 0x08	; 8
    22c6:	8c 93       	st	X, r24

	/* Choose the Fast Pwm Working Mode */
	TCCR0 = (TCCR0 & 0xCF) | ((Config_Ptr->Units[i].PwmMode)<<COM00) ;
    22c8:	a3 e5       	ldi	r26, 0x53	; 83
    22ca:	b0 e0       	ldi	r27, 0x00	; 0
    22cc:	e3 e5       	ldi	r30, 0x53	; 83
    22ce:	f0 e0       	ldi	r31, 0x00	; 0
    22d0:	80 81       	ld	r24, Z
    22d2:	68 2f       	mov	r22, r24
    22d4:	6f 7c       	andi	r22, 0xCF	; 207
    22d6:	eb 81       	ldd	r30, Y+3	; 0x03
    22d8:	fc 81       	ldd	r31, Y+4	; 0x04
    22da:	40 81       	ld	r20, Z
    22dc:	51 81       	ldd	r21, Z+1	; 0x01
    22de:	29 81       	ldd	r18, Y+1	; 0x01
    22e0:	3a 81       	ldd	r19, Y+2	; 0x02
    22e2:	c9 01       	movw	r24, r18
    22e4:	88 0f       	add	r24, r24
    22e6:	99 1f       	adc	r25, r25
    22e8:	88 0f       	add	r24, r24
    22ea:	99 1f       	adc	r25, r25
    22ec:	82 0f       	add	r24, r18
    22ee:	93 1f       	adc	r25, r19
    22f0:	fa 01       	movw	r30, r20
    22f2:	e8 0f       	add	r30, r24
    22f4:	f9 1f       	adc	r31, r25
    22f6:	83 81       	ldd	r24, Z+3	; 0x03
    22f8:	88 2f       	mov	r24, r24
    22fa:	90 e0       	ldi	r25, 0x00	; 0
    22fc:	82 95       	swap	r24
    22fe:	92 95       	swap	r25
    2300:	90 7f       	andi	r25, 0xF0	; 240
    2302:	98 27       	eor	r25, r24
    2304:	80 7f       	andi	r24, 0xF0	; 240
    2306:	98 27       	eor	r25, r24
    2308:	86 2b       	or	r24, r22
    230a:	8c 93       	st	X, r24

	/* Disabling the CTC , Overflow Interrupt Enable */
	TIMSK = (TIMSK & 0xFC);
    230c:	a9 e5       	ldi	r26, 0x59	; 89
    230e:	b0 e0       	ldi	r27, 0x00	; 0
    2310:	e9 e5       	ldi	r30, 0x59	; 89
    2312:	f0 e0       	ldi	r31, 0x00	; 0
    2314:	80 81       	ld	r24, Z
    2316:	8c 7f       	andi	r24, 0xFC	; 252
    2318:	8c 93       	st	X, r24

	/* Disabling the FOCO As To Choose a Pwm Mode */
	CLR_BIT(TCCR0, FOC0);
    231a:	a3 e5       	ldi	r26, 0x53	; 83
    231c:	b0 e0       	ldi	r27, 0x00	; 0
    231e:	e3 e5       	ldi	r30, 0x53	; 83
    2320:	f0 e0       	ldi	r31, 0x00	; 0
    2322:	80 81       	ld	r24, Z
    2324:	8f 77       	andi	r24, 0x7F	; 127
    2326:	8c 93       	st	X, r24

	/* Defining OC0 Pin As an Output */
	GPIO_setupPinDirection(PORTD_ID, PIN3_ID, PIN_OUTPUT);
    2328:	83 e0       	ldi	r24, 0x03	; 3
    232a:	63 e0       	ldi	r22, 0x03	; 3
    232c:	41 e0       	ldi	r20, 0x01	; 1
    232e:	0e 94 17 07 	call	0xe2e	; 0xe2e <GPIO_setupPinDirection>
    2332:	7a c4       	rjmp	.+2292   	; 0x2c28 <TIMER_init+0xb34>
	break;

	case TIMER0_PHASE_PWM:
	/* Choose the PHASE PWM Mode */
	SET_BIT(TCCR0, WGM00);
    2334:	a3 e5       	ldi	r26, 0x53	; 83
    2336:	b0 e0       	ldi	r27, 0x00	; 0
    2338:	e3 e5       	ldi	r30, 0x53	; 83
    233a:	f0 e0       	ldi	r31, 0x00	; 0
    233c:	80 81       	ld	r24, Z
    233e:	80 64       	ori	r24, 0x40	; 64
    2340:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, WGM01);
    2342:	a3 e5       	ldi	r26, 0x53	; 83
    2344:	b0 e0       	ldi	r27, 0x00	; 0
    2346:	e3 e5       	ldi	r30, 0x53	; 83
    2348:	f0 e0       	ldi	r31, 0x00	; 0
    234a:	80 81       	ld	r24, Z
    234c:	87 7f       	andi	r24, 0xF7	; 247
    234e:	8c 93       	st	X, r24

	/* Defining OC0 Pin As an Output */
	GPIO_setupPinDirection(PORTD_ID, PIN3_ID, PIN_OUTPUT);
    2350:	83 e0       	ldi	r24, 0x03	; 3
    2352:	63 e0       	ldi	r22, 0x03	; 3
    2354:	41 e0       	ldi	r20, 0x01	; 1
    2356:	0e 94 17 07 	call	0xe2e	; 0xe2e <GPIO_setupPinDirection>
    235a:	66 c4       	rjmp	.+2252   	; 0x2c28 <TIMER_init+0xb34>

	}

	break;
	case TIMER1:
		TCCR1B |= Config_Ptr->Units[i].Prescaler;
    235c:	ae e4       	ldi	r26, 0x4E	; 78
    235e:	b0 e0       	ldi	r27, 0x00	; 0
    2360:	ee e4       	ldi	r30, 0x4E	; 78
    2362:	f0 e0       	ldi	r31, 0x00	; 0
    2364:	60 81       	ld	r22, Z
    2366:	eb 81       	ldd	r30, Y+3	; 0x03
    2368:	fc 81       	ldd	r31, Y+4	; 0x04
    236a:	40 81       	ld	r20, Z
    236c:	51 81       	ldd	r21, Z+1	; 0x01
    236e:	29 81       	ldd	r18, Y+1	; 0x01
    2370:	3a 81       	ldd	r19, Y+2	; 0x02
    2372:	c9 01       	movw	r24, r18
    2374:	88 0f       	add	r24, r24
    2376:	99 1f       	adc	r25, r25
    2378:	88 0f       	add	r24, r24
    237a:	99 1f       	adc	r25, r25
    237c:	82 0f       	add	r24, r18
    237e:	93 1f       	adc	r25, r19
    2380:	fa 01       	movw	r30, r20
    2382:	e8 0f       	add	r30, r24
    2384:	f9 1f       	adc	r31, r25
    2386:	81 81       	ldd	r24, Z+1	; 0x01
    2388:	86 2b       	or	r24, r22
    238a:	8c 93       	st	X, r24
		Timer1_Mode = Config_Ptr->Units[i].Mode;
    238c:	eb 81       	ldd	r30, Y+3	; 0x03
    238e:	fc 81       	ldd	r31, Y+4	; 0x04
    2390:	40 81       	ld	r20, Z
    2392:	51 81       	ldd	r21, Z+1	; 0x01
    2394:	29 81       	ldd	r18, Y+1	; 0x01
    2396:	3a 81       	ldd	r19, Y+2	; 0x02
    2398:	c9 01       	movw	r24, r18
    239a:	88 0f       	add	r24, r24
    239c:	99 1f       	adc	r25, r25
    239e:	88 0f       	add	r24, r24
    23a0:	99 1f       	adc	r25, r25
    23a2:	82 0f       	add	r24, r18
    23a4:	93 1f       	adc	r25, r19
    23a6:	fa 01       	movw	r30, r20
    23a8:	e8 0f       	add	r30, r24
    23aa:	f9 1f       	adc	r31, r25
    23ac:	82 81       	ldd	r24, Z+2	; 0x02
    23ae:	80 93 97 01 	sts	0x0197, r24
		switch(Config_Ptr->Units[i].Mode)
    23b2:	eb 81       	ldd	r30, Y+3	; 0x03
    23b4:	fc 81       	ldd	r31, Y+4	; 0x04
    23b6:	40 81       	ld	r20, Z
    23b8:	51 81       	ldd	r21, Z+1	; 0x01
    23ba:	29 81       	ldd	r18, Y+1	; 0x01
    23bc:	3a 81       	ldd	r19, Y+2	; 0x02
    23be:	c9 01       	movw	r24, r18
    23c0:	88 0f       	add	r24, r24
    23c2:	99 1f       	adc	r25, r25
    23c4:	88 0f       	add	r24, r24
    23c6:	99 1f       	adc	r25, r25
    23c8:	82 0f       	add	r24, r18
    23ca:	93 1f       	adc	r25, r19
    23cc:	fa 01       	movw	r30, r20
    23ce:	e8 0f       	add	r30, r24
    23d0:	f9 1f       	adc	r31, r25
    23d2:	82 81       	ldd	r24, Z+2	; 0x02
    23d4:	28 2f       	mov	r18, r24
    23d6:	30 e0       	ldi	r19, 0x00	; 0
    23d8:	38 87       	std	Y+8, r19	; 0x08
    23da:	2f 83       	std	Y+7, r18	; 0x07
    23dc:	8f 81       	ldd	r24, Y+7	; 0x07
    23de:	98 85       	ldd	r25, Y+8	; 0x08
    23e0:	86 30       	cpi	r24, 0x06	; 6
    23e2:	91 05       	cpc	r25, r1
    23e4:	09 f4       	brne	.+2      	; 0x23e8 <TIMER_init+0x2f4>
    23e6:	40 c1       	rjmp	.+640    	; 0x2668 <TIMER_init+0x574>
    23e8:	2f 81       	ldd	r18, Y+7	; 0x07
    23ea:	38 85       	ldd	r19, Y+8	; 0x08
    23ec:	27 30       	cpi	r18, 0x07	; 7
    23ee:	31 05       	cpc	r19, r1
    23f0:	8c f4       	brge	.+34     	; 0x2414 <TIMER_init+0x320>
    23f2:	8f 81       	ldd	r24, Y+7	; 0x07
    23f4:	98 85       	ldd	r25, Y+8	; 0x08
    23f6:	84 30       	cpi	r24, 0x04	; 4
    23f8:	91 05       	cpc	r25, r1
    23fa:	09 f4       	brne	.+2      	; 0x23fe <TIMER_init+0x30a>
    23fc:	5d c0       	rjmp	.+186    	; 0x24b8 <TIMER_init+0x3c4>
    23fe:	2f 81       	ldd	r18, Y+7	; 0x07
    2400:	38 85       	ldd	r19, Y+8	; 0x08
    2402:	25 30       	cpi	r18, 0x05	; 5
    2404:	31 05       	cpc	r19, r1
    2406:	0c f0       	brlt	.+2      	; 0x240a <TIMER_init+0x316>
    2408:	c9 c0       	rjmp	.+402    	; 0x259c <TIMER_init+0x4a8>
    240a:	8f 81       	ldd	r24, Y+7	; 0x07
    240c:	98 85       	ldd	r25, Y+8	; 0x08
    240e:	00 97       	sbiw	r24, 0x00	; 0
    2410:	01 f1       	breq	.+64     	; 0x2452 <TIMER_init+0x35e>
    2412:	0a c4       	rjmp	.+2068   	; 0x2c28 <TIMER_init+0xb34>
    2414:	2f 81       	ldd	r18, Y+7	; 0x07
    2416:	38 85       	ldd	r19, Y+8	; 0x08
    2418:	2c 30       	cpi	r18, 0x0C	; 12
    241a:	31 05       	cpc	r19, r1
    241c:	09 f4       	brne	.+2      	; 0x2420 <TIMER_init+0x32c>
    241e:	f0 c1       	rjmp	.+992    	; 0x2800 <TIMER_init+0x70c>
    2420:	8f 81       	ldd	r24, Y+7	; 0x07
    2422:	98 85       	ldd	r25, Y+8	; 0x08
    2424:	8d 30       	cpi	r24, 0x0D	; 13
    2426:	91 05       	cpc	r25, r1
    2428:	3c f4       	brge	.+14     	; 0x2438 <TIMER_init+0x344>
    242a:	2f 81       	ldd	r18, Y+7	; 0x07
    242c:	38 85       	ldd	r19, Y+8	; 0x08
    242e:	27 30       	cpi	r18, 0x07	; 7
    2430:	31 05       	cpc	r19, r1
    2432:	09 f4       	brne	.+2      	; 0x2436 <TIMER_init+0x342>
    2434:	7f c1       	rjmp	.+766    	; 0x2734 <TIMER_init+0x640>
    2436:	f8 c3       	rjmp	.+2032   	; 0x2c28 <TIMER_init+0xb34>
    2438:	8f 81       	ldd	r24, Y+7	; 0x07
    243a:	98 85       	ldd	r25, Y+8	; 0x08
    243c:	8e 30       	cpi	r24, 0x0E	; 14
    243e:	91 05       	cpc	r25, r1
    2440:	09 f4       	brne	.+2      	; 0x2444 <TIMER_init+0x350>
    2442:	50 c2       	rjmp	.+1184   	; 0x28e4 <TIMER_init+0x7f0>
    2444:	2f 81       	ldd	r18, Y+7	; 0x07
    2446:	38 85       	ldd	r19, Y+8	; 0x08
    2448:	2f 30       	cpi	r18, 0x0F	; 15
    244a:	31 05       	cpc	r19, r1
    244c:	09 f4       	brne	.+2      	; 0x2450 <TIMER_init+0x35c>
    244e:	ab c2       	rjmp	.+1366   	; 0x29a6 <TIMER_init+0x8b2>
    2450:	eb c3       	rjmp	.+2006   	; 0x2c28 <TIMER_init+0xb34>
		{
		case TIMER1_OVF:
		/* Choose the Mode */
		CLR_BIT(TCCR1A, WGM10);
    2452:	af e4       	ldi	r26, 0x4F	; 79
    2454:	b0 e0       	ldi	r27, 0x00	; 0
    2456:	ef e4       	ldi	r30, 0x4F	; 79
    2458:	f0 e0       	ldi	r31, 0x00	; 0
    245a:	80 81       	ld	r24, Z
    245c:	8e 7f       	andi	r24, 0xFE	; 254
    245e:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A, WGM11);
    2460:	af e4       	ldi	r26, 0x4F	; 79
    2462:	b0 e0       	ldi	r27, 0x00	; 0
    2464:	ef e4       	ldi	r30, 0x4F	; 79
    2466:	f0 e0       	ldi	r31, 0x00	; 0
    2468:	80 81       	ld	r24, Z
    246a:	8d 7f       	andi	r24, 0xFD	; 253
    246c:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B, WGM12);
    246e:	ae e4       	ldi	r26, 0x4E	; 78
    2470:	b0 e0       	ldi	r27, 0x00	; 0
    2472:	ee e4       	ldi	r30, 0x4E	; 78
    2474:	f0 e0       	ldi	r31, 0x00	; 0
    2476:	80 81       	ld	r24, Z
    2478:	87 7f       	andi	r24, 0xF7	; 247
    247a:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B, WGM13);
    247c:	ae e4       	ldi	r26, 0x4E	; 78
    247e:	b0 e0       	ldi	r27, 0x00	; 0
    2480:	ee e4       	ldi	r30, 0x4E	; 78
    2482:	f0 e0       	ldi	r31, 0x00	; 0
    2484:	80 81       	ld	r24, Z
    2486:	8f 7e       	andi	r24, 0xEF	; 239
    2488:	8c 93       	st	X, r24

		/* Enabling the FOC1A & FOC1B To Choose Non Pwm Mode */
		SET_BIT(TCCR1A, FOC1A);
    248a:	af e4       	ldi	r26, 0x4F	; 79
    248c:	b0 e0       	ldi	r27, 0x00	; 0
    248e:	ef e4       	ldi	r30, 0x4F	; 79
    2490:	f0 e0       	ldi	r31, 0x00	; 0
    2492:	80 81       	ld	r24, Z
    2494:	88 60       	ori	r24, 0x08	; 8
    2496:	8c 93       	st	X, r24
		SET_BIT(TCCR1A, FOC1B);
    2498:	af e4       	ldi	r26, 0x4F	; 79
    249a:	b0 e0       	ldi	r27, 0x00	; 0
    249c:	ef e4       	ldi	r30, 0x4F	; 79
    249e:	f0 e0       	ldi	r31, 0x00	; 0
    24a0:	80 81       	ld	r24, Z
    24a2:	84 60       	ori	r24, 0x04	; 4
    24a4:	8c 93       	st	X, r24

		/* Enabling the Overflow Interrupt Enable */
		TIMSK = (TIMSK & 0xE3)  | (1 << TOIE1);
    24a6:	a9 e5       	ldi	r26, 0x59	; 89
    24a8:	b0 e0       	ldi	r27, 0x00	; 0
    24aa:	e9 e5       	ldi	r30, 0x59	; 89
    24ac:	f0 e0       	ldi	r31, 0x00	; 0
    24ae:	80 81       	ld	r24, Z
    24b0:	83 7e       	andi	r24, 0xE3	; 227
    24b2:	84 60       	ori	r24, 0x04	; 4
    24b4:	8c 93       	st	X, r24
    24b6:	b8 c3       	rjmp	.+1904   	; 0x2c28 <TIMER_init+0xb34>

		break;
		case  TIMER1_CTC_OCR:
		/* Choose the CTC Mode With OCR */
		CLR_BIT(TCCR1A, WGM10);
    24b8:	af e4       	ldi	r26, 0x4F	; 79
    24ba:	b0 e0       	ldi	r27, 0x00	; 0
    24bc:	ef e4       	ldi	r30, 0x4F	; 79
    24be:	f0 e0       	ldi	r31, 0x00	; 0
    24c0:	80 81       	ld	r24, Z
    24c2:	8e 7f       	andi	r24, 0xFE	; 254
    24c4:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A, WGM11);
    24c6:	af e4       	ldi	r26, 0x4F	; 79
    24c8:	b0 e0       	ldi	r27, 0x00	; 0
    24ca:	ef e4       	ldi	r30, 0x4F	; 79
    24cc:	f0 e0       	ldi	r31, 0x00	; 0
    24ce:	80 81       	ld	r24, Z
    24d0:	8d 7f       	andi	r24, 0xFD	; 253
    24d2:	8c 93       	st	X, r24
		SET_BIT(TCCR1B, WGM12);
    24d4:	ae e4       	ldi	r26, 0x4E	; 78
    24d6:	b0 e0       	ldi	r27, 0x00	; 0
    24d8:	ee e4       	ldi	r30, 0x4E	; 78
    24da:	f0 e0       	ldi	r31, 0x00	; 0
    24dc:	80 81       	ld	r24, Z
    24de:	88 60       	ori	r24, 0x08	; 8
    24e0:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B, WGM13);
    24e2:	ae e4       	ldi	r26, 0x4E	; 78
    24e4:	b0 e0       	ldi	r27, 0x00	; 0
    24e6:	ee e4       	ldi	r30, 0x4E	; 78
    24e8:	f0 e0       	ldi	r31, 0x00	; 0
    24ea:	80 81       	ld	r24, Z
    24ec:	8f 7e       	andi	r24, 0xEF	; 239
    24ee:	8c 93       	st	X, r24

		/* Enabling the FOC1A & FOC1B To Choose Non Pwm Mode */
		SET_BIT(TCCR1A, FOC1A);
    24f0:	af e4       	ldi	r26, 0x4F	; 79
    24f2:	b0 e0       	ldi	r27, 0x00	; 0
    24f4:	ef e4       	ldi	r30, 0x4F	; 79
    24f6:	f0 e0       	ldi	r31, 0x00	; 0
    24f8:	80 81       	ld	r24, Z
    24fa:	88 60       	ori	r24, 0x08	; 8
    24fc:	8c 93       	st	X, r24
		SET_BIT(TCCR1A, FOC1B);
    24fe:	af e4       	ldi	r26, 0x4F	; 79
    2500:	b0 e0       	ldi	r27, 0x00	; 0
    2502:	ef e4       	ldi	r30, 0x4F	; 79
    2504:	f0 e0       	ldi	r31, 0x00	; 0
    2506:	80 81       	ld	r24, Z
    2508:	84 60       	ori	r24, 0x04	; 4
    250a:	8c 93       	st	X, r24

		/* Enabling the Overflow Interrupt Enable */
		TIMSK = (TIMSK & 0xE3)  | (1 << OCIE1A);
    250c:	a9 e5       	ldi	r26, 0x59	; 89
    250e:	b0 e0       	ldi	r27, 0x00	; 0
    2510:	e9 e5       	ldi	r30, 0x59	; 89
    2512:	f0 e0       	ldi	r31, 0x00	; 0
    2514:	80 81       	ld	r24, Z
    2516:	83 7e       	andi	r24, 0xE3	; 227
    2518:	80 61       	ori	r24, 0x10	; 16
    251a:	8c 93       	st	X, r24

		/* Choose the OC1A , OC1B State in CTC */
		TCCR1A = (TCCR0 & 0x0F) | ((Config_Ptr->Units[i].CtcMode)<<COM1B0) | ((Config_Ptr->Units[i].CtcMode)<<COM1A0);
    251c:	af e4       	ldi	r26, 0x4F	; 79
    251e:	b0 e0       	ldi	r27, 0x00	; 0
    2520:	e3 e5       	ldi	r30, 0x53	; 83
    2522:	f0 e0       	ldi	r31, 0x00	; 0
    2524:	80 81       	ld	r24, Z
    2526:	68 2f       	mov	r22, r24
    2528:	6f 70       	andi	r22, 0x0F	; 15
    252a:	eb 81       	ldd	r30, Y+3	; 0x03
    252c:	fc 81       	ldd	r31, Y+4	; 0x04
    252e:	40 81       	ld	r20, Z
    2530:	51 81       	ldd	r21, Z+1	; 0x01
    2532:	29 81       	ldd	r18, Y+1	; 0x01
    2534:	3a 81       	ldd	r19, Y+2	; 0x02
    2536:	c9 01       	movw	r24, r18
    2538:	88 0f       	add	r24, r24
    253a:	99 1f       	adc	r25, r25
    253c:	88 0f       	add	r24, r24
    253e:	99 1f       	adc	r25, r25
    2540:	82 0f       	add	r24, r18
    2542:	93 1f       	adc	r25, r19
    2544:	fa 01       	movw	r30, r20
    2546:	e8 0f       	add	r30, r24
    2548:	f9 1f       	adc	r31, r25
    254a:	84 81       	ldd	r24, Z+4	; 0x04
    254c:	88 2f       	mov	r24, r24
    254e:	90 e0       	ldi	r25, 0x00	; 0
    2550:	82 95       	swap	r24
    2552:	92 95       	swap	r25
    2554:	90 7f       	andi	r25, 0xF0	; 240
    2556:	98 27       	eor	r25, r24
    2558:	80 7f       	andi	r24, 0xF0	; 240
    255a:	98 27       	eor	r25, r24
    255c:	68 2b       	or	r22, r24
    255e:	eb 81       	ldd	r30, Y+3	; 0x03
    2560:	fc 81       	ldd	r31, Y+4	; 0x04
    2562:	40 81       	ld	r20, Z
    2564:	51 81       	ldd	r21, Z+1	; 0x01
    2566:	29 81       	ldd	r18, Y+1	; 0x01
    2568:	3a 81       	ldd	r19, Y+2	; 0x02
    256a:	c9 01       	movw	r24, r18
    256c:	88 0f       	add	r24, r24
    256e:	99 1f       	adc	r25, r25
    2570:	88 0f       	add	r24, r24
    2572:	99 1f       	adc	r25, r25
    2574:	82 0f       	add	r24, r18
    2576:	93 1f       	adc	r25, r19
    2578:	fa 01       	movw	r30, r20
    257a:	e8 0f       	add	r30, r24
    257c:	f9 1f       	adc	r31, r25
    257e:	84 81       	ldd	r24, Z+4	; 0x04
    2580:	88 2f       	mov	r24, r24
    2582:	90 e0       	ldi	r25, 0x00	; 0
    2584:	00 24       	eor	r0, r0
    2586:	96 95       	lsr	r25
    2588:	87 95       	ror	r24
    258a:	07 94       	ror	r0
    258c:	96 95       	lsr	r25
    258e:	87 95       	ror	r24
    2590:	07 94       	ror	r0
    2592:	98 2f       	mov	r25, r24
    2594:	80 2d       	mov	r24, r0
    2596:	86 2b       	or	r24, r22
    2598:	8c 93       	st	X, r24
    259a:	46 c3       	rjmp	.+1676   	; 0x2c28 <TIMER_init+0xb34>
		break;

		case   TIMER1_FAST_PWM_8BIT :
		/* Choose the Fast Pwm With 8bit Range */
		SET_BIT(TCCR1A, WGM10);
    259c:	af e4       	ldi	r26, 0x4F	; 79
    259e:	b0 e0       	ldi	r27, 0x00	; 0
    25a0:	ef e4       	ldi	r30, 0x4F	; 79
    25a2:	f0 e0       	ldi	r31, 0x00	; 0
    25a4:	80 81       	ld	r24, Z
    25a6:	81 60       	ori	r24, 0x01	; 1
    25a8:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A, WGM11);
    25aa:	af e4       	ldi	r26, 0x4F	; 79
    25ac:	b0 e0       	ldi	r27, 0x00	; 0
    25ae:	ef e4       	ldi	r30, 0x4F	; 79
    25b0:	f0 e0       	ldi	r31, 0x00	; 0
    25b2:	80 81       	ld	r24, Z
    25b4:	8d 7f       	andi	r24, 0xFD	; 253
    25b6:	8c 93       	st	X, r24
		SET_BIT(TCCR1B, WGM12);
    25b8:	ae e4       	ldi	r26, 0x4E	; 78
    25ba:	b0 e0       	ldi	r27, 0x00	; 0
    25bc:	ee e4       	ldi	r30, 0x4E	; 78
    25be:	f0 e0       	ldi	r31, 0x00	; 0
    25c0:	80 81       	ld	r24, Z
    25c2:	88 60       	ori	r24, 0x08	; 8
    25c4:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B, WGM13);
    25c6:	ae e4       	ldi	r26, 0x4E	; 78
    25c8:	b0 e0       	ldi	r27, 0x00	; 0
    25ca:	ee e4       	ldi	r30, 0x4E	; 78
    25cc:	f0 e0       	ldi	r31, 0x00	; 0
    25ce:	80 81       	ld	r24, Z
    25d0:	8f 7e       	andi	r24, 0xEF	; 239
    25d2:	8c 93       	st	X, r24

		/* Choose the PWM Working Mode */
		TCCR1A = (TCCR0 & 0x0F) | ((Config_Ptr->Units[i].PwmMode)<<COM1B0) | ((Config_Ptr->Units[i].PwmMode)<<COM1A0);
    25d4:	af e4       	ldi	r26, 0x4F	; 79
    25d6:	b0 e0       	ldi	r27, 0x00	; 0
    25d8:	e3 e5       	ldi	r30, 0x53	; 83
    25da:	f0 e0       	ldi	r31, 0x00	; 0
    25dc:	80 81       	ld	r24, Z
    25de:	68 2f       	mov	r22, r24
    25e0:	6f 70       	andi	r22, 0x0F	; 15
    25e2:	eb 81       	ldd	r30, Y+3	; 0x03
    25e4:	fc 81       	ldd	r31, Y+4	; 0x04
    25e6:	40 81       	ld	r20, Z
    25e8:	51 81       	ldd	r21, Z+1	; 0x01
    25ea:	29 81       	ldd	r18, Y+1	; 0x01
    25ec:	3a 81       	ldd	r19, Y+2	; 0x02
    25ee:	c9 01       	movw	r24, r18
    25f0:	88 0f       	add	r24, r24
    25f2:	99 1f       	adc	r25, r25
    25f4:	88 0f       	add	r24, r24
    25f6:	99 1f       	adc	r25, r25
    25f8:	82 0f       	add	r24, r18
    25fa:	93 1f       	adc	r25, r19
    25fc:	fa 01       	movw	r30, r20
    25fe:	e8 0f       	add	r30, r24
    2600:	f9 1f       	adc	r31, r25
    2602:	83 81       	ldd	r24, Z+3	; 0x03
    2604:	88 2f       	mov	r24, r24
    2606:	90 e0       	ldi	r25, 0x00	; 0
    2608:	82 95       	swap	r24
    260a:	92 95       	swap	r25
    260c:	90 7f       	andi	r25, 0xF0	; 240
    260e:	98 27       	eor	r25, r24
    2610:	80 7f       	andi	r24, 0xF0	; 240
    2612:	98 27       	eor	r25, r24
    2614:	68 2b       	or	r22, r24
    2616:	eb 81       	ldd	r30, Y+3	; 0x03
    2618:	fc 81       	ldd	r31, Y+4	; 0x04
    261a:	40 81       	ld	r20, Z
    261c:	51 81       	ldd	r21, Z+1	; 0x01
    261e:	29 81       	ldd	r18, Y+1	; 0x01
    2620:	3a 81       	ldd	r19, Y+2	; 0x02
    2622:	c9 01       	movw	r24, r18
    2624:	88 0f       	add	r24, r24
    2626:	99 1f       	adc	r25, r25
    2628:	88 0f       	add	r24, r24
    262a:	99 1f       	adc	r25, r25
    262c:	82 0f       	add	r24, r18
    262e:	93 1f       	adc	r25, r19
    2630:	fa 01       	movw	r30, r20
    2632:	e8 0f       	add	r30, r24
    2634:	f9 1f       	adc	r31, r25
    2636:	83 81       	ldd	r24, Z+3	; 0x03
    2638:	88 2f       	mov	r24, r24
    263a:	90 e0       	ldi	r25, 0x00	; 0
    263c:	00 24       	eor	r0, r0
    263e:	96 95       	lsr	r25
    2640:	87 95       	ror	r24
    2642:	07 94       	ror	r0
    2644:	96 95       	lsr	r25
    2646:	87 95       	ror	r24
    2648:	07 94       	ror	r0
    264a:	98 2f       	mov	r25, r24
    264c:	80 2d       	mov	r24, r0
    264e:	86 2b       	or	r24, r22
    2650:	8c 93       	st	X, r24

		/* Defining OC1A / OC1B Pin As an Output */
		GPIO_setupPinDirection(PORTD_ID, PIN4_ID, PIN_OUTPUT);
    2652:	83 e0       	ldi	r24, 0x03	; 3
    2654:	64 e0       	ldi	r22, 0x04	; 4
    2656:	41 e0       	ldi	r20, 0x01	; 1
    2658:	0e 94 17 07 	call	0xe2e	; 0xe2e <GPIO_setupPinDirection>
		GPIO_setupPinDirection(PORTD_ID, PIN5_ID, PIN_OUTPUT);
    265c:	83 e0       	ldi	r24, 0x03	; 3
    265e:	65 e0       	ldi	r22, 0x05	; 5
    2660:	41 e0       	ldi	r20, 0x01	; 1
    2662:	0e 94 17 07 	call	0xe2e	; 0xe2e <GPIO_setupPinDirection>
    2666:	e0 c2       	rjmp	.+1472   	; 0x2c28 <TIMER_init+0xb34>
		break;

		case    TIMER1_FAST_PWM_9BIT :
		/* Choose the Fast Pwm With 9bit Range */
		CLR_BIT(TCCR1A, WGM10);
    2668:	af e4       	ldi	r26, 0x4F	; 79
    266a:	b0 e0       	ldi	r27, 0x00	; 0
    266c:	ef e4       	ldi	r30, 0x4F	; 79
    266e:	f0 e0       	ldi	r31, 0x00	; 0
    2670:	80 81       	ld	r24, Z
    2672:	8e 7f       	andi	r24, 0xFE	; 254
    2674:	8c 93       	st	X, r24
		SET_BIT(TCCR1A, WGM11);
    2676:	af e4       	ldi	r26, 0x4F	; 79
    2678:	b0 e0       	ldi	r27, 0x00	; 0
    267a:	ef e4       	ldi	r30, 0x4F	; 79
    267c:	f0 e0       	ldi	r31, 0x00	; 0
    267e:	80 81       	ld	r24, Z
    2680:	82 60       	ori	r24, 0x02	; 2
    2682:	8c 93       	st	X, r24
		SET_BIT(TCCR1B, WGM12);
    2684:	ae e4       	ldi	r26, 0x4E	; 78
    2686:	b0 e0       	ldi	r27, 0x00	; 0
    2688:	ee e4       	ldi	r30, 0x4E	; 78
    268a:	f0 e0       	ldi	r31, 0x00	; 0
    268c:	80 81       	ld	r24, Z
    268e:	88 60       	ori	r24, 0x08	; 8
    2690:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B, WGM13);
    2692:	ae e4       	ldi	r26, 0x4E	; 78
    2694:	b0 e0       	ldi	r27, 0x00	; 0
    2696:	ee e4       	ldi	r30, 0x4E	; 78
    2698:	f0 e0       	ldi	r31, 0x00	; 0
    269a:	80 81       	ld	r24, Z
    269c:	8f 7e       	andi	r24, 0xEF	; 239
    269e:	8c 93       	st	X, r24

		/* Choose the PWM Working Mode */
		TCCR1A = (TCCR0 & 0x0F) | ((Config_Ptr->Units[i].PwmMode)<<COM1B0) | ((Config_Ptr->Units[i].PwmMode)<<COM1A0);
    26a0:	af e4       	ldi	r26, 0x4F	; 79
    26a2:	b0 e0       	ldi	r27, 0x00	; 0
    26a4:	e3 e5       	ldi	r30, 0x53	; 83
    26a6:	f0 e0       	ldi	r31, 0x00	; 0
    26a8:	80 81       	ld	r24, Z
    26aa:	68 2f       	mov	r22, r24
    26ac:	6f 70       	andi	r22, 0x0F	; 15
    26ae:	eb 81       	ldd	r30, Y+3	; 0x03
    26b0:	fc 81       	ldd	r31, Y+4	; 0x04
    26b2:	40 81       	ld	r20, Z
    26b4:	51 81       	ldd	r21, Z+1	; 0x01
    26b6:	29 81       	ldd	r18, Y+1	; 0x01
    26b8:	3a 81       	ldd	r19, Y+2	; 0x02
    26ba:	c9 01       	movw	r24, r18
    26bc:	88 0f       	add	r24, r24
    26be:	99 1f       	adc	r25, r25
    26c0:	88 0f       	add	r24, r24
    26c2:	99 1f       	adc	r25, r25
    26c4:	82 0f       	add	r24, r18
    26c6:	93 1f       	adc	r25, r19
    26c8:	fa 01       	movw	r30, r20
    26ca:	e8 0f       	add	r30, r24
    26cc:	f9 1f       	adc	r31, r25
    26ce:	83 81       	ldd	r24, Z+3	; 0x03
    26d0:	88 2f       	mov	r24, r24
    26d2:	90 e0       	ldi	r25, 0x00	; 0
    26d4:	82 95       	swap	r24
    26d6:	92 95       	swap	r25
    26d8:	90 7f       	andi	r25, 0xF0	; 240
    26da:	98 27       	eor	r25, r24
    26dc:	80 7f       	andi	r24, 0xF0	; 240
    26de:	98 27       	eor	r25, r24
    26e0:	68 2b       	or	r22, r24
    26e2:	eb 81       	ldd	r30, Y+3	; 0x03
    26e4:	fc 81       	ldd	r31, Y+4	; 0x04
    26e6:	40 81       	ld	r20, Z
    26e8:	51 81       	ldd	r21, Z+1	; 0x01
    26ea:	29 81       	ldd	r18, Y+1	; 0x01
    26ec:	3a 81       	ldd	r19, Y+2	; 0x02
    26ee:	c9 01       	movw	r24, r18
    26f0:	88 0f       	add	r24, r24
    26f2:	99 1f       	adc	r25, r25
    26f4:	88 0f       	add	r24, r24
    26f6:	99 1f       	adc	r25, r25
    26f8:	82 0f       	add	r24, r18
    26fa:	93 1f       	adc	r25, r19
    26fc:	fa 01       	movw	r30, r20
    26fe:	e8 0f       	add	r30, r24
    2700:	f9 1f       	adc	r31, r25
    2702:	83 81       	ldd	r24, Z+3	; 0x03
    2704:	88 2f       	mov	r24, r24
    2706:	90 e0       	ldi	r25, 0x00	; 0
    2708:	00 24       	eor	r0, r0
    270a:	96 95       	lsr	r25
    270c:	87 95       	ror	r24
    270e:	07 94       	ror	r0
    2710:	96 95       	lsr	r25
    2712:	87 95       	ror	r24
    2714:	07 94       	ror	r0
    2716:	98 2f       	mov	r25, r24
    2718:	80 2d       	mov	r24, r0
    271a:	86 2b       	or	r24, r22
    271c:	8c 93       	st	X, r24

		/* Defining OC1A / OC1B Pin As an Output */
		GPIO_setupPinDirection(PORTD_ID, PIN4_ID, PIN_OUTPUT);
    271e:	83 e0       	ldi	r24, 0x03	; 3
    2720:	64 e0       	ldi	r22, 0x04	; 4
    2722:	41 e0       	ldi	r20, 0x01	; 1
    2724:	0e 94 17 07 	call	0xe2e	; 0xe2e <GPIO_setupPinDirection>
		GPIO_setupPinDirection(PORTD_ID, PIN5_ID, PIN_OUTPUT);
    2728:	83 e0       	ldi	r24, 0x03	; 3
    272a:	65 e0       	ldi	r22, 0x05	; 5
    272c:	41 e0       	ldi	r20, 0x01	; 1
    272e:	0e 94 17 07 	call	0xe2e	; 0xe2e <GPIO_setupPinDirection>
    2732:	7a c2       	rjmp	.+1268   	; 0x2c28 <TIMER_init+0xb34>
		break;

		case    TIMER1_FAST_PWM_10BIT :
		/* Choose the Fast Pwm With 10bit Range */
		SET_BIT(TCCR1A, WGM10);
    2734:	af e4       	ldi	r26, 0x4F	; 79
    2736:	b0 e0       	ldi	r27, 0x00	; 0
    2738:	ef e4       	ldi	r30, 0x4F	; 79
    273a:	f0 e0       	ldi	r31, 0x00	; 0
    273c:	80 81       	ld	r24, Z
    273e:	81 60       	ori	r24, 0x01	; 1
    2740:	8c 93       	st	X, r24
		SET_BIT(TCCR1A, WGM11);
    2742:	af e4       	ldi	r26, 0x4F	; 79
    2744:	b0 e0       	ldi	r27, 0x00	; 0
    2746:	ef e4       	ldi	r30, 0x4F	; 79
    2748:	f0 e0       	ldi	r31, 0x00	; 0
    274a:	80 81       	ld	r24, Z
    274c:	82 60       	ori	r24, 0x02	; 2
    274e:	8c 93       	st	X, r24
		SET_BIT(TCCR1B, WGM12);
    2750:	ae e4       	ldi	r26, 0x4E	; 78
    2752:	b0 e0       	ldi	r27, 0x00	; 0
    2754:	ee e4       	ldi	r30, 0x4E	; 78
    2756:	f0 e0       	ldi	r31, 0x00	; 0
    2758:	80 81       	ld	r24, Z
    275a:	88 60       	ori	r24, 0x08	; 8
    275c:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B, WGM13);
    275e:	ae e4       	ldi	r26, 0x4E	; 78
    2760:	b0 e0       	ldi	r27, 0x00	; 0
    2762:	ee e4       	ldi	r30, 0x4E	; 78
    2764:	f0 e0       	ldi	r31, 0x00	; 0
    2766:	80 81       	ld	r24, Z
    2768:	8f 7e       	andi	r24, 0xEF	; 239
    276a:	8c 93       	st	X, r24

		/* Choose the PWM Working Mode */
		TCCR1A = (TCCR0 & 0x0F) | ((Config_Ptr->Units[i].PwmMode)<<COM1B0) | ((Config_Ptr->Units[i].PwmMode)<<COM1A0);
    276c:	af e4       	ldi	r26, 0x4F	; 79
    276e:	b0 e0       	ldi	r27, 0x00	; 0
    2770:	e3 e5       	ldi	r30, 0x53	; 83
    2772:	f0 e0       	ldi	r31, 0x00	; 0
    2774:	80 81       	ld	r24, Z
    2776:	68 2f       	mov	r22, r24
    2778:	6f 70       	andi	r22, 0x0F	; 15
    277a:	eb 81       	ldd	r30, Y+3	; 0x03
    277c:	fc 81       	ldd	r31, Y+4	; 0x04
    277e:	40 81       	ld	r20, Z
    2780:	51 81       	ldd	r21, Z+1	; 0x01
    2782:	29 81       	ldd	r18, Y+1	; 0x01
    2784:	3a 81       	ldd	r19, Y+2	; 0x02
    2786:	c9 01       	movw	r24, r18
    2788:	88 0f       	add	r24, r24
    278a:	99 1f       	adc	r25, r25
    278c:	88 0f       	add	r24, r24
    278e:	99 1f       	adc	r25, r25
    2790:	82 0f       	add	r24, r18
    2792:	93 1f       	adc	r25, r19
    2794:	fa 01       	movw	r30, r20
    2796:	e8 0f       	add	r30, r24
    2798:	f9 1f       	adc	r31, r25
    279a:	83 81       	ldd	r24, Z+3	; 0x03
    279c:	88 2f       	mov	r24, r24
    279e:	90 e0       	ldi	r25, 0x00	; 0
    27a0:	82 95       	swap	r24
    27a2:	92 95       	swap	r25
    27a4:	90 7f       	andi	r25, 0xF0	; 240
    27a6:	98 27       	eor	r25, r24
    27a8:	80 7f       	andi	r24, 0xF0	; 240
    27aa:	98 27       	eor	r25, r24
    27ac:	68 2b       	or	r22, r24
    27ae:	eb 81       	ldd	r30, Y+3	; 0x03
    27b0:	fc 81       	ldd	r31, Y+4	; 0x04
    27b2:	40 81       	ld	r20, Z
    27b4:	51 81       	ldd	r21, Z+1	; 0x01
    27b6:	29 81       	ldd	r18, Y+1	; 0x01
    27b8:	3a 81       	ldd	r19, Y+2	; 0x02
    27ba:	c9 01       	movw	r24, r18
    27bc:	88 0f       	add	r24, r24
    27be:	99 1f       	adc	r25, r25
    27c0:	88 0f       	add	r24, r24
    27c2:	99 1f       	adc	r25, r25
    27c4:	82 0f       	add	r24, r18
    27c6:	93 1f       	adc	r25, r19
    27c8:	fa 01       	movw	r30, r20
    27ca:	e8 0f       	add	r30, r24
    27cc:	f9 1f       	adc	r31, r25
    27ce:	83 81       	ldd	r24, Z+3	; 0x03
    27d0:	88 2f       	mov	r24, r24
    27d2:	90 e0       	ldi	r25, 0x00	; 0
    27d4:	00 24       	eor	r0, r0
    27d6:	96 95       	lsr	r25
    27d8:	87 95       	ror	r24
    27da:	07 94       	ror	r0
    27dc:	96 95       	lsr	r25
    27de:	87 95       	ror	r24
    27e0:	07 94       	ror	r0
    27e2:	98 2f       	mov	r25, r24
    27e4:	80 2d       	mov	r24, r0
    27e6:	86 2b       	or	r24, r22
    27e8:	8c 93       	st	X, r24

		/* Defining OC1A / OC1B Pin As an Output */
		GPIO_setupPinDirection(PORTD_ID, PIN4_ID, PIN_OUTPUT);
    27ea:	83 e0       	ldi	r24, 0x03	; 3
    27ec:	64 e0       	ldi	r22, 0x04	; 4
    27ee:	41 e0       	ldi	r20, 0x01	; 1
    27f0:	0e 94 17 07 	call	0xe2e	; 0xe2e <GPIO_setupPinDirection>
		GPIO_setupPinDirection(PORTD_ID, PIN5_ID, PIN_OUTPUT);
    27f4:	83 e0       	ldi	r24, 0x03	; 3
    27f6:	65 e0       	ldi	r22, 0x05	; 5
    27f8:	41 e0       	ldi	r20, 0x01	; 1
    27fa:	0e 94 17 07 	call	0xe2e	; 0xe2e <GPIO_setupPinDirection>
    27fe:	14 c2       	rjmp	.+1064   	; 0x2c28 <TIMER_init+0xb34>
		break;

		case    TIMER1_CTC_ICR :
		/* Choose the CTC Mode With ICR */
		CLR_BIT(TCCR1A, WGM10);
    2800:	af e4       	ldi	r26, 0x4F	; 79
    2802:	b0 e0       	ldi	r27, 0x00	; 0
    2804:	ef e4       	ldi	r30, 0x4F	; 79
    2806:	f0 e0       	ldi	r31, 0x00	; 0
    2808:	80 81       	ld	r24, Z
    280a:	8e 7f       	andi	r24, 0xFE	; 254
    280c:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A, WGM11);
    280e:	af e4       	ldi	r26, 0x4F	; 79
    2810:	b0 e0       	ldi	r27, 0x00	; 0
    2812:	ef e4       	ldi	r30, 0x4F	; 79
    2814:	f0 e0       	ldi	r31, 0x00	; 0
    2816:	80 81       	ld	r24, Z
    2818:	8d 7f       	andi	r24, 0xFD	; 253
    281a:	8c 93       	st	X, r24
		SET_BIT(TCCR1B, WGM12);
    281c:	ae e4       	ldi	r26, 0x4E	; 78
    281e:	b0 e0       	ldi	r27, 0x00	; 0
    2820:	ee e4       	ldi	r30, 0x4E	; 78
    2822:	f0 e0       	ldi	r31, 0x00	; 0
    2824:	80 81       	ld	r24, Z
    2826:	88 60       	ori	r24, 0x08	; 8
    2828:	8c 93       	st	X, r24
		SET_BIT(TCCR1B, WGM13);
    282a:	ae e4       	ldi	r26, 0x4E	; 78
    282c:	b0 e0       	ldi	r27, 0x00	; 0
    282e:	ee e4       	ldi	r30, 0x4E	; 78
    2830:	f0 e0       	ldi	r31, 0x00	; 0
    2832:	80 81       	ld	r24, Z
    2834:	80 61       	ori	r24, 0x10	; 16
    2836:	8c 93       	st	X, r24

		/* Enabling the FOC1A & FOC1B To Choose Non Pwm Mode */
		SET_BIT(TCCR1A, FOC1A);
    2838:	af e4       	ldi	r26, 0x4F	; 79
    283a:	b0 e0       	ldi	r27, 0x00	; 0
    283c:	ef e4       	ldi	r30, 0x4F	; 79
    283e:	f0 e0       	ldi	r31, 0x00	; 0
    2840:	80 81       	ld	r24, Z
    2842:	88 60       	ori	r24, 0x08	; 8
    2844:	8c 93       	st	X, r24
		SET_BIT(TCCR1A, FOC1B);
    2846:	af e4       	ldi	r26, 0x4F	; 79
    2848:	b0 e0       	ldi	r27, 0x00	; 0
    284a:	ef e4       	ldi	r30, 0x4F	; 79
    284c:	f0 e0       	ldi	r31, 0x00	; 0
    284e:	80 81       	ld	r24, Z
    2850:	84 60       	ori	r24, 0x04	; 4
    2852:	8c 93       	st	X, r24

		/* Enabling the Overflow Interrupt Enable */
		TIMSK = (TIMSK & 0xE3)  | (1 << OCIE1A);
    2854:	a9 e5       	ldi	r26, 0x59	; 89
    2856:	b0 e0       	ldi	r27, 0x00	; 0
    2858:	e9 e5       	ldi	r30, 0x59	; 89
    285a:	f0 e0       	ldi	r31, 0x00	; 0
    285c:	80 81       	ld	r24, Z
    285e:	83 7e       	andi	r24, 0xE3	; 227
    2860:	80 61       	ori	r24, 0x10	; 16
    2862:	8c 93       	st	X, r24

		/* Choose the OC1A , OC1B State in CTC */
		TCCR1A = (TCCR0 & 0x0F) | ((Config_Ptr->Units[i].CtcMode)<<COM1B0) | ((Config_Ptr->Units[i].CtcMode)<<COM1A0);
    2864:	af e4       	ldi	r26, 0x4F	; 79
    2866:	b0 e0       	ldi	r27, 0x00	; 0
    2868:	e3 e5       	ldi	r30, 0x53	; 83
    286a:	f0 e0       	ldi	r31, 0x00	; 0
    286c:	80 81       	ld	r24, Z
    286e:	68 2f       	mov	r22, r24
    2870:	6f 70       	andi	r22, 0x0F	; 15
    2872:	eb 81       	ldd	r30, Y+3	; 0x03
    2874:	fc 81       	ldd	r31, Y+4	; 0x04
    2876:	40 81       	ld	r20, Z
    2878:	51 81       	ldd	r21, Z+1	; 0x01
    287a:	29 81       	ldd	r18, Y+1	; 0x01
    287c:	3a 81       	ldd	r19, Y+2	; 0x02
    287e:	c9 01       	movw	r24, r18
    2880:	88 0f       	add	r24, r24
    2882:	99 1f       	adc	r25, r25
    2884:	88 0f       	add	r24, r24
    2886:	99 1f       	adc	r25, r25
    2888:	82 0f       	add	r24, r18
    288a:	93 1f       	adc	r25, r19
    288c:	fa 01       	movw	r30, r20
    288e:	e8 0f       	add	r30, r24
    2890:	f9 1f       	adc	r31, r25
    2892:	84 81       	ldd	r24, Z+4	; 0x04
    2894:	88 2f       	mov	r24, r24
    2896:	90 e0       	ldi	r25, 0x00	; 0
    2898:	82 95       	swap	r24
    289a:	92 95       	swap	r25
    289c:	90 7f       	andi	r25, 0xF0	; 240
    289e:	98 27       	eor	r25, r24
    28a0:	80 7f       	andi	r24, 0xF0	; 240
    28a2:	98 27       	eor	r25, r24
    28a4:	68 2b       	or	r22, r24
    28a6:	eb 81       	ldd	r30, Y+3	; 0x03
    28a8:	fc 81       	ldd	r31, Y+4	; 0x04
    28aa:	40 81       	ld	r20, Z
    28ac:	51 81       	ldd	r21, Z+1	; 0x01
    28ae:	29 81       	ldd	r18, Y+1	; 0x01
    28b0:	3a 81       	ldd	r19, Y+2	; 0x02
    28b2:	c9 01       	movw	r24, r18
    28b4:	88 0f       	add	r24, r24
    28b6:	99 1f       	adc	r25, r25
    28b8:	88 0f       	add	r24, r24
    28ba:	99 1f       	adc	r25, r25
    28bc:	82 0f       	add	r24, r18
    28be:	93 1f       	adc	r25, r19
    28c0:	fa 01       	movw	r30, r20
    28c2:	e8 0f       	add	r30, r24
    28c4:	f9 1f       	adc	r31, r25
    28c6:	84 81       	ldd	r24, Z+4	; 0x04
    28c8:	88 2f       	mov	r24, r24
    28ca:	90 e0       	ldi	r25, 0x00	; 0
    28cc:	00 24       	eor	r0, r0
    28ce:	96 95       	lsr	r25
    28d0:	87 95       	ror	r24
    28d2:	07 94       	ror	r0
    28d4:	96 95       	lsr	r25
    28d6:	87 95       	ror	r24
    28d8:	07 94       	ror	r0
    28da:	98 2f       	mov	r25, r24
    28dc:	80 2d       	mov	r24, r0
    28de:	86 2b       	or	r24, r22
    28e0:	8c 93       	st	X, r24
    28e2:	a2 c1       	rjmp	.+836    	; 0x2c28 <TIMER_init+0xb34>
		break;

		case    TIMER1_FAST_PWM_ICR	 :
		/* Choose the Fast Pwm With ICR REG */
		CLR_BIT(TCCR1A, WGM10);
    28e4:	af e4       	ldi	r26, 0x4F	; 79
    28e6:	b0 e0       	ldi	r27, 0x00	; 0
    28e8:	ef e4       	ldi	r30, 0x4F	; 79
    28ea:	f0 e0       	ldi	r31, 0x00	; 0
    28ec:	80 81       	ld	r24, Z
    28ee:	8e 7f       	andi	r24, 0xFE	; 254
    28f0:	8c 93       	st	X, r24
		SET_BIT(TCCR1A, WGM11);
    28f2:	af e4       	ldi	r26, 0x4F	; 79
    28f4:	b0 e0       	ldi	r27, 0x00	; 0
    28f6:	ef e4       	ldi	r30, 0x4F	; 79
    28f8:	f0 e0       	ldi	r31, 0x00	; 0
    28fa:	80 81       	ld	r24, Z
    28fc:	82 60       	ori	r24, 0x02	; 2
    28fe:	8c 93       	st	X, r24
		SET_BIT(TCCR1B, WGM12);
    2900:	ae e4       	ldi	r26, 0x4E	; 78
    2902:	b0 e0       	ldi	r27, 0x00	; 0
    2904:	ee e4       	ldi	r30, 0x4E	; 78
    2906:	f0 e0       	ldi	r31, 0x00	; 0
    2908:	80 81       	ld	r24, Z
    290a:	88 60       	ori	r24, 0x08	; 8
    290c:	8c 93       	st	X, r24
		SET_BIT(TCCR1B, WGM13);
    290e:	ae e4       	ldi	r26, 0x4E	; 78
    2910:	b0 e0       	ldi	r27, 0x00	; 0
    2912:	ee e4       	ldi	r30, 0x4E	; 78
    2914:	f0 e0       	ldi	r31, 0x00	; 0
    2916:	80 81       	ld	r24, Z
    2918:	80 61       	ori	r24, 0x10	; 16
    291a:	8c 93       	st	X, r24

		/* Choose the PWM Working Mode */
		TCCR1A = (TCCR0 & 0x0F) | ((Config_Ptr->Units[i].PwmMode)<<COM1B0) | ((Config_Ptr->Units[i].PwmMode)<<COM1A0);
    291c:	af e4       	ldi	r26, 0x4F	; 79
    291e:	b0 e0       	ldi	r27, 0x00	; 0
    2920:	e3 e5       	ldi	r30, 0x53	; 83
    2922:	f0 e0       	ldi	r31, 0x00	; 0
    2924:	80 81       	ld	r24, Z
    2926:	68 2f       	mov	r22, r24
    2928:	6f 70       	andi	r22, 0x0F	; 15
    292a:	eb 81       	ldd	r30, Y+3	; 0x03
    292c:	fc 81       	ldd	r31, Y+4	; 0x04
    292e:	40 81       	ld	r20, Z
    2930:	51 81       	ldd	r21, Z+1	; 0x01
    2932:	29 81       	ldd	r18, Y+1	; 0x01
    2934:	3a 81       	ldd	r19, Y+2	; 0x02
    2936:	c9 01       	movw	r24, r18
    2938:	88 0f       	add	r24, r24
    293a:	99 1f       	adc	r25, r25
    293c:	88 0f       	add	r24, r24
    293e:	99 1f       	adc	r25, r25
    2940:	82 0f       	add	r24, r18
    2942:	93 1f       	adc	r25, r19
    2944:	fa 01       	movw	r30, r20
    2946:	e8 0f       	add	r30, r24
    2948:	f9 1f       	adc	r31, r25
    294a:	83 81       	ldd	r24, Z+3	; 0x03
    294c:	88 2f       	mov	r24, r24
    294e:	90 e0       	ldi	r25, 0x00	; 0
    2950:	82 95       	swap	r24
    2952:	92 95       	swap	r25
    2954:	90 7f       	andi	r25, 0xF0	; 240
    2956:	98 27       	eor	r25, r24
    2958:	80 7f       	andi	r24, 0xF0	; 240
    295a:	98 27       	eor	r25, r24
    295c:	68 2b       	or	r22, r24
    295e:	eb 81       	ldd	r30, Y+3	; 0x03
    2960:	fc 81       	ldd	r31, Y+4	; 0x04
    2962:	40 81       	ld	r20, Z
    2964:	51 81       	ldd	r21, Z+1	; 0x01
    2966:	29 81       	ldd	r18, Y+1	; 0x01
    2968:	3a 81       	ldd	r19, Y+2	; 0x02
    296a:	c9 01       	movw	r24, r18
    296c:	88 0f       	add	r24, r24
    296e:	99 1f       	adc	r25, r25
    2970:	88 0f       	add	r24, r24
    2972:	99 1f       	adc	r25, r25
    2974:	82 0f       	add	r24, r18
    2976:	93 1f       	adc	r25, r19
    2978:	fa 01       	movw	r30, r20
    297a:	e8 0f       	add	r30, r24
    297c:	f9 1f       	adc	r31, r25
    297e:	83 81       	ldd	r24, Z+3	; 0x03
    2980:	88 2f       	mov	r24, r24
    2982:	90 e0       	ldi	r25, 0x00	; 0
    2984:	00 24       	eor	r0, r0
    2986:	96 95       	lsr	r25
    2988:	87 95       	ror	r24
    298a:	07 94       	ror	r0
    298c:	96 95       	lsr	r25
    298e:	87 95       	ror	r24
    2990:	07 94       	ror	r0
    2992:	98 2f       	mov	r25, r24
    2994:	80 2d       	mov	r24, r0
    2996:	86 2b       	or	r24, r22
    2998:	8c 93       	st	X, r24

		/* Defining ICR Pin As an Output */
		GPIO_setupPinDirection(PORTD_ID, PIN6_ID, PIN_OUTPUT);
    299a:	83 e0       	ldi	r24, 0x03	; 3
    299c:	66 e0       	ldi	r22, 0x06	; 6
    299e:	41 e0       	ldi	r20, 0x01	; 1
    29a0:	0e 94 17 07 	call	0xe2e	; 0xe2e <GPIO_setupPinDirection>
    29a4:	41 c1       	rjmp	.+642    	; 0x2c28 <TIMER_init+0xb34>
		break;

		case	 TIMER1_FAST_PWM_OCR :
		/* Choose the Fast Pwm With 0CR REG */
		SET_BIT(TCCR1A, WGM10);
    29a6:	af e4       	ldi	r26, 0x4F	; 79
    29a8:	b0 e0       	ldi	r27, 0x00	; 0
    29aa:	ef e4       	ldi	r30, 0x4F	; 79
    29ac:	f0 e0       	ldi	r31, 0x00	; 0
    29ae:	80 81       	ld	r24, Z
    29b0:	81 60       	ori	r24, 0x01	; 1
    29b2:	8c 93       	st	X, r24
		SET_BIT(TCCR1A, WGM11);
    29b4:	af e4       	ldi	r26, 0x4F	; 79
    29b6:	b0 e0       	ldi	r27, 0x00	; 0
    29b8:	ef e4       	ldi	r30, 0x4F	; 79
    29ba:	f0 e0       	ldi	r31, 0x00	; 0
    29bc:	80 81       	ld	r24, Z
    29be:	82 60       	ori	r24, 0x02	; 2
    29c0:	8c 93       	st	X, r24
		SET_BIT(TCCR1B, WGM12);
    29c2:	ae e4       	ldi	r26, 0x4E	; 78
    29c4:	b0 e0       	ldi	r27, 0x00	; 0
    29c6:	ee e4       	ldi	r30, 0x4E	; 78
    29c8:	f0 e0       	ldi	r31, 0x00	; 0
    29ca:	80 81       	ld	r24, Z
    29cc:	88 60       	ori	r24, 0x08	; 8
    29ce:	8c 93       	st	X, r24
		SET_BIT(TCCR1B, WGM13);
    29d0:	ae e4       	ldi	r26, 0x4E	; 78
    29d2:	b0 e0       	ldi	r27, 0x00	; 0
    29d4:	ee e4       	ldi	r30, 0x4E	; 78
    29d6:	f0 e0       	ldi	r31, 0x00	; 0
    29d8:	80 81       	ld	r24, Z
    29da:	80 61       	ori	r24, 0x10	; 16
    29dc:	8c 93       	st	X, r24

		/* Choose the PWM Working Mode */
		TCCR1A = (TCCR0 & 0x0F) | ((Config_Ptr->Units[i].PwmMode)<<COM1B0) | ((Config_Ptr->Units[i].PwmMode)<<COM1A0);
    29de:	af e4       	ldi	r26, 0x4F	; 79
    29e0:	b0 e0       	ldi	r27, 0x00	; 0
    29e2:	e3 e5       	ldi	r30, 0x53	; 83
    29e4:	f0 e0       	ldi	r31, 0x00	; 0
    29e6:	80 81       	ld	r24, Z
    29e8:	68 2f       	mov	r22, r24
    29ea:	6f 70       	andi	r22, 0x0F	; 15
    29ec:	eb 81       	ldd	r30, Y+3	; 0x03
    29ee:	fc 81       	ldd	r31, Y+4	; 0x04
    29f0:	40 81       	ld	r20, Z
    29f2:	51 81       	ldd	r21, Z+1	; 0x01
    29f4:	29 81       	ldd	r18, Y+1	; 0x01
    29f6:	3a 81       	ldd	r19, Y+2	; 0x02
    29f8:	c9 01       	movw	r24, r18
    29fa:	88 0f       	add	r24, r24
    29fc:	99 1f       	adc	r25, r25
    29fe:	88 0f       	add	r24, r24
    2a00:	99 1f       	adc	r25, r25
    2a02:	82 0f       	add	r24, r18
    2a04:	93 1f       	adc	r25, r19
    2a06:	fa 01       	movw	r30, r20
    2a08:	e8 0f       	add	r30, r24
    2a0a:	f9 1f       	adc	r31, r25
    2a0c:	83 81       	ldd	r24, Z+3	; 0x03
    2a0e:	88 2f       	mov	r24, r24
    2a10:	90 e0       	ldi	r25, 0x00	; 0
    2a12:	82 95       	swap	r24
    2a14:	92 95       	swap	r25
    2a16:	90 7f       	andi	r25, 0xF0	; 240
    2a18:	98 27       	eor	r25, r24
    2a1a:	80 7f       	andi	r24, 0xF0	; 240
    2a1c:	98 27       	eor	r25, r24
    2a1e:	68 2b       	or	r22, r24
    2a20:	eb 81       	ldd	r30, Y+3	; 0x03
    2a22:	fc 81       	ldd	r31, Y+4	; 0x04
    2a24:	40 81       	ld	r20, Z
    2a26:	51 81       	ldd	r21, Z+1	; 0x01
    2a28:	29 81       	ldd	r18, Y+1	; 0x01
    2a2a:	3a 81       	ldd	r19, Y+2	; 0x02
    2a2c:	c9 01       	movw	r24, r18
    2a2e:	88 0f       	add	r24, r24
    2a30:	99 1f       	adc	r25, r25
    2a32:	88 0f       	add	r24, r24
    2a34:	99 1f       	adc	r25, r25
    2a36:	82 0f       	add	r24, r18
    2a38:	93 1f       	adc	r25, r19
    2a3a:	fa 01       	movw	r30, r20
    2a3c:	e8 0f       	add	r30, r24
    2a3e:	f9 1f       	adc	r31, r25
    2a40:	83 81       	ldd	r24, Z+3	; 0x03
    2a42:	88 2f       	mov	r24, r24
    2a44:	90 e0       	ldi	r25, 0x00	; 0
    2a46:	00 24       	eor	r0, r0
    2a48:	96 95       	lsr	r25
    2a4a:	87 95       	ror	r24
    2a4c:	07 94       	ror	r0
    2a4e:	96 95       	lsr	r25
    2a50:	87 95       	ror	r24
    2a52:	07 94       	ror	r0
    2a54:	98 2f       	mov	r25, r24
    2a56:	80 2d       	mov	r24, r0
    2a58:	86 2b       	or	r24, r22
    2a5a:	8c 93       	st	X, r24

		/* Defining OC1A / OC1B Pin As an Output */
		GPIO_setupPinDirection(PORTD_ID, PIN4_ID, PIN_OUTPUT);
    2a5c:	83 e0       	ldi	r24, 0x03	; 3
    2a5e:	64 e0       	ldi	r22, 0x04	; 4
    2a60:	41 e0       	ldi	r20, 0x01	; 1
    2a62:	0e 94 17 07 	call	0xe2e	; 0xe2e <GPIO_setupPinDirection>
		GPIO_setupPinDirection(PORTD_ID, PIN5_ID, PIN_OUTPUT);
    2a66:	83 e0       	ldi	r24, 0x03	; 3
    2a68:	65 e0       	ldi	r22, 0x05	; 5
    2a6a:	41 e0       	ldi	r20, 0x01	; 1
    2a6c:	0e 94 17 07 	call	0xe2e	; 0xe2e <GPIO_setupPinDirection>
    2a70:	db c0       	rjmp	.+438    	; 0x2c28 <TIMER_init+0xb34>
		}
		break;

		/*Timer2 initiaillitation*/
	case TIMER2:
		TCCR2 |= Config_Ptr->Units[i].Prescaler;
    2a72:	a5 e4       	ldi	r26, 0x45	; 69
    2a74:	b0 e0       	ldi	r27, 0x00	; 0
    2a76:	e5 e4       	ldi	r30, 0x45	; 69
    2a78:	f0 e0       	ldi	r31, 0x00	; 0
    2a7a:	60 81       	ld	r22, Z
    2a7c:	eb 81       	ldd	r30, Y+3	; 0x03
    2a7e:	fc 81       	ldd	r31, Y+4	; 0x04
    2a80:	40 81       	ld	r20, Z
    2a82:	51 81       	ldd	r21, Z+1	; 0x01
    2a84:	29 81       	ldd	r18, Y+1	; 0x01
    2a86:	3a 81       	ldd	r19, Y+2	; 0x02
    2a88:	c9 01       	movw	r24, r18
    2a8a:	88 0f       	add	r24, r24
    2a8c:	99 1f       	adc	r25, r25
    2a8e:	88 0f       	add	r24, r24
    2a90:	99 1f       	adc	r25, r25
    2a92:	82 0f       	add	r24, r18
    2a94:	93 1f       	adc	r25, r19
    2a96:	fa 01       	movw	r30, r20
    2a98:	e8 0f       	add	r30, r24
    2a9a:	f9 1f       	adc	r31, r25
    2a9c:	81 81       	ldd	r24, Z+1	; 0x01
    2a9e:	86 2b       	or	r24, r22
    2aa0:	8c 93       	st	X, r24
		switch(Config_Ptr->Units[i].Mode)
    2aa2:	eb 81       	ldd	r30, Y+3	; 0x03
    2aa4:	fc 81       	ldd	r31, Y+4	; 0x04
    2aa6:	40 81       	ld	r20, Z
    2aa8:	51 81       	ldd	r21, Z+1	; 0x01
    2aaa:	29 81       	ldd	r18, Y+1	; 0x01
    2aac:	3a 81       	ldd	r19, Y+2	; 0x02
    2aae:	c9 01       	movw	r24, r18
    2ab0:	88 0f       	add	r24, r24
    2ab2:	99 1f       	adc	r25, r25
    2ab4:	88 0f       	add	r24, r24
    2ab6:	99 1f       	adc	r25, r25
    2ab8:	82 0f       	add	r24, r18
    2aba:	93 1f       	adc	r25, r19
    2abc:	fa 01       	movw	r30, r20
    2abe:	e8 0f       	add	r30, r24
    2ac0:	f9 1f       	adc	r31, r25
    2ac2:	82 81       	ldd	r24, Z+2	; 0x02
    2ac4:	28 2f       	mov	r18, r24
    2ac6:	30 e0       	ldi	r19, 0x00	; 0
    2ac8:	3e 83       	std	Y+6, r19	; 0x06
    2aca:	2d 83       	std	Y+5, r18	; 0x05
    2acc:	8d 81       	ldd	r24, Y+5	; 0x05
    2ace:	9e 81       	ldd	r25, Y+6	; 0x06
    2ad0:	81 30       	cpi	r24, 0x01	; 1
    2ad2:	91 05       	cpc	r25, r1
    2ad4:	09 f4       	brne	.+2      	; 0x2ad8 <TIMER_init+0x9e4>
    2ad6:	95 c0       	rjmp	.+298    	; 0x2c02 <TIMER_init+0xb0e>
    2ad8:	2d 81       	ldd	r18, Y+5	; 0x05
    2ada:	3e 81       	ldd	r19, Y+6	; 0x06
    2adc:	22 30       	cpi	r18, 0x02	; 2
    2ade:	31 05       	cpc	r19, r1
    2ae0:	2c f4       	brge	.+10     	; 0x2aec <TIMER_init+0x9f8>
    2ae2:	8d 81       	ldd	r24, Y+5	; 0x05
    2ae4:	9e 81       	ldd	r25, Y+6	; 0x06
    2ae6:	00 97       	sbiw	r24, 0x00	; 0
    2ae8:	61 f0       	breq	.+24     	; 0x2b02 <TIMER_init+0xa0e>
    2aea:	9e c0       	rjmp	.+316    	; 0x2c28 <TIMER_init+0xb34>
    2aec:	2d 81       	ldd	r18, Y+5	; 0x05
    2aee:	3e 81       	ldd	r19, Y+6	; 0x06
    2af0:	22 30       	cpi	r18, 0x02	; 2
    2af2:	31 05       	cpc	r19, r1
    2af4:	21 f1       	breq	.+72     	; 0x2b3e <TIMER_init+0xa4a>
    2af6:	8d 81       	ldd	r24, Y+5	; 0x05
    2af8:	9e 81       	ldd	r25, Y+6	; 0x06
    2afa:	83 30       	cpi	r24, 0x03	; 3
    2afc:	91 05       	cpc	r25, r1
    2afe:	e9 f1       	breq	.+122    	; 0x2b7a <TIMER_init+0xa86>
    2b00:	93 c0       	rjmp	.+294    	; 0x2c28 <TIMER_init+0xb34>
			{
			case TIMER2_OVF:
			/* Choose the Normal Mode  */
			CLR_BIT(TCCR2, WGM20);
    2b02:	a5 e4       	ldi	r26, 0x45	; 69
    2b04:	b0 e0       	ldi	r27, 0x00	; 0
    2b06:	e5 e4       	ldi	r30, 0x45	; 69
    2b08:	f0 e0       	ldi	r31, 0x00	; 0
    2b0a:	80 81       	ld	r24, Z
    2b0c:	8f 7b       	andi	r24, 0xBF	; 191
    2b0e:	8c 93       	st	X, r24
			CLR_BIT(TCCR2, WGM21);
    2b10:	a5 e4       	ldi	r26, 0x45	; 69
    2b12:	b0 e0       	ldi	r27, 0x00	; 0
    2b14:	e5 e4       	ldi	r30, 0x45	; 69
    2b16:	f0 e0       	ldi	r31, 0x00	; 0
    2b18:	80 81       	ld	r24, Z
    2b1a:	87 7f       	andi	r24, 0xF7	; 247
    2b1c:	8c 93       	st	X, r24

			/* Enabling the Overflow Interrupt Enable */
			TIMSK = (TIMSK & 0x3F) | (1 << TOIE2);
    2b1e:	a9 e5       	ldi	r26, 0x59	; 89
    2b20:	b0 e0       	ldi	r27, 0x00	; 0
    2b22:	e9 e5       	ldi	r30, 0x59	; 89
    2b24:	f0 e0       	ldi	r31, 0x00	; 0
    2b26:	80 81       	ld	r24, Z
    2b28:	8f 73       	andi	r24, 0x3F	; 63
    2b2a:	80 64       	ori	r24, 0x40	; 64
    2b2c:	8c 93       	st	X, r24
			/* Enabling the FOC2 As To Choose Non Pwm Mode */
			SET_BIT(TCCR2, FOC2);
    2b2e:	a5 e4       	ldi	r26, 0x45	; 69
    2b30:	b0 e0       	ldi	r27, 0x00	; 0
    2b32:	e5 e4       	ldi	r30, 0x45	; 69
    2b34:	f0 e0       	ldi	r31, 0x00	; 0
    2b36:	80 81       	ld	r24, Z
    2b38:	80 68       	ori	r24, 0x80	; 128
    2b3a:	8c 93       	st	X, r24
    2b3c:	75 c0       	rjmp	.+234    	; 0x2c28 <TIMER_init+0xb34>
			break;

			case TIMER2_CTC:
			/* Choose the Compare Match Mode */
			CLR_BIT(TCCR2, WGM20);
    2b3e:	a5 e4       	ldi	r26, 0x45	; 69
    2b40:	b0 e0       	ldi	r27, 0x00	; 0
    2b42:	e5 e4       	ldi	r30, 0x45	; 69
    2b44:	f0 e0       	ldi	r31, 0x00	; 0
    2b46:	80 81       	ld	r24, Z
    2b48:	8f 7b       	andi	r24, 0xBF	; 191
    2b4a:	8c 93       	st	X, r24
			SET_BIT(TCCR2, WGM21);
    2b4c:	a5 e4       	ldi	r26, 0x45	; 69
    2b4e:	b0 e0       	ldi	r27, 0x00	; 0
    2b50:	e5 e4       	ldi	r30, 0x45	; 69
    2b52:	f0 e0       	ldi	r31, 0x00	; 0
    2b54:	80 81       	ld	r24, Z
    2b56:	88 60       	ori	r24, 0x08	; 8
    2b58:	8c 93       	st	X, r24

			/* Enabling the Overflow Interrupt Enable */
			TIMSK = (TIMSK & 0x3F) | (1 << OCIE2);
    2b5a:	a9 e5       	ldi	r26, 0x59	; 89
    2b5c:	b0 e0       	ldi	r27, 0x00	; 0
    2b5e:	e9 e5       	ldi	r30, 0x59	; 89
    2b60:	f0 e0       	ldi	r31, 0x00	; 0
    2b62:	80 81       	ld	r24, Z
    2b64:	8f 73       	andi	r24, 0x3F	; 63
    2b66:	80 68       	ori	r24, 0x80	; 128
    2b68:	8c 93       	st	X, r24
			/* Enabling the FOC2 As To Choose Non Pwm Mode */
			SET_BIT(TCCR2, FOC2);
    2b6a:	a5 e4       	ldi	r26, 0x45	; 69
    2b6c:	b0 e0       	ldi	r27, 0x00	; 0
    2b6e:	e5 e4       	ldi	r30, 0x45	; 69
    2b70:	f0 e0       	ldi	r31, 0x00	; 0
    2b72:	80 81       	ld	r24, Z
    2b74:	80 68       	ori	r24, 0x80	; 128
    2b76:	8c 93       	st	X, r24
    2b78:	57 c0       	rjmp	.+174    	; 0x2c28 <TIMER_init+0xb34>
			break;

			case TIMER2_FAST_PWM :
			/* Choose the FAST PWM */
			SET_BIT(TCCR2, WGM20);
    2b7a:	a5 e4       	ldi	r26, 0x45	; 69
    2b7c:	b0 e0       	ldi	r27, 0x00	; 0
    2b7e:	e5 e4       	ldi	r30, 0x45	; 69
    2b80:	f0 e0       	ldi	r31, 0x00	; 0
    2b82:	80 81       	ld	r24, Z
    2b84:	80 64       	ori	r24, 0x40	; 64
    2b86:	8c 93       	st	X, r24
			SET_BIT(TCCR2, WGM21);
    2b88:	a5 e4       	ldi	r26, 0x45	; 69
    2b8a:	b0 e0       	ldi	r27, 0x00	; 0
    2b8c:	e5 e4       	ldi	r30, 0x45	; 69
    2b8e:	f0 e0       	ldi	r31, 0x00	; 0
    2b90:	80 81       	ld	r24, Z
    2b92:	88 60       	ori	r24, 0x08	; 8
    2b94:	8c 93       	st	X, r24

			/* Choose the Fast Pwm Working Mode */
			TCCR2 = (TCCR2 & 0xCF) | ((Config_Ptr->Units[i].PwmMode)<<COM20) ;
    2b96:	a5 e4       	ldi	r26, 0x45	; 69
    2b98:	b0 e0       	ldi	r27, 0x00	; 0
    2b9a:	e5 e4       	ldi	r30, 0x45	; 69
    2b9c:	f0 e0       	ldi	r31, 0x00	; 0
    2b9e:	80 81       	ld	r24, Z
    2ba0:	68 2f       	mov	r22, r24
    2ba2:	6f 7c       	andi	r22, 0xCF	; 207
    2ba4:	eb 81       	ldd	r30, Y+3	; 0x03
    2ba6:	fc 81       	ldd	r31, Y+4	; 0x04
    2ba8:	40 81       	ld	r20, Z
    2baa:	51 81       	ldd	r21, Z+1	; 0x01
    2bac:	29 81       	ldd	r18, Y+1	; 0x01
    2bae:	3a 81       	ldd	r19, Y+2	; 0x02
    2bb0:	c9 01       	movw	r24, r18
    2bb2:	88 0f       	add	r24, r24
    2bb4:	99 1f       	adc	r25, r25
    2bb6:	88 0f       	add	r24, r24
    2bb8:	99 1f       	adc	r25, r25
    2bba:	82 0f       	add	r24, r18
    2bbc:	93 1f       	adc	r25, r19
    2bbe:	fa 01       	movw	r30, r20
    2bc0:	e8 0f       	add	r30, r24
    2bc2:	f9 1f       	adc	r31, r25
    2bc4:	83 81       	ldd	r24, Z+3	; 0x03
    2bc6:	88 2f       	mov	r24, r24
    2bc8:	90 e0       	ldi	r25, 0x00	; 0
    2bca:	82 95       	swap	r24
    2bcc:	92 95       	swap	r25
    2bce:	90 7f       	andi	r25, 0xF0	; 240
    2bd0:	98 27       	eor	r25, r24
    2bd2:	80 7f       	andi	r24, 0xF0	; 240
    2bd4:	98 27       	eor	r25, r24
    2bd6:	86 2b       	or	r24, r22
    2bd8:	8c 93       	st	X, r24

			/* Disabling the CTC , Overflow Interrupt Enable */
			TIMSK = (TIMSK & 0x3F);
    2bda:	a9 e5       	ldi	r26, 0x59	; 89
    2bdc:	b0 e0       	ldi	r27, 0x00	; 0
    2bde:	e9 e5       	ldi	r30, 0x59	; 89
    2be0:	f0 e0       	ldi	r31, 0x00	; 0
    2be2:	80 81       	ld	r24, Z
    2be4:	8f 73       	andi	r24, 0x3F	; 63
    2be6:	8c 93       	st	X, r24

			/* Disabling the FOCO As i Choose a Pwm Mode */
			CLR_BIT(TCCR2, FOC2);
    2be8:	a5 e4       	ldi	r26, 0x45	; 69
    2bea:	b0 e0       	ldi	r27, 0x00	; 0
    2bec:	e5 e4       	ldi	r30, 0x45	; 69
    2bee:	f0 e0       	ldi	r31, 0x00	; 0
    2bf0:	80 81       	ld	r24, Z
    2bf2:	8f 77       	andi	r24, 0x7F	; 127
    2bf4:	8c 93       	st	X, r24

			/* Defining OC2 Pin As an Output */
			GPIO_setupPinDirection(PORTD_ID, PIN7_ID, PIN_OUTPUT);
    2bf6:	83 e0       	ldi	r24, 0x03	; 3
    2bf8:	67 e0       	ldi	r22, 0x07	; 7
    2bfa:	41 e0       	ldi	r20, 0x01	; 1
    2bfc:	0e 94 17 07 	call	0xe2e	; 0xe2e <GPIO_setupPinDirection>
    2c00:	13 c0       	rjmp	.+38     	; 0x2c28 <TIMER_init+0xb34>
			break;

		    case TIMER2_PHASE_PWM :
		    /* Choose the Phase PWM */
			SET_BIT(TCCR2, WGM20);
    2c02:	a5 e4       	ldi	r26, 0x45	; 69
    2c04:	b0 e0       	ldi	r27, 0x00	; 0
    2c06:	e5 e4       	ldi	r30, 0x45	; 69
    2c08:	f0 e0       	ldi	r31, 0x00	; 0
    2c0a:	80 81       	ld	r24, Z
    2c0c:	80 64       	ori	r24, 0x40	; 64
    2c0e:	8c 93       	st	X, r24
			CLR_BIT(TCCR2, WGM21);
    2c10:	a5 e4       	ldi	r26, 0x45	; 69
    2c12:	b0 e0       	ldi	r27, 0x00	; 0
    2c14:	e5 e4       	ldi	r30, 0x45	; 69
    2c16:	f0 e0       	ldi	r31, 0x00	; 0
    2c18:	80 81       	ld	r24, Z
    2c1a:	87 7f       	andi	r24, 0xF7	; 247
    2c1c:	8c 93       	st	X, r24

			/* Defining OC2 Pin As an Output */
			GPIO_setupPinDirection(PORTD_ID, PIN7_ID, PIN_OUTPUT);
    2c1e:	83 e0       	ldi	r24, 0x03	; 3
    2c20:	67 e0       	ldi	r22, 0x07	; 7
    2c22:	41 e0       	ldi	r20, 0x01	; 1
    2c24:	0e 94 17 07 	call	0xe2e	; 0xe2e <GPIO_setupPinDirection>
 * @return none
 */
void TIMER_init(const TIMER_ConfigType *Config_Ptr)
{
	int i;
	for(i=0;i<NUMBER_OF_USED_TIMERS;i++)
    2c28:	89 81       	ldd	r24, Y+1	; 0x01
    2c2a:	9a 81       	ldd	r25, Y+2	; 0x02
    2c2c:	01 96       	adiw	r24, 0x01	; 1
    2c2e:	9a 83       	std	Y+2, r25	; 0x02
    2c30:	89 83       	std	Y+1, r24	; 0x01
    2c32:	89 81       	ldd	r24, Y+1	; 0x01
    2c34:	9a 81       	ldd	r25, Y+2	; 0x02
    2c36:	83 30       	cpi	r24, 0x03	; 3
    2c38:	91 05       	cpc	r25, r1
    2c3a:	0c f4       	brge	.+2      	; 0x2c3e <TIMER_init+0xb4a>
    2c3c:	6a ca       	rjmp	.-2860   	; 0x2112 <TIMER_init+0x1e>
		 default :
				 /* Wrong Timer Num */
		 break;
	}
	}
}
    2c3e:	2c 96       	adiw	r28, 0x0c	; 12
    2c40:	0f b6       	in	r0, 0x3f	; 63
    2c42:	f8 94       	cli
    2c44:	de bf       	out	0x3e, r29	; 62
    2c46:	0f be       	out	0x3f, r0	; 63
    2c48:	cd bf       	out	0x3d, r28	; 61
    2c4a:	cf 91       	pop	r28
    2c4c:	df 91       	pop	r29
    2c4e:	08 95       	ret

00002c50 <TIMER_read>:

uint8 TIMER_read(Timer_ID Timer_num)
{
    2c50:	df 93       	push	r29
    2c52:	cf 93       	push	r28
    2c54:	00 d0       	rcall	.+0      	; 0x2c56 <TIMER_read+0x6>
    2c56:	00 d0       	rcall	.+0      	; 0x2c58 <TIMER_read+0x8>
    2c58:	cd b7       	in	r28, 0x3d	; 61
    2c5a:	de b7       	in	r29, 0x3e	; 62
    2c5c:	89 83       	std	Y+1, r24	; 0x01
	switch(Timer_num)
    2c5e:	89 81       	ldd	r24, Y+1	; 0x01
    2c60:	28 2f       	mov	r18, r24
    2c62:	30 e0       	ldi	r19, 0x00	; 0
    2c64:	3c 83       	std	Y+4, r19	; 0x04
    2c66:	2b 83       	std	Y+3, r18	; 0x03
    2c68:	8b 81       	ldd	r24, Y+3	; 0x03
    2c6a:	9c 81       	ldd	r25, Y+4	; 0x04
    2c6c:	81 30       	cpi	r24, 0x01	; 1
    2c6e:	91 05       	cpc	r25, r1
    2c70:	71 f0       	breq	.+28     	; 0x2c8e <TIMER_read+0x3e>
    2c72:	2b 81       	ldd	r18, Y+3	; 0x03
    2c74:	3c 81       	ldd	r19, Y+4	; 0x04
    2c76:	22 30       	cpi	r18, 0x02	; 2
    2c78:	31 05       	cpc	r19, r1
    2c7a:	79 f0       	breq	.+30     	; 0x2c9a <TIMER_read+0x4a>
    2c7c:	8b 81       	ldd	r24, Y+3	; 0x03
    2c7e:	9c 81       	ldd	r25, Y+4	; 0x04
    2c80:	00 97       	sbiw	r24, 0x00	; 0
    2c82:	81 f4       	brne	.+32     	; 0x2ca4 <TIMER_read+0x54>
	{
	case TIMER0:
	return TCNT0;
    2c84:	e2 e5       	ldi	r30, 0x52	; 82
    2c86:	f0 e0       	ldi	r31, 0x00	; 0
    2c88:	90 81       	ld	r25, Z
    2c8a:	9a 83       	std	Y+2, r25	; 0x02
    2c8c:	0c c0       	rjmp	.+24     	; 0x2ca6 <TIMER_read+0x56>
	break;
	case TIMER1:
	return TCNT1;
    2c8e:	ec e4       	ldi	r30, 0x4C	; 76
    2c90:	f0 e0       	ldi	r31, 0x00	; 0
    2c92:	80 81       	ld	r24, Z
    2c94:	91 81       	ldd	r25, Z+1	; 0x01
    2c96:	8a 83       	std	Y+2, r24	; 0x02
    2c98:	06 c0       	rjmp	.+12     	; 0x2ca6 <TIMER_read+0x56>
	break;
	case TIMER2:
	return TCNT2;
    2c9a:	e4 e4       	ldi	r30, 0x44	; 68
    2c9c:	f0 e0       	ldi	r31, 0x00	; 0
    2c9e:	20 81       	ld	r18, Z
    2ca0:	2a 83       	std	Y+2, r18	; 0x02
    2ca2:	01 c0       	rjmp	.+2      	; 0x2ca6 <TIMER_read+0x56>
	break;
	default :
	  /* Wrong Timer Num */
	return 0;
    2ca4:	1a 82       	std	Y+2, r1	; 0x02
    2ca6:	8a 81       	ldd	r24, Y+2	; 0x02
	}

}
    2ca8:	0f 90       	pop	r0
    2caa:	0f 90       	pop	r0
    2cac:	0f 90       	pop	r0
    2cae:	0f 90       	pop	r0
    2cb0:	cf 91       	pop	r28
    2cb2:	df 91       	pop	r29
    2cb4:	08 95       	ret

00002cb6 <TIMER_setPreloadValue>:

void TIMER_setPreloadValue (Timer_ID Timer_num,uint16 Preload)
{
    2cb6:	df 93       	push	r29
    2cb8:	cf 93       	push	r28
    2cba:	00 d0       	rcall	.+0      	; 0x2cbc <TIMER_setPreloadValue+0x6>
    2cbc:	00 d0       	rcall	.+0      	; 0x2cbe <TIMER_setPreloadValue+0x8>
    2cbe:	0f 92       	push	r0
    2cc0:	cd b7       	in	r28, 0x3d	; 61
    2cc2:	de b7       	in	r29, 0x3e	; 62
    2cc4:	89 83       	std	Y+1, r24	; 0x01
    2cc6:	7b 83       	std	Y+3, r23	; 0x03
    2cc8:	6a 83       	std	Y+2, r22	; 0x02
	switch(Timer_num)
    2cca:	89 81       	ldd	r24, Y+1	; 0x01
    2ccc:	28 2f       	mov	r18, r24
    2cce:	30 e0       	ldi	r19, 0x00	; 0
    2cd0:	3d 83       	std	Y+5, r19	; 0x05
    2cd2:	2c 83       	std	Y+4, r18	; 0x04
    2cd4:	8c 81       	ldd	r24, Y+4	; 0x04
    2cd6:	9d 81       	ldd	r25, Y+5	; 0x05
    2cd8:	81 30       	cpi	r24, 0x01	; 1
    2cda:	91 05       	cpc	r25, r1
    2cdc:	71 f0       	breq	.+28     	; 0x2cfa <TIMER_setPreloadValue+0x44>
    2cde:	2c 81       	ldd	r18, Y+4	; 0x04
    2ce0:	3d 81       	ldd	r19, Y+5	; 0x05
    2ce2:	22 30       	cpi	r18, 0x02	; 2
    2ce4:	31 05       	cpc	r19, r1
    2ce6:	81 f0       	breq	.+32     	; 0x2d08 <TIMER_setPreloadValue+0x52>
    2ce8:	8c 81       	ldd	r24, Y+4	; 0x04
    2cea:	9d 81       	ldd	r25, Y+5	; 0x05
    2cec:	00 97       	sbiw	r24, 0x00	; 0
    2cee:	81 f4       	brne	.+32     	; 0x2d10 <TIMER_setPreloadValue+0x5a>
	{
   case TIMER0:
		TCNT0 = Preload;
    2cf0:	e2 e5       	ldi	r30, 0x52	; 82
    2cf2:	f0 e0       	ldi	r31, 0x00	; 0
    2cf4:	8a 81       	ldd	r24, Y+2	; 0x02
    2cf6:	80 83       	st	Z, r24
    2cf8:	0b c0       	rjmp	.+22     	; 0x2d10 <TIMER_setPreloadValue+0x5a>
   	break;
   	case TIMER1:
   		TCNT1 = Preload;
    2cfa:	ec e4       	ldi	r30, 0x4C	; 76
    2cfc:	f0 e0       	ldi	r31, 0x00	; 0
    2cfe:	8a 81       	ldd	r24, Y+2	; 0x02
    2d00:	9b 81       	ldd	r25, Y+3	; 0x03
    2d02:	91 83       	std	Z+1, r25	; 0x01
    2d04:	80 83       	st	Z, r24
    2d06:	04 c0       	rjmp	.+8      	; 0x2d10 <TIMER_setPreloadValue+0x5a>
   	break;
   	case TIMER2:
   		TCNT2 = Preload;
    2d08:	e4 e4       	ldi	r30, 0x44	; 68
    2d0a:	f0 e0       	ldi	r31, 0x00	; 0
    2d0c:	8a 81       	ldd	r24, Y+2	; 0x02
    2d0e:	80 83       	st	Z, r24
   	break;
   	default :
   	  /* Wrong Timer Num */
   	break;
	}
}
    2d10:	0f 90       	pop	r0
    2d12:	0f 90       	pop	r0
    2d14:	0f 90       	pop	r0
    2d16:	0f 90       	pop	r0
    2d18:	0f 90       	pop	r0
    2d1a:	cf 91       	pop	r28
    2d1c:	df 91       	pop	r29
    2d1e:	08 95       	ret

00002d20 <TIMER_setCompareMatch>:

void TIMER_setCompareMatch (Timer_ID Timer_num, uint16 Value)
{
    2d20:	df 93       	push	r29
    2d22:	cf 93       	push	r28
    2d24:	00 d0       	rcall	.+0      	; 0x2d26 <TIMER_setCompareMatch+0x6>
    2d26:	00 d0       	rcall	.+0      	; 0x2d28 <TIMER_setCompareMatch+0x8>
    2d28:	0f 92       	push	r0
    2d2a:	cd b7       	in	r28, 0x3d	; 61
    2d2c:	de b7       	in	r29, 0x3e	; 62
    2d2e:	89 83       	std	Y+1, r24	; 0x01
    2d30:	7b 83       	std	Y+3, r23	; 0x03
    2d32:	6a 83       	std	Y+2, r22	; 0x02
	switch(Timer_num){
    2d34:	89 81       	ldd	r24, Y+1	; 0x01
    2d36:	28 2f       	mov	r18, r24
    2d38:	30 e0       	ldi	r19, 0x00	; 0
    2d3a:	3d 83       	std	Y+5, r19	; 0x05
    2d3c:	2c 83       	std	Y+4, r18	; 0x04
    2d3e:	8c 81       	ldd	r24, Y+4	; 0x04
    2d40:	9d 81       	ldd	r25, Y+5	; 0x05
    2d42:	81 30       	cpi	r24, 0x01	; 1
    2d44:	91 05       	cpc	r25, r1
    2d46:	71 f0       	breq	.+28     	; 0x2d64 <TIMER_setCompareMatch+0x44>
    2d48:	2c 81       	ldd	r18, Y+4	; 0x04
    2d4a:	3d 81       	ldd	r19, Y+5	; 0x05
    2d4c:	22 30       	cpi	r18, 0x02	; 2
    2d4e:	31 05       	cpc	r19, r1
    2d50:	f9 f0       	breq	.+62     	; 0x2d90 <TIMER_setCompareMatch+0x70>
    2d52:	8c 81       	ldd	r24, Y+4	; 0x04
    2d54:	9d 81       	ldd	r25, Y+5	; 0x05
    2d56:	00 97       	sbiw	r24, 0x00	; 0
    2d58:	f9 f4       	brne	.+62     	; 0x2d98 <TIMER_setCompareMatch+0x78>

	case TIMER0:
		OCR0 = Value;
    2d5a:	ec e5       	ldi	r30, 0x5C	; 92
    2d5c:	f0 e0       	ldi	r31, 0x00	; 0
    2d5e:	8a 81       	ldd	r24, Y+2	; 0x02
    2d60:	80 83       	st	Z, r24
    2d62:	1a c0       	rjmp	.+52     	; 0x2d98 <TIMER_setCompareMatch+0x78>
  	break;

  	case TIMER1:
if (Timer1_Mode ==  TIMER1_CTC_OCR)
    2d64:	80 91 97 01 	lds	r24, 0x0197
    2d68:	84 30       	cpi	r24, 0x04	; 4
    2d6a:	39 f4       	brne	.+14     	; 0x2d7a <TIMER_setCompareMatch+0x5a>
	{
		OCR1A = Value;
    2d6c:	ea e4       	ldi	r30, 0x4A	; 74
    2d6e:	f0 e0       	ldi	r31, 0x00	; 0
    2d70:	8a 81       	ldd	r24, Y+2	; 0x02
    2d72:	9b 81       	ldd	r25, Y+3	; 0x03
    2d74:	91 83       	std	Z+1, r25	; 0x01
    2d76:	80 83       	st	Z, r24
    2d78:	0f c0       	rjmp	.+30     	; 0x2d98 <TIMER_setCompareMatch+0x78>
	}
else if(Timer1_Mode ==  TIMER1_CTC_ICR)
    2d7a:	80 91 97 01 	lds	r24, 0x0197
    2d7e:	8c 30       	cpi	r24, 0x0C	; 12
    2d80:	59 f4       	brne	.+22     	; 0x2d98 <TIMER_setCompareMatch+0x78>
	{
		ICR1 = Value;
    2d82:	e6 e4       	ldi	r30, 0x46	; 70
    2d84:	f0 e0       	ldi	r31, 0x00	; 0
    2d86:	8a 81       	ldd	r24, Y+2	; 0x02
    2d88:	9b 81       	ldd	r25, Y+3	; 0x03
    2d8a:	91 83       	std	Z+1, r25	; 0x01
    2d8c:	80 83       	st	Z, r24
    2d8e:	04 c0       	rjmp	.+8      	; 0x2d98 <TIMER_setCompareMatch+0x78>
	}
  	break;

  	case TIMER2:
  		OCR2 = Value;
    2d90:	e3 e4       	ldi	r30, 0x43	; 67
    2d92:	f0 e0       	ldi	r31, 0x00	; 0
    2d94:	8a 81       	ldd	r24, Y+2	; 0x02
    2d96:	80 83       	st	Z, r24

  	default :
  	/* Wrong Timer Num */
  	break;
	}
}
    2d98:	0f 90       	pop	r0
    2d9a:	0f 90       	pop	r0
    2d9c:	0f 90       	pop	r0
    2d9e:	0f 90       	pop	r0
    2da0:	0f 90       	pop	r0
    2da2:	cf 91       	pop	r28
    2da4:	df 91       	pop	r29
    2da6:	08 95       	ret

00002da8 <TIMER_setCallBack>:

void TIMER_setCallBack(Timer_ID Timer_num , void (*copy_ptr)(void))
{
    2da8:	df 93       	push	r29
    2daa:	cf 93       	push	r28
    2dac:	00 d0       	rcall	.+0      	; 0x2dae <TIMER_setCallBack+0x6>
    2dae:	00 d0       	rcall	.+0      	; 0x2db0 <TIMER_setCallBack+0x8>
    2db0:	0f 92       	push	r0
    2db2:	cd b7       	in	r28, 0x3d	; 61
    2db4:	de b7       	in	r29, 0x3e	; 62
    2db6:	89 83       	std	Y+1, r24	; 0x01
    2db8:	7b 83       	std	Y+3, r23	; 0x03
    2dba:	6a 83       	std	Y+2, r22	; 0x02
	switch(Timer_num)
    2dbc:	89 81       	ldd	r24, Y+1	; 0x01
    2dbe:	28 2f       	mov	r18, r24
    2dc0:	30 e0       	ldi	r19, 0x00	; 0
    2dc2:	3d 83       	std	Y+5, r19	; 0x05
    2dc4:	2c 83       	std	Y+4, r18	; 0x04
    2dc6:	8c 81       	ldd	r24, Y+4	; 0x04
    2dc8:	9d 81       	ldd	r25, Y+5	; 0x05
    2dca:	81 30       	cpi	r24, 0x01	; 1
    2dcc:	91 05       	cpc	r25, r1
    2dce:	81 f0       	breq	.+32     	; 0x2df0 <TIMER_setCallBack+0x48>
    2dd0:	2c 81       	ldd	r18, Y+4	; 0x04
    2dd2:	3d 81       	ldd	r19, Y+5	; 0x05
    2dd4:	22 30       	cpi	r18, 0x02	; 2
    2dd6:	31 05       	cpc	r19, r1
    2dd8:	91 f0       	breq	.+36     	; 0x2dfe <TIMER_setCallBack+0x56>
    2dda:	8c 81       	ldd	r24, Y+4	; 0x04
    2ddc:	9d 81       	ldd	r25, Y+5	; 0x05
    2dde:	00 97       	sbiw	r24, 0x00	; 0
    2de0:	a1 f4       	brne	.+40     	; 0x2e0a <TIMER_setCallBack+0x62>
	{
	case TIMER0:
		TIMER0_PtrCallBack = copy_ptr;
    2de2:	8a 81       	ldd	r24, Y+2	; 0x02
    2de4:	9b 81       	ldd	r25, Y+3	; 0x03
    2de6:	90 93 8f 01 	sts	0x018F, r25
    2dea:	80 93 8e 01 	sts	0x018E, r24
    2dee:	0d c0       	rjmp	.+26     	; 0x2e0a <TIMER_setCallBack+0x62>
		break;
	case TIMER1:
		TIMER1_PtrCallBack = copy_ptr;
    2df0:	8a 81       	ldd	r24, Y+2	; 0x02
    2df2:	9b 81       	ldd	r25, Y+3	; 0x03
    2df4:	90 93 91 01 	sts	0x0191, r25
    2df8:	80 93 90 01 	sts	0x0190, r24
    2dfc:	06 c0       	rjmp	.+12     	; 0x2e0a <TIMER_setCallBack+0x62>
		break;
	case TIMER2:
		TIMER2_PtrCallBack = copy_ptr;
    2dfe:	8a 81       	ldd	r24, Y+2	; 0x02
    2e00:	9b 81       	ldd	r25, Y+3	; 0x03
    2e02:	90 93 93 01 	sts	0x0193, r25
    2e06:	80 93 92 01 	sts	0x0192, r24
		break;
	default :
	  	/* Wrong Timer Num */
		break;
	}
}
    2e0a:	0f 90       	pop	r0
    2e0c:	0f 90       	pop	r0
    2e0e:	0f 90       	pop	r0
    2e10:	0f 90       	pop	r0
    2e12:	0f 90       	pop	r0
    2e14:	cf 91       	pop	r28
    2e16:	df 91       	pop	r29
    2e18:	08 95       	ret

00002e1a <TIMER0_setPwmDutyCycle>:

/* TIMER 0*/
void TIMER0_setPwmDutyCycle (uint8 DutyCycle)
{
    2e1a:	0f 93       	push	r16
    2e1c:	1f 93       	push	r17
    2e1e:	df 93       	push	r29
    2e20:	cf 93       	push	r28
    2e22:	0f 92       	push	r0
    2e24:	cd b7       	in	r28, 0x3d	; 61
    2e26:	de b7       	in	r29, 0x3e	; 62
    2e28:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = (float32)((float32)DutyCycle/100)*255;
    2e2a:	0c e5       	ldi	r16, 0x5C	; 92
    2e2c:	10 e0       	ldi	r17, 0x00	; 0
    2e2e:	89 81       	ldd	r24, Y+1	; 0x01
    2e30:	88 2f       	mov	r24, r24
    2e32:	90 e0       	ldi	r25, 0x00	; 0
    2e34:	a0 e0       	ldi	r26, 0x00	; 0
    2e36:	b0 e0       	ldi	r27, 0x00	; 0
    2e38:	bc 01       	movw	r22, r24
    2e3a:	cd 01       	movw	r24, r26
    2e3c:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2e40:	dc 01       	movw	r26, r24
    2e42:	cb 01       	movw	r24, r22
    2e44:	bc 01       	movw	r22, r24
    2e46:	cd 01       	movw	r24, r26
    2e48:	20 e0       	ldi	r18, 0x00	; 0
    2e4a:	30 e0       	ldi	r19, 0x00	; 0
    2e4c:	48 ec       	ldi	r20, 0xC8	; 200
    2e4e:	52 e4       	ldi	r21, 0x42	; 66
    2e50:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2e54:	dc 01       	movw	r26, r24
    2e56:	cb 01       	movw	r24, r22
    2e58:	bc 01       	movw	r22, r24
    2e5a:	cd 01       	movw	r24, r26
    2e5c:	20 e0       	ldi	r18, 0x00	; 0
    2e5e:	30 e0       	ldi	r19, 0x00	; 0
    2e60:	4f e7       	ldi	r20, 0x7F	; 127
    2e62:	53 e4       	ldi	r21, 0x43	; 67
    2e64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e68:	dc 01       	movw	r26, r24
    2e6a:	cb 01       	movw	r24, r22
    2e6c:	bc 01       	movw	r22, r24
    2e6e:	cd 01       	movw	r24, r26
    2e70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e74:	dc 01       	movw	r26, r24
    2e76:	cb 01       	movw	r24, r22
    2e78:	f8 01       	movw	r30, r16
    2e7a:	80 83       	st	Z, r24
}
    2e7c:	0f 90       	pop	r0
    2e7e:	cf 91       	pop	r28
    2e80:	df 91       	pop	r29
    2e82:	1f 91       	pop	r17
    2e84:	0f 91       	pop	r16
    2e86:	08 95       	ret

00002e88 <TIMER1_setPwmDutyCycle>:


void TIMER1_setPwmDutyCycle (uint8 DutyCycle,uint8 Circuit)
{
    2e88:	0f 93       	push	r16
    2e8a:	1f 93       	push	r17
    2e8c:	df 93       	push	r29
    2e8e:	cf 93       	push	r28
    2e90:	cd b7       	in	r28, 0x3d	; 61
    2e92:	de b7       	in	r29, 0x3e	; 62
    2e94:	28 97       	sbiw	r28, 0x08	; 8
    2e96:	0f b6       	in	r0, 0x3f	; 63
    2e98:	f8 94       	cli
    2e9a:	de bf       	out	0x3e, r29	; 62
    2e9c:	0f be       	out	0x3f, r0	; 63
    2e9e:	cd bf       	out	0x3d, r28	; 61
    2ea0:	89 83       	std	Y+1, r24	; 0x01
    2ea2:	6a 83       	std	Y+2, r22	; 0x02
if (Timer1_Mode == TIMER1_FAST_PWM_8BIT)
    2ea4:	80 91 97 01 	lds	r24, 0x0197
    2ea8:	85 30       	cpi	r24, 0x05	; 5
    2eaa:	09 f0       	breq	.+2      	; 0x2eae <TIMER1_setPwmDutyCycle+0x26>
    2eac:	66 c0       	rjmp	.+204    	; 0x2f7a <TIMER1_setPwmDutyCycle+0xf2>
	{
	switch(Circuit)
    2eae:	8a 81       	ldd	r24, Y+2	; 0x02
    2eb0:	28 2f       	mov	r18, r24
    2eb2:	30 e0       	ldi	r19, 0x00	; 0
    2eb4:	38 87       	std	Y+8, r19	; 0x08
    2eb6:	2f 83       	std	Y+7, r18	; 0x07
    2eb8:	8f 81       	ldd	r24, Y+7	; 0x07
    2eba:	98 85       	ldd	r25, Y+8	; 0x08
    2ebc:	81 30       	cpi	r24, 0x01	; 1
    2ebe:	91 05       	cpc	r25, r1
    2ec0:	31 f0       	breq	.+12     	; 0x2ece <TIMER1_setPwmDutyCycle+0x46>
    2ec2:	ef 81       	ldd	r30, Y+7	; 0x07
    2ec4:	f8 85       	ldd	r31, Y+8	; 0x08
    2ec6:	e2 30       	cpi	r30, 0x02	; 2
    2ec8:	f1 05       	cpc	r31, r1
    2eca:	61 f1       	breq	.+88     	; 0x2f24 <TIMER1_setPwmDutyCycle+0x9c>
    2ecc:	72 c1       	rjmp	.+740    	; 0x31b2 <TIMER1_setPwmDutyCycle+0x32a>
		{
	case 1:
	OCR1A = (float32)((float32)DutyCycle/100)*255;
    2ece:	0a e4       	ldi	r16, 0x4A	; 74
    2ed0:	10 e0       	ldi	r17, 0x00	; 0
    2ed2:	89 81       	ldd	r24, Y+1	; 0x01
    2ed4:	88 2f       	mov	r24, r24
    2ed6:	90 e0       	ldi	r25, 0x00	; 0
    2ed8:	a0 e0       	ldi	r26, 0x00	; 0
    2eda:	b0 e0       	ldi	r27, 0x00	; 0
    2edc:	bc 01       	movw	r22, r24
    2ede:	cd 01       	movw	r24, r26
    2ee0:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2ee4:	dc 01       	movw	r26, r24
    2ee6:	cb 01       	movw	r24, r22
    2ee8:	bc 01       	movw	r22, r24
    2eea:	cd 01       	movw	r24, r26
    2eec:	20 e0       	ldi	r18, 0x00	; 0
    2eee:	30 e0       	ldi	r19, 0x00	; 0
    2ef0:	48 ec       	ldi	r20, 0xC8	; 200
    2ef2:	52 e4       	ldi	r21, 0x42	; 66
    2ef4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2ef8:	dc 01       	movw	r26, r24
    2efa:	cb 01       	movw	r24, r22
    2efc:	bc 01       	movw	r22, r24
    2efe:	cd 01       	movw	r24, r26
    2f00:	20 e0       	ldi	r18, 0x00	; 0
    2f02:	30 e0       	ldi	r19, 0x00	; 0
    2f04:	4f e7       	ldi	r20, 0x7F	; 127
    2f06:	53 e4       	ldi	r21, 0x43	; 67
    2f08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f0c:	dc 01       	movw	r26, r24
    2f0e:	cb 01       	movw	r24, r22
    2f10:	bc 01       	movw	r22, r24
    2f12:	cd 01       	movw	r24, r26
    2f14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f18:	dc 01       	movw	r26, r24
    2f1a:	cb 01       	movw	r24, r22
    2f1c:	f8 01       	movw	r30, r16
    2f1e:	91 83       	std	Z+1, r25	; 0x01
    2f20:	80 83       	st	Z, r24
    2f22:	47 c1       	rjmp	.+654    	; 0x31b2 <TIMER1_setPwmDutyCycle+0x32a>
	break;
	case 2:
	OCR1B = (float32)((float32)DutyCycle/100)*255;
    2f24:	08 e4       	ldi	r16, 0x48	; 72
    2f26:	10 e0       	ldi	r17, 0x00	; 0
    2f28:	89 81       	ldd	r24, Y+1	; 0x01
    2f2a:	88 2f       	mov	r24, r24
    2f2c:	90 e0       	ldi	r25, 0x00	; 0
    2f2e:	a0 e0       	ldi	r26, 0x00	; 0
    2f30:	b0 e0       	ldi	r27, 0x00	; 0
    2f32:	bc 01       	movw	r22, r24
    2f34:	cd 01       	movw	r24, r26
    2f36:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2f3a:	dc 01       	movw	r26, r24
    2f3c:	cb 01       	movw	r24, r22
    2f3e:	bc 01       	movw	r22, r24
    2f40:	cd 01       	movw	r24, r26
    2f42:	20 e0       	ldi	r18, 0x00	; 0
    2f44:	30 e0       	ldi	r19, 0x00	; 0
    2f46:	48 ec       	ldi	r20, 0xC8	; 200
    2f48:	52 e4       	ldi	r21, 0x42	; 66
    2f4a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2f4e:	dc 01       	movw	r26, r24
    2f50:	cb 01       	movw	r24, r22
    2f52:	bc 01       	movw	r22, r24
    2f54:	cd 01       	movw	r24, r26
    2f56:	20 e0       	ldi	r18, 0x00	; 0
    2f58:	30 e0       	ldi	r19, 0x00	; 0
    2f5a:	4f e7       	ldi	r20, 0x7F	; 127
    2f5c:	53 e4       	ldi	r21, 0x43	; 67
    2f5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f62:	dc 01       	movw	r26, r24
    2f64:	cb 01       	movw	r24, r22
    2f66:	bc 01       	movw	r22, r24
    2f68:	cd 01       	movw	r24, r26
    2f6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f6e:	dc 01       	movw	r26, r24
    2f70:	cb 01       	movw	r24, r22
    2f72:	f8 01       	movw	r30, r16
    2f74:	91 83       	std	Z+1, r25	; 0x01
    2f76:	80 83       	st	Z, r24
    2f78:	1c c1       	rjmp	.+568    	; 0x31b2 <TIMER1_setPwmDutyCycle+0x32a>
	default :
		/* Wrong Input */
	break;
		}
	}
else if (Timer1_Mode == TIMER1_FAST_PWM_9BIT)
    2f7a:	80 91 97 01 	lds	r24, 0x0197
    2f7e:	86 30       	cpi	r24, 0x06	; 6
    2f80:	09 f0       	breq	.+2      	; 0x2f84 <TIMER1_setPwmDutyCycle+0xfc>
    2f82:	66 c0       	rjmp	.+204    	; 0x3050 <TIMER1_setPwmDutyCycle+0x1c8>
	{
	switch(Circuit)
    2f84:	8a 81       	ldd	r24, Y+2	; 0x02
    2f86:	28 2f       	mov	r18, r24
    2f88:	30 e0       	ldi	r19, 0x00	; 0
    2f8a:	3e 83       	std	Y+6, r19	; 0x06
    2f8c:	2d 83       	std	Y+5, r18	; 0x05
    2f8e:	8d 81       	ldd	r24, Y+5	; 0x05
    2f90:	9e 81       	ldd	r25, Y+6	; 0x06
    2f92:	81 30       	cpi	r24, 0x01	; 1
    2f94:	91 05       	cpc	r25, r1
    2f96:	31 f0       	breq	.+12     	; 0x2fa4 <TIMER1_setPwmDutyCycle+0x11c>
    2f98:	ed 81       	ldd	r30, Y+5	; 0x05
    2f9a:	fe 81       	ldd	r31, Y+6	; 0x06
    2f9c:	e2 30       	cpi	r30, 0x02	; 2
    2f9e:	f1 05       	cpc	r31, r1
    2fa0:	61 f1       	breq	.+88     	; 0x2ffa <TIMER1_setPwmDutyCycle+0x172>
    2fa2:	07 c1       	rjmp	.+526    	; 0x31b2 <TIMER1_setPwmDutyCycle+0x32a>
		{
	case 1:
	OCR1A = (float32)((float32)DutyCycle/100)*511;
    2fa4:	0a e4       	ldi	r16, 0x4A	; 74
    2fa6:	10 e0       	ldi	r17, 0x00	; 0
    2fa8:	89 81       	ldd	r24, Y+1	; 0x01
    2faa:	88 2f       	mov	r24, r24
    2fac:	90 e0       	ldi	r25, 0x00	; 0
    2fae:	a0 e0       	ldi	r26, 0x00	; 0
    2fb0:	b0 e0       	ldi	r27, 0x00	; 0
    2fb2:	bc 01       	movw	r22, r24
    2fb4:	cd 01       	movw	r24, r26
    2fb6:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2fba:	dc 01       	movw	r26, r24
    2fbc:	cb 01       	movw	r24, r22
    2fbe:	bc 01       	movw	r22, r24
    2fc0:	cd 01       	movw	r24, r26
    2fc2:	20 e0       	ldi	r18, 0x00	; 0
    2fc4:	30 e0       	ldi	r19, 0x00	; 0
    2fc6:	48 ec       	ldi	r20, 0xC8	; 200
    2fc8:	52 e4       	ldi	r21, 0x42	; 66
    2fca:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2fce:	dc 01       	movw	r26, r24
    2fd0:	cb 01       	movw	r24, r22
    2fd2:	bc 01       	movw	r22, r24
    2fd4:	cd 01       	movw	r24, r26
    2fd6:	20 e0       	ldi	r18, 0x00	; 0
    2fd8:	30 e8       	ldi	r19, 0x80	; 128
    2fda:	4f ef       	ldi	r20, 0xFF	; 255
    2fdc:	53 e4       	ldi	r21, 0x43	; 67
    2fde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fe2:	dc 01       	movw	r26, r24
    2fe4:	cb 01       	movw	r24, r22
    2fe6:	bc 01       	movw	r22, r24
    2fe8:	cd 01       	movw	r24, r26
    2fea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fee:	dc 01       	movw	r26, r24
    2ff0:	cb 01       	movw	r24, r22
    2ff2:	f8 01       	movw	r30, r16
    2ff4:	91 83       	std	Z+1, r25	; 0x01
    2ff6:	80 83       	st	Z, r24
    2ff8:	dc c0       	rjmp	.+440    	; 0x31b2 <TIMER1_setPwmDutyCycle+0x32a>
	break;
	case 2:
	OCR1B = (float32)((float32)DutyCycle/100)*511;
    2ffa:	08 e4       	ldi	r16, 0x48	; 72
    2ffc:	10 e0       	ldi	r17, 0x00	; 0
    2ffe:	89 81       	ldd	r24, Y+1	; 0x01
    3000:	88 2f       	mov	r24, r24
    3002:	90 e0       	ldi	r25, 0x00	; 0
    3004:	a0 e0       	ldi	r26, 0x00	; 0
    3006:	b0 e0       	ldi	r27, 0x00	; 0
    3008:	bc 01       	movw	r22, r24
    300a:	cd 01       	movw	r24, r26
    300c:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    3010:	dc 01       	movw	r26, r24
    3012:	cb 01       	movw	r24, r22
    3014:	bc 01       	movw	r22, r24
    3016:	cd 01       	movw	r24, r26
    3018:	20 e0       	ldi	r18, 0x00	; 0
    301a:	30 e0       	ldi	r19, 0x00	; 0
    301c:	48 ec       	ldi	r20, 0xC8	; 200
    301e:	52 e4       	ldi	r21, 0x42	; 66
    3020:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3024:	dc 01       	movw	r26, r24
    3026:	cb 01       	movw	r24, r22
    3028:	bc 01       	movw	r22, r24
    302a:	cd 01       	movw	r24, r26
    302c:	20 e0       	ldi	r18, 0x00	; 0
    302e:	30 e8       	ldi	r19, 0x80	; 128
    3030:	4f ef       	ldi	r20, 0xFF	; 255
    3032:	53 e4       	ldi	r21, 0x43	; 67
    3034:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3038:	dc 01       	movw	r26, r24
    303a:	cb 01       	movw	r24, r22
    303c:	bc 01       	movw	r22, r24
    303e:	cd 01       	movw	r24, r26
    3040:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3044:	dc 01       	movw	r26, r24
    3046:	cb 01       	movw	r24, r22
    3048:	f8 01       	movw	r30, r16
    304a:	91 83       	std	Z+1, r25	; 0x01
    304c:	80 83       	st	Z, r24
    304e:	b1 c0       	rjmp	.+354    	; 0x31b2 <TIMER1_setPwmDutyCycle+0x32a>
	default :
	/* Wrong Input */
	break;
		}
	}
else if (Timer1_Mode == TIMER1_FAST_PWM_10BIT)
    3050:	80 91 97 01 	lds	r24, 0x0197
    3054:	87 30       	cpi	r24, 0x07	; 7
    3056:	09 f0       	breq	.+2      	; 0x305a <TIMER1_setPwmDutyCycle+0x1d2>
    3058:	66 c0       	rjmp	.+204    	; 0x3126 <TIMER1_setPwmDutyCycle+0x29e>
	{
	switch(Circuit)
    305a:	8a 81       	ldd	r24, Y+2	; 0x02
    305c:	28 2f       	mov	r18, r24
    305e:	30 e0       	ldi	r19, 0x00	; 0
    3060:	3c 83       	std	Y+4, r19	; 0x04
    3062:	2b 83       	std	Y+3, r18	; 0x03
    3064:	8b 81       	ldd	r24, Y+3	; 0x03
    3066:	9c 81       	ldd	r25, Y+4	; 0x04
    3068:	81 30       	cpi	r24, 0x01	; 1
    306a:	91 05       	cpc	r25, r1
    306c:	31 f0       	breq	.+12     	; 0x307a <TIMER1_setPwmDutyCycle+0x1f2>
    306e:	eb 81       	ldd	r30, Y+3	; 0x03
    3070:	fc 81       	ldd	r31, Y+4	; 0x04
    3072:	e2 30       	cpi	r30, 0x02	; 2
    3074:	f1 05       	cpc	r31, r1
    3076:	61 f1       	breq	.+88     	; 0x30d0 <TIMER1_setPwmDutyCycle+0x248>
    3078:	9c c0       	rjmp	.+312    	; 0x31b2 <TIMER1_setPwmDutyCycle+0x32a>
		{
	case 1:
	OCR1A = (float32)((float32)DutyCycle/100)*1023;
    307a:	0a e4       	ldi	r16, 0x4A	; 74
    307c:	10 e0       	ldi	r17, 0x00	; 0
    307e:	89 81       	ldd	r24, Y+1	; 0x01
    3080:	88 2f       	mov	r24, r24
    3082:	90 e0       	ldi	r25, 0x00	; 0
    3084:	a0 e0       	ldi	r26, 0x00	; 0
    3086:	b0 e0       	ldi	r27, 0x00	; 0
    3088:	bc 01       	movw	r22, r24
    308a:	cd 01       	movw	r24, r26
    308c:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    3090:	dc 01       	movw	r26, r24
    3092:	cb 01       	movw	r24, r22
    3094:	bc 01       	movw	r22, r24
    3096:	cd 01       	movw	r24, r26
    3098:	20 e0       	ldi	r18, 0x00	; 0
    309a:	30 e0       	ldi	r19, 0x00	; 0
    309c:	48 ec       	ldi	r20, 0xC8	; 200
    309e:	52 e4       	ldi	r21, 0x42	; 66
    30a0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    30a4:	dc 01       	movw	r26, r24
    30a6:	cb 01       	movw	r24, r22
    30a8:	bc 01       	movw	r22, r24
    30aa:	cd 01       	movw	r24, r26
    30ac:	20 e0       	ldi	r18, 0x00	; 0
    30ae:	30 ec       	ldi	r19, 0xC0	; 192
    30b0:	4f e7       	ldi	r20, 0x7F	; 127
    30b2:	54 e4       	ldi	r21, 0x44	; 68
    30b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30b8:	dc 01       	movw	r26, r24
    30ba:	cb 01       	movw	r24, r22
    30bc:	bc 01       	movw	r22, r24
    30be:	cd 01       	movw	r24, r26
    30c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30c4:	dc 01       	movw	r26, r24
    30c6:	cb 01       	movw	r24, r22
    30c8:	f8 01       	movw	r30, r16
    30ca:	91 83       	std	Z+1, r25	; 0x01
    30cc:	80 83       	st	Z, r24
    30ce:	71 c0       	rjmp	.+226    	; 0x31b2 <TIMER1_setPwmDutyCycle+0x32a>
	break;
	case 2:
	OCR1B = (float32)((float32)DutyCycle/100)*1023;
    30d0:	08 e4       	ldi	r16, 0x48	; 72
    30d2:	10 e0       	ldi	r17, 0x00	; 0
    30d4:	89 81       	ldd	r24, Y+1	; 0x01
    30d6:	88 2f       	mov	r24, r24
    30d8:	90 e0       	ldi	r25, 0x00	; 0
    30da:	a0 e0       	ldi	r26, 0x00	; 0
    30dc:	b0 e0       	ldi	r27, 0x00	; 0
    30de:	bc 01       	movw	r22, r24
    30e0:	cd 01       	movw	r24, r26
    30e2:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    30e6:	dc 01       	movw	r26, r24
    30e8:	cb 01       	movw	r24, r22
    30ea:	bc 01       	movw	r22, r24
    30ec:	cd 01       	movw	r24, r26
    30ee:	20 e0       	ldi	r18, 0x00	; 0
    30f0:	30 e0       	ldi	r19, 0x00	; 0
    30f2:	48 ec       	ldi	r20, 0xC8	; 200
    30f4:	52 e4       	ldi	r21, 0x42	; 66
    30f6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    30fa:	dc 01       	movw	r26, r24
    30fc:	cb 01       	movw	r24, r22
    30fe:	bc 01       	movw	r22, r24
    3100:	cd 01       	movw	r24, r26
    3102:	20 e0       	ldi	r18, 0x00	; 0
    3104:	30 ec       	ldi	r19, 0xC0	; 192
    3106:	4f e7       	ldi	r20, 0x7F	; 127
    3108:	54 e4       	ldi	r21, 0x44	; 68
    310a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    310e:	dc 01       	movw	r26, r24
    3110:	cb 01       	movw	r24, r22
    3112:	bc 01       	movw	r22, r24
    3114:	cd 01       	movw	r24, r26
    3116:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    311a:	dc 01       	movw	r26, r24
    311c:	cb 01       	movw	r24, r22
    311e:	f8 01       	movw	r30, r16
    3120:	91 83       	std	Z+1, r25	; 0x01
    3122:	80 83       	st	Z, r24
    3124:	46 c0       	rjmp	.+140    	; 0x31b2 <TIMER1_setPwmDutyCycle+0x32a>
	/* Wrong Input */
	break;
		}
	}

else if (Timer1_Mode ==  TIMER1_FAST_PWM_ICR)
    3126:	80 91 97 01 	lds	r24, 0x0197
    312a:	8e 30       	cpi	r24, 0x0E	; 14
    312c:	71 f4       	brne	.+28     	; 0x314a <TIMER1_setPwmDutyCycle+0x2c2>
{
	ICR1 = 2499;
    312e:	e6 e4       	ldi	r30, 0x46	; 70
    3130:	f0 e0       	ldi	r31, 0x00	; 0
    3132:	83 ec       	ldi	r24, 0xC3	; 195
    3134:	99 e0       	ldi	r25, 0x09	; 9
    3136:	91 83       	std	Z+1, r25	; 0x01
    3138:	80 83       	st	Z, r24
	OCR1A=DutyCycle;
    313a:	ea e4       	ldi	r30, 0x4A	; 74
    313c:	f0 e0       	ldi	r31, 0x00	; 0
    313e:	89 81       	ldd	r24, Y+1	; 0x01
    3140:	88 2f       	mov	r24, r24
    3142:	90 e0       	ldi	r25, 0x00	; 0
    3144:	91 83       	std	Z+1, r25	; 0x01
    3146:	80 83       	st	Z, r24
    3148:	34 c0       	rjmp	.+104    	; 0x31b2 <TIMER1_setPwmDutyCycle+0x32a>
}

else if (Timer1_Mode ==  TIMER1_FAST_PWM_OCR)
    314a:	80 91 97 01 	lds	r24, 0x0197
    314e:	8f 30       	cpi	r24, 0x0F	; 15
    3150:	81 f5       	brne	.+96     	; 0x31b2 <TIMER1_setPwmDutyCycle+0x32a>
{
	OCR1A = 65535;
    3152:	ea e4       	ldi	r30, 0x4A	; 74
    3154:	f0 e0       	ldi	r31, 0x00	; 0
    3156:	8f ef       	ldi	r24, 0xFF	; 255
    3158:	9f ef       	ldi	r25, 0xFF	; 255
    315a:	91 83       	std	Z+1, r25	; 0x01
    315c:	80 83       	st	Z, r24
	OCR1B = (float32)((float32)DutyCycle/100)*65535;
    315e:	08 e4       	ldi	r16, 0x48	; 72
    3160:	10 e0       	ldi	r17, 0x00	; 0
    3162:	89 81       	ldd	r24, Y+1	; 0x01
    3164:	88 2f       	mov	r24, r24
    3166:	90 e0       	ldi	r25, 0x00	; 0
    3168:	a0 e0       	ldi	r26, 0x00	; 0
    316a:	b0 e0       	ldi	r27, 0x00	; 0
    316c:	bc 01       	movw	r22, r24
    316e:	cd 01       	movw	r24, r26
    3170:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    3174:	dc 01       	movw	r26, r24
    3176:	cb 01       	movw	r24, r22
    3178:	bc 01       	movw	r22, r24
    317a:	cd 01       	movw	r24, r26
    317c:	20 e0       	ldi	r18, 0x00	; 0
    317e:	30 e0       	ldi	r19, 0x00	; 0
    3180:	48 ec       	ldi	r20, 0xC8	; 200
    3182:	52 e4       	ldi	r21, 0x42	; 66
    3184:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3188:	dc 01       	movw	r26, r24
    318a:	cb 01       	movw	r24, r22
    318c:	bc 01       	movw	r22, r24
    318e:	cd 01       	movw	r24, r26
    3190:	20 e0       	ldi	r18, 0x00	; 0
    3192:	3f ef       	ldi	r19, 0xFF	; 255
    3194:	4f e7       	ldi	r20, 0x7F	; 127
    3196:	57 e4       	ldi	r21, 0x47	; 71
    3198:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    319c:	dc 01       	movw	r26, r24
    319e:	cb 01       	movw	r24, r22
    31a0:	bc 01       	movw	r22, r24
    31a2:	cd 01       	movw	r24, r26
    31a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31a8:	dc 01       	movw	r26, r24
    31aa:	cb 01       	movw	r24, r22
    31ac:	f8 01       	movw	r30, r16
    31ae:	91 83       	std	Z+1, r25	; 0x01
    31b0:	80 83       	st	Z, r24
}

}
    31b2:	28 96       	adiw	r28, 0x08	; 8
    31b4:	0f b6       	in	r0, 0x3f	; 63
    31b6:	f8 94       	cli
    31b8:	de bf       	out	0x3e, r29	; 62
    31ba:	0f be       	out	0x3f, r0	; 63
    31bc:	cd bf       	out	0x3d, r28	; 61
    31be:	cf 91       	pop	r28
    31c0:	df 91       	pop	r29
    31c2:	1f 91       	pop	r17
    31c4:	0f 91       	pop	r16
    31c6:	08 95       	ret

000031c8 <TIMER2_setPwmDutyCycle>:

void TIMER2_setPwmDutyCycle (uint8 DutyCycle)
{
    31c8:	0f 93       	push	r16
    31ca:	1f 93       	push	r17
    31cc:	df 93       	push	r29
    31ce:	cf 93       	push	r28
    31d0:	0f 92       	push	r0
    31d2:	cd b7       	in	r28, 0x3d	; 61
    31d4:	de b7       	in	r29, 0x3e	; 62
    31d6:	89 83       	std	Y+1, r24	; 0x01
	OCR2 = (float32)((float32)DutyCycle/100)*255;
    31d8:	03 e4       	ldi	r16, 0x43	; 67
    31da:	10 e0       	ldi	r17, 0x00	; 0
    31dc:	89 81       	ldd	r24, Y+1	; 0x01
    31de:	88 2f       	mov	r24, r24
    31e0:	90 e0       	ldi	r25, 0x00	; 0
    31e2:	a0 e0       	ldi	r26, 0x00	; 0
    31e4:	b0 e0       	ldi	r27, 0x00	; 0
    31e6:	bc 01       	movw	r22, r24
    31e8:	cd 01       	movw	r24, r26
    31ea:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    31ee:	dc 01       	movw	r26, r24
    31f0:	cb 01       	movw	r24, r22
    31f2:	bc 01       	movw	r22, r24
    31f4:	cd 01       	movw	r24, r26
    31f6:	20 e0       	ldi	r18, 0x00	; 0
    31f8:	30 e0       	ldi	r19, 0x00	; 0
    31fa:	48 ec       	ldi	r20, 0xC8	; 200
    31fc:	52 e4       	ldi	r21, 0x42	; 66
    31fe:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3202:	dc 01       	movw	r26, r24
    3204:	cb 01       	movw	r24, r22
    3206:	bc 01       	movw	r22, r24
    3208:	cd 01       	movw	r24, r26
    320a:	20 e0       	ldi	r18, 0x00	; 0
    320c:	30 e0       	ldi	r19, 0x00	; 0
    320e:	4f e7       	ldi	r20, 0x7F	; 127
    3210:	53 e4       	ldi	r21, 0x43	; 67
    3212:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3216:	dc 01       	movw	r26, r24
    3218:	cb 01       	movw	r24, r22
    321a:	bc 01       	movw	r22, r24
    321c:	cd 01       	movw	r24, r26
    321e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3222:	dc 01       	movw	r26, r24
    3224:	cb 01       	movw	r24, r22
    3226:	f8 01       	movw	r30, r16
    3228:	80 83       	st	Z, r24
}
    322a:	0f 90       	pop	r0
    322c:	cf 91       	pop	r28
    322e:	df 91       	pop	r29
    3230:	1f 91       	pop	r17
    3232:	0f 91       	pop	r16
    3234:	08 95       	ret

00003236 <__vector_4>:

/*ISR*/

void __vector_4(void) //TIMER2 COMP ISR 
{
    3236:	1f 92       	push	r1
    3238:	0f 92       	push	r0
    323a:	0f b6       	in	r0, 0x3f	; 63
    323c:	0f 92       	push	r0
    323e:	11 24       	eor	r1, r1
    3240:	2f 93       	push	r18
    3242:	3f 93       	push	r19
    3244:	4f 93       	push	r20
    3246:	5f 93       	push	r21
    3248:	6f 93       	push	r22
    324a:	7f 93       	push	r23
    324c:	8f 93       	push	r24
    324e:	9f 93       	push	r25
    3250:	af 93       	push	r26
    3252:	bf 93       	push	r27
    3254:	ef 93       	push	r30
    3256:	ff 93       	push	r31
    3258:	df 93       	push	r29
    325a:	cf 93       	push	r28
    325c:	cd b7       	in	r28, 0x3d	; 61
    325e:	de b7       	in	r29, 0x3e	; 62
//	static uint8 Local_Tick = 0;
	if (TIMER2_PtrCallBack != NULL_PTR)
    3260:	80 91 92 01 	lds	r24, 0x0192
    3264:	90 91 93 01 	lds	r25, 0x0193
    3268:	00 97       	sbiw	r24, 0x00	; 0
    326a:	29 f0       	breq	.+10     	; 0x3276 <__vector_4+0x40>
			{
			TIMER2_PtrCallBack();
    326c:	e0 91 92 01 	lds	r30, 0x0192
    3270:	f0 91 93 01 	lds	r31, 0x0193
    3274:	09 95       	icall
			}
	else
			{
			/* Do Nothing */
			}
}
    3276:	cf 91       	pop	r28
    3278:	df 91       	pop	r29
    327a:	ff 91       	pop	r31
    327c:	ef 91       	pop	r30
    327e:	bf 91       	pop	r27
    3280:	af 91       	pop	r26
    3282:	9f 91       	pop	r25
    3284:	8f 91       	pop	r24
    3286:	7f 91       	pop	r23
    3288:	6f 91       	pop	r22
    328a:	5f 91       	pop	r21
    328c:	4f 91       	pop	r20
    328e:	3f 91       	pop	r19
    3290:	2f 91       	pop	r18
    3292:	0f 90       	pop	r0
    3294:	0f be       	out	0x3f, r0	; 63
    3296:	0f 90       	pop	r0
    3298:	1f 90       	pop	r1
    329a:	18 95       	reti

0000329c <__vector_5>:
void __vector_5(void) //TIMER2 OVF ISR
{
    329c:	1f 92       	push	r1
    329e:	0f 92       	push	r0
    32a0:	0f b6       	in	r0, 0x3f	; 63
    32a2:	0f 92       	push	r0
    32a4:	11 24       	eor	r1, r1
    32a6:	2f 93       	push	r18
    32a8:	3f 93       	push	r19
    32aa:	4f 93       	push	r20
    32ac:	5f 93       	push	r21
    32ae:	6f 93       	push	r22
    32b0:	7f 93       	push	r23
    32b2:	8f 93       	push	r24
    32b4:	9f 93       	push	r25
    32b6:	af 93       	push	r26
    32b8:	bf 93       	push	r27
    32ba:	ef 93       	push	r30
    32bc:	ff 93       	push	r31
    32be:	df 93       	push	r29
    32c0:	cf 93       	push	r28
    32c2:	cd b7       	in	r28, 0x3d	; 61
    32c4:	de b7       	in	r29, 0x3e	; 62
	if (TIMER2_PtrCallBack != NULL_PTR)
    32c6:	80 91 92 01 	lds	r24, 0x0192
    32ca:	90 91 93 01 	lds	r25, 0x0193
    32ce:	00 97       	sbiw	r24, 0x00	; 0
    32d0:	29 f0       	breq	.+10     	; 0x32dc <__vector_5+0x40>
		{
			TIMER2_PtrCallBack();
    32d2:	e0 91 92 01 	lds	r30, 0x0192
    32d6:	f0 91 93 01 	lds	r31, 0x0193
    32da:	09 95       	icall
		}
		else
		{
			/* Do Nothing */
		}
}
    32dc:	cf 91       	pop	r28
    32de:	df 91       	pop	r29
    32e0:	ff 91       	pop	r31
    32e2:	ef 91       	pop	r30
    32e4:	bf 91       	pop	r27
    32e6:	af 91       	pop	r26
    32e8:	9f 91       	pop	r25
    32ea:	8f 91       	pop	r24
    32ec:	7f 91       	pop	r23
    32ee:	6f 91       	pop	r22
    32f0:	5f 91       	pop	r21
    32f2:	4f 91       	pop	r20
    32f4:	3f 91       	pop	r19
    32f6:	2f 91       	pop	r18
    32f8:	0f 90       	pop	r0
    32fa:	0f be       	out	0x3f, r0	; 63
    32fc:	0f 90       	pop	r0
    32fe:	1f 90       	pop	r1
    3300:	18 95       	reti

00003302 <__vector_7>:


void __vector_7(void) /* TIMER1 COMPA ISR */
{
    3302:	1f 92       	push	r1
    3304:	0f 92       	push	r0
    3306:	0f b6       	in	r0, 0x3f	; 63
    3308:	0f 92       	push	r0
    330a:	11 24       	eor	r1, r1
    330c:	2f 93       	push	r18
    330e:	3f 93       	push	r19
    3310:	4f 93       	push	r20
    3312:	5f 93       	push	r21
    3314:	6f 93       	push	r22
    3316:	7f 93       	push	r23
    3318:	8f 93       	push	r24
    331a:	9f 93       	push	r25
    331c:	af 93       	push	r26
    331e:	bf 93       	push	r27
    3320:	ef 93       	push	r30
    3322:	ff 93       	push	r31
    3324:	df 93       	push	r29
    3326:	cf 93       	push	r28
    3328:	cd b7       	in	r28, 0x3d	; 61
    332a:	de b7       	in	r29, 0x3e	; 62
	//static uint16 Local_Tick = 0;
	if (TIMER1_PtrCallBack != NULL_PTR)
    332c:	80 91 90 01 	lds	r24, 0x0190
    3330:	90 91 91 01 	lds	r25, 0x0191
    3334:	00 97       	sbiw	r24, 0x00	; 0
    3336:	29 f0       	breq	.+10     	; 0x3342 <__vector_7+0x40>
			{
	TIMER1_PtrCallBack();
    3338:	e0 91 90 01 	lds	r30, 0x0190
    333c:	f0 91 91 01 	lds	r31, 0x0191
    3340:	09 95       	icall
	else
			{
			/* Do Nothing */
			}

}
    3342:	cf 91       	pop	r28
    3344:	df 91       	pop	r29
    3346:	ff 91       	pop	r31
    3348:	ef 91       	pop	r30
    334a:	bf 91       	pop	r27
    334c:	af 91       	pop	r26
    334e:	9f 91       	pop	r25
    3350:	8f 91       	pop	r24
    3352:	7f 91       	pop	r23
    3354:	6f 91       	pop	r22
    3356:	5f 91       	pop	r21
    3358:	4f 91       	pop	r20
    335a:	3f 91       	pop	r19
    335c:	2f 91       	pop	r18
    335e:	0f 90       	pop	r0
    3360:	0f be       	out	0x3f, r0	; 63
    3362:	0f 90       	pop	r0
    3364:	1f 90       	pop	r1
    3366:	18 95       	reti

00003368 <__vector_8>:
void __vector_8(void) /* TIMER1 COMPB ISR */
{
    3368:	1f 92       	push	r1
    336a:	0f 92       	push	r0
    336c:	0f b6       	in	r0, 0x3f	; 63
    336e:	0f 92       	push	r0
    3370:	11 24       	eor	r1, r1
    3372:	2f 93       	push	r18
    3374:	3f 93       	push	r19
    3376:	4f 93       	push	r20
    3378:	5f 93       	push	r21
    337a:	6f 93       	push	r22
    337c:	7f 93       	push	r23
    337e:	8f 93       	push	r24
    3380:	9f 93       	push	r25
    3382:	af 93       	push	r26
    3384:	bf 93       	push	r27
    3386:	ef 93       	push	r30
    3388:	ff 93       	push	r31
    338a:	df 93       	push	r29
    338c:	cf 93       	push	r28
    338e:	cd b7       	in	r28, 0x3d	; 61
    3390:	de b7       	in	r29, 0x3e	; 62
	//static uint16 Local_Tick = 0;
	TIMER1_PtrCallBack();
    3392:	e0 91 90 01 	lds	r30, 0x0190
    3396:	f0 91 91 01 	lds	r31, 0x0191
    339a:	09 95       	icall
}
    339c:	cf 91       	pop	r28
    339e:	df 91       	pop	r29
    33a0:	ff 91       	pop	r31
    33a2:	ef 91       	pop	r30
    33a4:	bf 91       	pop	r27
    33a6:	af 91       	pop	r26
    33a8:	9f 91       	pop	r25
    33aa:	8f 91       	pop	r24
    33ac:	7f 91       	pop	r23
    33ae:	6f 91       	pop	r22
    33b0:	5f 91       	pop	r21
    33b2:	4f 91       	pop	r20
    33b4:	3f 91       	pop	r19
    33b6:	2f 91       	pop	r18
    33b8:	0f 90       	pop	r0
    33ba:	0f be       	out	0x3f, r0	; 63
    33bc:	0f 90       	pop	r0
    33be:	1f 90       	pop	r1
    33c0:	18 95       	reti

000033c2 <__vector_9>:
void __vector_9(void) //TIMER1 OVF ISR
{
    33c2:	1f 92       	push	r1
    33c4:	0f 92       	push	r0
    33c6:	0f b6       	in	r0, 0x3f	; 63
    33c8:	0f 92       	push	r0
    33ca:	11 24       	eor	r1, r1
    33cc:	2f 93       	push	r18
    33ce:	3f 93       	push	r19
    33d0:	4f 93       	push	r20
    33d2:	5f 93       	push	r21
    33d4:	6f 93       	push	r22
    33d6:	7f 93       	push	r23
    33d8:	8f 93       	push	r24
    33da:	9f 93       	push	r25
    33dc:	af 93       	push	r26
    33de:	bf 93       	push	r27
    33e0:	ef 93       	push	r30
    33e2:	ff 93       	push	r31
    33e4:	df 93       	push	r29
    33e6:	cf 93       	push	r28
    33e8:	cd b7       	in	r28, 0x3d	; 61
    33ea:	de b7       	in	r29, 0x3e	; 62
	//static uint16 Local_Tick = 0;
	TIMER1_PtrCallBack();
    33ec:	e0 91 90 01 	lds	r30, 0x0190
    33f0:	f0 91 91 01 	lds	r31, 0x0191
    33f4:	09 95       	icall
}
    33f6:	cf 91       	pop	r28
    33f8:	df 91       	pop	r29
    33fa:	ff 91       	pop	r31
    33fc:	ef 91       	pop	r30
    33fe:	bf 91       	pop	r27
    3400:	af 91       	pop	r26
    3402:	9f 91       	pop	r25
    3404:	8f 91       	pop	r24
    3406:	7f 91       	pop	r23
    3408:	6f 91       	pop	r22
    340a:	5f 91       	pop	r21
    340c:	4f 91       	pop	r20
    340e:	3f 91       	pop	r19
    3410:	2f 91       	pop	r18
    3412:	0f 90       	pop	r0
    3414:	0f be       	out	0x3f, r0	; 63
    3416:	0f 90       	pop	r0
    3418:	1f 90       	pop	r1
    341a:	18 95       	reti

0000341c <__vector_10>:
void __vector_10(void) //TIMER0 COMP ISR 
{
    341c:	1f 92       	push	r1
    341e:	0f 92       	push	r0
    3420:	0f b6       	in	r0, 0x3f	; 63
    3422:	0f 92       	push	r0
    3424:	11 24       	eor	r1, r1
    3426:	2f 93       	push	r18
    3428:	3f 93       	push	r19
    342a:	4f 93       	push	r20
    342c:	5f 93       	push	r21
    342e:	6f 93       	push	r22
    3430:	7f 93       	push	r23
    3432:	8f 93       	push	r24
    3434:	9f 93       	push	r25
    3436:	af 93       	push	r26
    3438:	bf 93       	push	r27
    343a:	ef 93       	push	r30
    343c:	ff 93       	push	r31
    343e:	df 93       	push	r29
    3440:	cf 93       	push	r28
    3442:	cd b7       	in	r28, 0x3d	; 61
    3444:	de b7       	in	r29, 0x3e	; 62
	//static uint8 Local_Tick = 0;
	if (TIMER0_PtrCallBack != NULL_PTR)
    3446:	80 91 8e 01 	lds	r24, 0x018E
    344a:	90 91 8f 01 	lds	r25, 0x018F
    344e:	00 97       	sbiw	r24, 0x00	; 0
    3450:	29 f0       	breq	.+10     	; 0x345c <__vector_10+0x40>
			{
	TIMER0_PtrCallBack();
    3452:	e0 91 8e 01 	lds	r30, 0x018E
    3456:	f0 91 8f 01 	lds	r31, 0x018F
    345a:	09 95       	icall
			}
	else
			{
			/* Do Nothing */
			}
}
    345c:	cf 91       	pop	r28
    345e:	df 91       	pop	r29
    3460:	ff 91       	pop	r31
    3462:	ef 91       	pop	r30
    3464:	bf 91       	pop	r27
    3466:	af 91       	pop	r26
    3468:	9f 91       	pop	r25
    346a:	8f 91       	pop	r24
    346c:	7f 91       	pop	r23
    346e:	6f 91       	pop	r22
    3470:	5f 91       	pop	r21
    3472:	4f 91       	pop	r20
    3474:	3f 91       	pop	r19
    3476:	2f 91       	pop	r18
    3478:	0f 90       	pop	r0
    347a:	0f be       	out	0x3f, r0	; 63
    347c:	0f 90       	pop	r0
    347e:	1f 90       	pop	r1
    3480:	18 95       	reti

00003482 <__vector_11>:
void __vector_11(void) /* TIMER0 OVF ISR */
{
    3482:	1f 92       	push	r1
    3484:	0f 92       	push	r0
    3486:	0f b6       	in	r0, 0x3f	; 63
    3488:	0f 92       	push	r0
    348a:	11 24       	eor	r1, r1
    348c:	2f 93       	push	r18
    348e:	3f 93       	push	r19
    3490:	4f 93       	push	r20
    3492:	5f 93       	push	r21
    3494:	6f 93       	push	r22
    3496:	7f 93       	push	r23
    3498:	8f 93       	push	r24
    349a:	9f 93       	push	r25
    349c:	af 93       	push	r26
    349e:	bf 93       	push	r27
    34a0:	ef 93       	push	r30
    34a2:	ff 93       	push	r31
    34a4:	df 93       	push	r29
    34a6:	cf 93       	push	r28
    34a8:	cd b7       	in	r28, 0x3d	; 61
    34aa:	de b7       	in	r29, 0x3e	; 62

		if (TIMER0_PtrCallBack != NULL_PTR)
    34ac:	80 91 8e 01 	lds	r24, 0x018E
    34b0:	90 91 8f 01 	lds	r25, 0x018F
    34b4:	00 97       	sbiw	r24, 0x00	; 0
    34b6:	29 f0       	breq	.+10     	; 0x34c2 <__vector_11+0x40>
		{
			TIMER0_PtrCallBack();
    34b8:	e0 91 8e 01 	lds	r30, 0x018E
    34bc:	f0 91 8f 01 	lds	r31, 0x018F
    34c0:	09 95       	icall
		}
		else
		{
			/* Do Nothing */
		}
}
    34c2:	cf 91       	pop	r28
    34c4:	df 91       	pop	r29
    34c6:	ff 91       	pop	r31
    34c8:	ef 91       	pop	r30
    34ca:	bf 91       	pop	r27
    34cc:	af 91       	pop	r26
    34ce:	9f 91       	pop	r25
    34d0:	8f 91       	pop	r24
    34d2:	7f 91       	pop	r23
    34d4:	6f 91       	pop	r22
    34d6:	5f 91       	pop	r21
    34d8:	4f 91       	pop	r20
    34da:	3f 91       	pop	r19
    34dc:	2f 91       	pop	r18
    34de:	0f 90       	pop	r0
    34e0:	0f be       	out	0x3f, r0	; 63
    34e2:	0f 90       	pop	r0
    34e4:	1f 90       	pop	r1
    34e6:	18 95       	reti

000034e8 <Ultrasonic_init>:
uint16 T = 0;
/* ===================================================================================================
										  Function Definition
   ===================================================================================================*/
void Ultrasonic_init(void)
{
    34e8:	df 93       	push	r29
    34ea:	cf 93       	push	r28
    34ec:	cd b7       	in	r28, 0x3d	; 61
    34ee:	de b7       	in	r29, 0x3e	; 62
ICU_init(&ICU_Configuration);
    34f0:	89 e7       	ldi	r24, 0x79	; 121
    34f2:	91 e0       	ldi	r25, 0x01	; 1
    34f4:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <ICU_init>

ICU_setCallBack(Ultrasonic_edgeProcessing);
    34f8:	86 ea       	ldi	r24, 0xA6	; 166
    34fa:	9b e1       	ldi	r25, 0x1B	; 27
    34fc:	0e 94 99 0a 	call	0x1532	; 0x1532 <ICU_setCallBack>

GPIO_setupPinDirection(ULTRASONIC_TR_PORT_ID, ULTRASONIC_TR_PIN_ID, PIN_OUTPUT);
    3500:	81 e0       	ldi	r24, 0x01	; 1
    3502:	65 e0       	ldi	r22, 0x05	; 5
    3504:	41 e0       	ldi	r20, 0x01	; 1
    3506:	0e 94 17 07 	call	0xe2e	; 0xe2e <GPIO_setupPinDirection>
}
    350a:	cf 91       	pop	r28
    350c:	df 91       	pop	r29
    350e:	08 95       	ret

00003510 <Ultrasonic_Trigger>:

static void Ultrasonic_Trigger(void)
{
    3510:	df 93       	push	r29
    3512:	cf 93       	push	r28
    3514:	cd b7       	in	r28, 0x3d	; 61
    3516:	de b7       	in	r29, 0x3e	; 62
    3518:	68 97       	sbiw	r28, 0x18	; 24
    351a:	0f b6       	in	r0, 0x3f	; 63
    351c:	f8 94       	cli
    351e:	de bf       	out	0x3e, r29	; 62
    3520:	0f be       	out	0x3f, r0	; 63
    3522:	cd bf       	out	0x3d, r28	; 61
GPIO_writePin(ULTRASONIC_TR_PORT_ID, ULTRASONIC_TR_PIN_ID, LOGIC_HIGH);
    3524:	81 e0       	ldi	r24, 0x01	; 1
    3526:	65 e0       	ldi	r22, 0x05	; 5
    3528:	41 e0       	ldi	r20, 0x01	; 1
    352a:	0e 94 11 08 	call	0x1022	; 0x1022 <GPIO_writePin>
    352e:	80 e0       	ldi	r24, 0x00	; 0
    3530:	90 e0       	ldi	r25, 0x00	; 0
    3532:	a0 e2       	ldi	r26, 0x20	; 32
    3534:	b1 e4       	ldi	r27, 0x41	; 65
    3536:	8d 8b       	std	Y+21, r24	; 0x15
    3538:	9e 8b       	std	Y+22, r25	; 0x16
    353a:	af 8b       	std	Y+23, r26	; 0x17
    353c:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    353e:	6d 89       	ldd	r22, Y+21	; 0x15
    3540:	7e 89       	ldd	r23, Y+22	; 0x16
    3542:	8f 89       	ldd	r24, Y+23	; 0x17
    3544:	98 8d       	ldd	r25, Y+24	; 0x18
    3546:	2b ea       	ldi	r18, 0xAB	; 171
    3548:	3a ea       	ldi	r19, 0xAA	; 170
    354a:	4a e2       	ldi	r20, 0x2A	; 42
    354c:	50 e4       	ldi	r21, 0x40	; 64
    354e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3552:	dc 01       	movw	r26, r24
    3554:	cb 01       	movw	r24, r22
    3556:	89 8b       	std	Y+17, r24	; 0x11
    3558:	9a 8b       	std	Y+18, r25	; 0x12
    355a:	ab 8b       	std	Y+19, r26	; 0x13
    355c:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    355e:	69 89       	ldd	r22, Y+17	; 0x11
    3560:	7a 89       	ldd	r23, Y+18	; 0x12
    3562:	8b 89       	ldd	r24, Y+19	; 0x13
    3564:	9c 89       	ldd	r25, Y+20	; 0x14
    3566:	20 e0       	ldi	r18, 0x00	; 0
    3568:	30 e0       	ldi	r19, 0x00	; 0
    356a:	40 e8       	ldi	r20, 0x80	; 128
    356c:	5f e3       	ldi	r21, 0x3F	; 63
    356e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3572:	88 23       	and	r24, r24
    3574:	1c f4       	brge	.+6      	; 0x357c <Ultrasonic_Trigger+0x6c>
		__ticks = 1;
    3576:	81 e0       	ldi	r24, 0x01	; 1
    3578:	88 8b       	std	Y+16, r24	; 0x10
    357a:	91 c0       	rjmp	.+290    	; 0x369e <Ultrasonic_Trigger+0x18e>
	else if (__tmp > 255)
    357c:	69 89       	ldd	r22, Y+17	; 0x11
    357e:	7a 89       	ldd	r23, Y+18	; 0x12
    3580:	8b 89       	ldd	r24, Y+19	; 0x13
    3582:	9c 89       	ldd	r25, Y+20	; 0x14
    3584:	20 e0       	ldi	r18, 0x00	; 0
    3586:	30 e0       	ldi	r19, 0x00	; 0
    3588:	4f e7       	ldi	r20, 0x7F	; 127
    358a:	53 e4       	ldi	r21, 0x43	; 67
    358c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3590:	18 16       	cp	r1, r24
    3592:	0c f0       	brlt	.+2      	; 0x3596 <Ultrasonic_Trigger+0x86>
    3594:	7b c0       	rjmp	.+246    	; 0x368c <Ultrasonic_Trigger+0x17c>
	{
		_delay_ms(__us / 1000.0);
    3596:	6d 89       	ldd	r22, Y+21	; 0x15
    3598:	7e 89       	ldd	r23, Y+22	; 0x16
    359a:	8f 89       	ldd	r24, Y+23	; 0x17
    359c:	98 8d       	ldd	r25, Y+24	; 0x18
    359e:	20 e0       	ldi	r18, 0x00	; 0
    35a0:	30 e0       	ldi	r19, 0x00	; 0
    35a2:	4a e7       	ldi	r20, 0x7A	; 122
    35a4:	54 e4       	ldi	r21, 0x44	; 68
    35a6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    35aa:	dc 01       	movw	r26, r24
    35ac:	cb 01       	movw	r24, r22
    35ae:	8c 87       	std	Y+12, r24	; 0x0c
    35b0:	9d 87       	std	Y+13, r25	; 0x0d
    35b2:	ae 87       	std	Y+14, r26	; 0x0e
    35b4:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35b6:	6c 85       	ldd	r22, Y+12	; 0x0c
    35b8:	7d 85       	ldd	r23, Y+13	; 0x0d
    35ba:	8e 85       	ldd	r24, Y+14	; 0x0e
    35bc:	9f 85       	ldd	r25, Y+15	; 0x0f
    35be:	20 e0       	ldi	r18, 0x00	; 0
    35c0:	30 e0       	ldi	r19, 0x00	; 0
    35c2:	4a ef       	ldi	r20, 0xFA	; 250
    35c4:	54 e4       	ldi	r21, 0x44	; 68
    35c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35ca:	dc 01       	movw	r26, r24
    35cc:	cb 01       	movw	r24, r22
    35ce:	88 87       	std	Y+8, r24	; 0x08
    35d0:	99 87       	std	Y+9, r25	; 0x09
    35d2:	aa 87       	std	Y+10, r26	; 0x0a
    35d4:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    35d6:	68 85       	ldd	r22, Y+8	; 0x08
    35d8:	79 85       	ldd	r23, Y+9	; 0x09
    35da:	8a 85       	ldd	r24, Y+10	; 0x0a
    35dc:	9b 85       	ldd	r25, Y+11	; 0x0b
    35de:	20 e0       	ldi	r18, 0x00	; 0
    35e0:	30 e0       	ldi	r19, 0x00	; 0
    35e2:	40 e8       	ldi	r20, 0x80	; 128
    35e4:	5f e3       	ldi	r21, 0x3F	; 63
    35e6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    35ea:	88 23       	and	r24, r24
    35ec:	2c f4       	brge	.+10     	; 0x35f8 <Ultrasonic_Trigger+0xe8>
		__ticks = 1;
    35ee:	81 e0       	ldi	r24, 0x01	; 1
    35f0:	90 e0       	ldi	r25, 0x00	; 0
    35f2:	9f 83       	std	Y+7, r25	; 0x07
    35f4:	8e 83       	std	Y+6, r24	; 0x06
    35f6:	3f c0       	rjmp	.+126    	; 0x3676 <Ultrasonic_Trigger+0x166>
	else if (__tmp > 65535)
    35f8:	68 85       	ldd	r22, Y+8	; 0x08
    35fa:	79 85       	ldd	r23, Y+9	; 0x09
    35fc:	8a 85       	ldd	r24, Y+10	; 0x0a
    35fe:	9b 85       	ldd	r25, Y+11	; 0x0b
    3600:	20 e0       	ldi	r18, 0x00	; 0
    3602:	3f ef       	ldi	r19, 0xFF	; 255
    3604:	4f e7       	ldi	r20, 0x7F	; 127
    3606:	57 e4       	ldi	r21, 0x47	; 71
    3608:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    360c:	18 16       	cp	r1, r24
    360e:	4c f5       	brge	.+82     	; 0x3662 <Ultrasonic_Trigger+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3610:	6c 85       	ldd	r22, Y+12	; 0x0c
    3612:	7d 85       	ldd	r23, Y+13	; 0x0d
    3614:	8e 85       	ldd	r24, Y+14	; 0x0e
    3616:	9f 85       	ldd	r25, Y+15	; 0x0f
    3618:	20 e0       	ldi	r18, 0x00	; 0
    361a:	30 e0       	ldi	r19, 0x00	; 0
    361c:	40 e2       	ldi	r20, 0x20	; 32
    361e:	51 e4       	ldi	r21, 0x41	; 65
    3620:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3624:	dc 01       	movw	r26, r24
    3626:	cb 01       	movw	r24, r22
    3628:	bc 01       	movw	r22, r24
    362a:	cd 01       	movw	r24, r26
    362c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3630:	dc 01       	movw	r26, r24
    3632:	cb 01       	movw	r24, r22
    3634:	9f 83       	std	Y+7, r25	; 0x07
    3636:	8e 83       	std	Y+6, r24	; 0x06
    3638:	0f c0       	rjmp	.+30     	; 0x3658 <Ultrasonic_Trigger+0x148>
    363a:	88 ec       	ldi	r24, 0xC8	; 200
    363c:	90 e0       	ldi	r25, 0x00	; 0
    363e:	9d 83       	std	Y+5, r25	; 0x05
    3640:	8c 83       	std	Y+4, r24	; 0x04
    3642:	8c 81       	ldd	r24, Y+4	; 0x04
    3644:	9d 81       	ldd	r25, Y+5	; 0x05
    3646:	01 97       	sbiw	r24, 0x01	; 1
    3648:	f1 f7       	brne	.-4      	; 0x3646 <Ultrasonic_Trigger+0x136>
    364a:	9d 83       	std	Y+5, r25	; 0x05
    364c:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    364e:	8e 81       	ldd	r24, Y+6	; 0x06
    3650:	9f 81       	ldd	r25, Y+7	; 0x07
    3652:	01 97       	sbiw	r24, 0x01	; 1
    3654:	9f 83       	std	Y+7, r25	; 0x07
    3656:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3658:	8e 81       	ldd	r24, Y+6	; 0x06
    365a:	9f 81       	ldd	r25, Y+7	; 0x07
    365c:	00 97       	sbiw	r24, 0x00	; 0
    365e:	69 f7       	brne	.-38     	; 0x363a <Ultrasonic_Trigger+0x12a>
    3660:	24 c0       	rjmp	.+72     	; 0x36aa <Ultrasonic_Trigger+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3662:	68 85       	ldd	r22, Y+8	; 0x08
    3664:	79 85       	ldd	r23, Y+9	; 0x09
    3666:	8a 85       	ldd	r24, Y+10	; 0x0a
    3668:	9b 85       	ldd	r25, Y+11	; 0x0b
    366a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    366e:	dc 01       	movw	r26, r24
    3670:	cb 01       	movw	r24, r22
    3672:	9f 83       	std	Y+7, r25	; 0x07
    3674:	8e 83       	std	Y+6, r24	; 0x06
    3676:	8e 81       	ldd	r24, Y+6	; 0x06
    3678:	9f 81       	ldd	r25, Y+7	; 0x07
    367a:	9b 83       	std	Y+3, r25	; 0x03
    367c:	8a 83       	std	Y+2, r24	; 0x02
    367e:	8a 81       	ldd	r24, Y+2	; 0x02
    3680:	9b 81       	ldd	r25, Y+3	; 0x03
    3682:	01 97       	sbiw	r24, 0x01	; 1
    3684:	f1 f7       	brne	.-4      	; 0x3682 <Ultrasonic_Trigger+0x172>
    3686:	9b 83       	std	Y+3, r25	; 0x03
    3688:	8a 83       	std	Y+2, r24	; 0x02
    368a:	0f c0       	rjmp	.+30     	; 0x36aa <Ultrasonic_Trigger+0x19a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    368c:	69 89       	ldd	r22, Y+17	; 0x11
    368e:	7a 89       	ldd	r23, Y+18	; 0x12
    3690:	8b 89       	ldd	r24, Y+19	; 0x13
    3692:	9c 89       	ldd	r25, Y+20	; 0x14
    3694:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3698:	dc 01       	movw	r26, r24
    369a:	cb 01       	movw	r24, r22
    369c:	88 8b       	std	Y+16, r24	; 0x10
    369e:	88 89       	ldd	r24, Y+16	; 0x10
    36a0:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    36a2:	89 81       	ldd	r24, Y+1	; 0x01
    36a4:	8a 95       	dec	r24
    36a6:	f1 f7       	brne	.-4      	; 0x36a4 <Ultrasonic_Trigger+0x194>
    36a8:	89 83       	std	Y+1, r24	; 0x01
_delay_us(10);
GPIO_writePin(ULTRASONIC_TR_PORT_ID, ULTRASONIC_TR_PIN_ID, LOGIC_LOW);
    36aa:	81 e0       	ldi	r24, 0x01	; 1
    36ac:	65 e0       	ldi	r22, 0x05	; 5
    36ae:	40 e0       	ldi	r20, 0x00	; 0
    36b0:	0e 94 11 08 	call	0x1022	; 0x1022 <GPIO_writePin>
}
    36b4:	68 96       	adiw	r28, 0x18	; 24
    36b6:	0f b6       	in	r0, 0x3f	; 63
    36b8:	f8 94       	cli
    36ba:	de bf       	out	0x3e, r29	; 62
    36bc:	0f be       	out	0x3f, r0	; 63
    36be:	cd bf       	out	0x3d, r28	; 61
    36c0:	cf 91       	pop	r28
    36c2:	df 91       	pop	r29
    36c4:	08 95       	ret

000036c6 <Ultrasonic_readDistance>:

uint16 Ultrasonic_readDistance(void)
{
    36c6:	df 93       	push	r29
    36c8:	cf 93       	push	r28
    36ca:	00 d0       	rcall	.+0      	; 0x36cc <Ultrasonic_readDistance+0x6>
    36cc:	cd b7       	in	r28, 0x3d	; 61
    36ce:	de b7       	in	r29, 0x3e	; 62
	uint16  distance  = 0;
    36d0:	1a 82       	std	Y+2, r1	; 0x02
    36d2:	19 82       	std	Y+1, r1	; 0x01
	edgeCount = 0;
    36d4:	10 92 94 01 	sts	0x0194, r1
	T  = 0;
    36d8:	10 92 96 01 	sts	0x0196, r1
    36dc:	10 92 95 01 	sts	0x0195, r1

	Ultrasonic_Trigger();
    36e0:	0e 94 88 1a 	call	0x3510	; 0x3510 <Ultrasonic_Trigger>

	while(edgeCount < ULTRASONIC_PERIOD_NUM_EDGES);
    36e4:	80 91 94 01 	lds	r24, 0x0194
    36e8:	82 30       	cpi	r24, 0x02	; 2
    36ea:	e0 f3       	brcs	.-8      	; 0x36e4 <Ultrasonic_readDistance+0x1e>

	distance =((float32)T/58)+1;
    36ec:	80 91 95 01 	lds	r24, 0x0195
    36f0:	90 91 96 01 	lds	r25, 0x0196
    36f4:	cc 01       	movw	r24, r24
    36f6:	a0 e0       	ldi	r26, 0x00	; 0
    36f8:	b0 e0       	ldi	r27, 0x00	; 0
    36fa:	bc 01       	movw	r22, r24
    36fc:	cd 01       	movw	r24, r26
    36fe:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    3702:	dc 01       	movw	r26, r24
    3704:	cb 01       	movw	r24, r22
    3706:	bc 01       	movw	r22, r24
    3708:	cd 01       	movw	r24, r26
    370a:	20 e0       	ldi	r18, 0x00	; 0
    370c:	30 e0       	ldi	r19, 0x00	; 0
    370e:	48 e6       	ldi	r20, 0x68	; 104
    3710:	52 e4       	ldi	r21, 0x42	; 66
    3712:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3716:	dc 01       	movw	r26, r24
    3718:	cb 01       	movw	r24, r22
    371a:	bc 01       	movw	r22, r24
    371c:	cd 01       	movw	r24, r26
    371e:	20 e0       	ldi	r18, 0x00	; 0
    3720:	30 e0       	ldi	r19, 0x00	; 0
    3722:	40 e8       	ldi	r20, 0x80	; 128
    3724:	5f e3       	ldi	r21, 0x3F	; 63
    3726:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    372a:	dc 01       	movw	r26, r24
    372c:	cb 01       	movw	r24, r22
    372e:	bc 01       	movw	r22, r24
    3730:	cd 01       	movw	r24, r26
    3732:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3736:	dc 01       	movw	r26, r24
    3738:	cb 01       	movw	r24, r22
    373a:	9a 83       	std	Y+2, r25	; 0x02
    373c:	89 83       	std	Y+1, r24	; 0x01

	return distance;
    373e:	89 81       	ldd	r24, Y+1	; 0x01
    3740:	9a 81       	ldd	r25, Y+2	; 0x02
}
    3742:	0f 90       	pop	r0
    3744:	0f 90       	pop	r0
    3746:	cf 91       	pop	r28
    3748:	df 91       	pop	r29
    374a:	08 95       	ret

0000374c <Ultrasonic_edgeProcessing>:

void Ultrasonic_edgeProcessing(void)
{
    374c:	df 93       	push	r29
    374e:	cf 93       	push	r28
    3750:	cd b7       	in	r28, 0x3d	; 61
    3752:	de b7       	in	r29, 0x3e	; 62
		edgeCount++;
    3754:	80 91 94 01 	lds	r24, 0x0194
    3758:	8f 5f       	subi	r24, 0xFF	; 255
    375a:	80 93 94 01 	sts	0x0194, r24
		if (edgeCount == 1)
    375e:	80 91 94 01 	lds	r24, 0x0194
    3762:	81 30       	cpi	r24, 0x01	; 1
    3764:	31 f4       	brne	.+12     	; 0x3772 <Ultrasonic_edgeProcessing+0x26>
		{
			ICU_clearTimerValue();
    3766:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <ICU_clearTimerValue>
			ICU_setEdgeDetectionType(FALLING_EDGE);
    376a:	80 e0       	ldi	r24, 0x00	; 0
    376c:	0e 94 ab 0a 	call	0x1556	; 0x1556 <ICU_setEdgeDetectionType>
    3770:	0d c0       	rjmp	.+26     	; 0x378c <Ultrasonic_edgeProcessing+0x40>
		}
		else if (edgeCount == 2)
    3772:	80 91 94 01 	lds	r24, 0x0194
    3776:	82 30       	cpi	r24, 0x02	; 2
    3778:	49 f4       	brne	.+18     	; 0x378c <Ultrasonic_edgeProcessing+0x40>
		{
		  T = ICU_getInputCaptureValue();
    377a:	0e 94 ca 0a 	call	0x1594	; 0x1594 <ICU_getInputCaptureValue>
    377e:	90 93 96 01 	sts	0x0196, r25
    3782:	80 93 95 01 	sts	0x0195, r24

			ICU_setEdgeDetectionType(RISING_EDGE);
    3786:	81 e0       	ldi	r24, 0x01	; 1
    3788:	0e 94 ab 0a 	call	0x1556	; 0x1556 <ICU_setEdgeDetectionType>
		}
}
    378c:	cf 91       	pop	r28
    378e:	df 91       	pop	r29
    3790:	08 95       	ret

00003792 <__prologue_saves__>:
    3792:	2f 92       	push	r2
    3794:	3f 92       	push	r3
    3796:	4f 92       	push	r4
    3798:	5f 92       	push	r5
    379a:	6f 92       	push	r6
    379c:	7f 92       	push	r7
    379e:	8f 92       	push	r8
    37a0:	9f 92       	push	r9
    37a2:	af 92       	push	r10
    37a4:	bf 92       	push	r11
    37a6:	cf 92       	push	r12
    37a8:	df 92       	push	r13
    37aa:	ef 92       	push	r14
    37ac:	ff 92       	push	r15
    37ae:	0f 93       	push	r16
    37b0:	1f 93       	push	r17
    37b2:	cf 93       	push	r28
    37b4:	df 93       	push	r29
    37b6:	cd b7       	in	r28, 0x3d	; 61
    37b8:	de b7       	in	r29, 0x3e	; 62
    37ba:	ca 1b       	sub	r28, r26
    37bc:	db 0b       	sbc	r29, r27
    37be:	0f b6       	in	r0, 0x3f	; 63
    37c0:	f8 94       	cli
    37c2:	de bf       	out	0x3e, r29	; 62
    37c4:	0f be       	out	0x3f, r0	; 63
    37c6:	cd bf       	out	0x3d, r28	; 61
    37c8:	09 94       	ijmp

000037ca <__epilogue_restores__>:
    37ca:	2a 88       	ldd	r2, Y+18	; 0x12
    37cc:	39 88       	ldd	r3, Y+17	; 0x11
    37ce:	48 88       	ldd	r4, Y+16	; 0x10
    37d0:	5f 84       	ldd	r5, Y+15	; 0x0f
    37d2:	6e 84       	ldd	r6, Y+14	; 0x0e
    37d4:	7d 84       	ldd	r7, Y+13	; 0x0d
    37d6:	8c 84       	ldd	r8, Y+12	; 0x0c
    37d8:	9b 84       	ldd	r9, Y+11	; 0x0b
    37da:	aa 84       	ldd	r10, Y+10	; 0x0a
    37dc:	b9 84       	ldd	r11, Y+9	; 0x09
    37de:	c8 84       	ldd	r12, Y+8	; 0x08
    37e0:	df 80       	ldd	r13, Y+7	; 0x07
    37e2:	ee 80       	ldd	r14, Y+6	; 0x06
    37e4:	fd 80       	ldd	r15, Y+5	; 0x05
    37e6:	0c 81       	ldd	r16, Y+4	; 0x04
    37e8:	1b 81       	ldd	r17, Y+3	; 0x03
    37ea:	aa 81       	ldd	r26, Y+2	; 0x02
    37ec:	b9 81       	ldd	r27, Y+1	; 0x01
    37ee:	ce 0f       	add	r28, r30
    37f0:	d1 1d       	adc	r29, r1
    37f2:	0f b6       	in	r0, 0x3f	; 63
    37f4:	f8 94       	cli
    37f6:	de bf       	out	0x3e, r29	; 62
    37f8:	0f be       	out	0x3f, r0	; 63
    37fa:	cd bf       	out	0x3d, r28	; 61
    37fc:	ed 01       	movw	r28, r26
    37fe:	08 95       	ret

00003800 <itoa>:
    3800:	fb 01       	movw	r30, r22
    3802:	9f 01       	movw	r18, r30
    3804:	e8 94       	clt
    3806:	42 30       	cpi	r20, 0x02	; 2
    3808:	c4 f0       	brlt	.+48     	; 0x383a <itoa+0x3a>
    380a:	45 32       	cpi	r20, 0x25	; 37
    380c:	b4 f4       	brge	.+44     	; 0x383a <itoa+0x3a>
    380e:	4a 30       	cpi	r20, 0x0A	; 10
    3810:	29 f4       	brne	.+10     	; 0x381c <itoa+0x1c>
    3812:	97 fb       	bst	r25, 7
    3814:	1e f4       	brtc	.+6      	; 0x381c <itoa+0x1c>
    3816:	90 95       	com	r25
    3818:	81 95       	neg	r24
    381a:	9f 4f       	sbci	r25, 0xFF	; 255
    381c:	64 2f       	mov	r22, r20
    381e:	77 27       	eor	r23, r23
    3820:	0e 94 31 1c 	call	0x3862	; 0x3862 <__udivmodhi4>
    3824:	80 5d       	subi	r24, 0xD0	; 208
    3826:	8a 33       	cpi	r24, 0x3A	; 58
    3828:	0c f0       	brlt	.+2      	; 0x382c <itoa+0x2c>
    382a:	89 5d       	subi	r24, 0xD9	; 217
    382c:	81 93       	st	Z+, r24
    382e:	cb 01       	movw	r24, r22
    3830:	00 97       	sbiw	r24, 0x00	; 0
    3832:	a1 f7       	brne	.-24     	; 0x381c <itoa+0x1c>
    3834:	16 f4       	brtc	.+4      	; 0x383a <itoa+0x3a>
    3836:	5d e2       	ldi	r21, 0x2D	; 45
    3838:	51 93       	st	Z+, r21
    383a:	10 82       	st	Z, r1
    383c:	c9 01       	movw	r24, r18
    383e:	0c 94 21 1c 	jmp	0x3842	; 0x3842 <strrev>

00003842 <strrev>:
    3842:	dc 01       	movw	r26, r24
    3844:	fc 01       	movw	r30, r24
    3846:	67 2f       	mov	r22, r23
    3848:	71 91       	ld	r23, Z+
    384a:	77 23       	and	r23, r23
    384c:	e1 f7       	brne	.-8      	; 0x3846 <strrev+0x4>
    384e:	32 97       	sbiw	r30, 0x02	; 2
    3850:	04 c0       	rjmp	.+8      	; 0x385a <strrev+0x18>
    3852:	7c 91       	ld	r23, X
    3854:	6d 93       	st	X+, r22
    3856:	70 83       	st	Z, r23
    3858:	62 91       	ld	r22, -Z
    385a:	ae 17       	cp	r26, r30
    385c:	bf 07       	cpc	r27, r31
    385e:	c8 f3       	brcs	.-14     	; 0x3852 <strrev+0x10>
    3860:	08 95       	ret

00003862 <__udivmodhi4>:
    3862:	aa 1b       	sub	r26, r26
    3864:	bb 1b       	sub	r27, r27
    3866:	51 e1       	ldi	r21, 0x11	; 17
    3868:	07 c0       	rjmp	.+14     	; 0x3878 <__udivmodhi4_ep>

0000386a <__udivmodhi4_loop>:
    386a:	aa 1f       	adc	r26, r26
    386c:	bb 1f       	adc	r27, r27
    386e:	a6 17       	cp	r26, r22
    3870:	b7 07       	cpc	r27, r23
    3872:	10 f0       	brcs	.+4      	; 0x3878 <__udivmodhi4_ep>
    3874:	a6 1b       	sub	r26, r22
    3876:	b7 0b       	sbc	r27, r23

00003878 <__udivmodhi4_ep>:
    3878:	88 1f       	adc	r24, r24
    387a:	99 1f       	adc	r25, r25
    387c:	5a 95       	dec	r21
    387e:	a9 f7       	brne	.-22     	; 0x386a <__udivmodhi4_loop>
    3880:	80 95       	com	r24
    3882:	90 95       	com	r25
    3884:	bc 01       	movw	r22, r24
    3886:	cd 01       	movw	r24, r26
    3888:	08 95       	ret

0000388a <_exit>:
    388a:	f8 94       	cli

0000388c <__stop_program>:
    388c:	ff cf       	rjmp	.-2      	; 0x388c <__stop_program>
